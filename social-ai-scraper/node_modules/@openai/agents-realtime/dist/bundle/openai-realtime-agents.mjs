var Aa = Object.defineProperty;
var $r = (n) => {
  throw TypeError(n);
};
var Ca = (n, e, t) => e in n ? Aa(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t;
var _ = (n, e, t) => Ca(n, typeof e != "symbol" ? e + "" : e, t), Jn = (n, e, t) => e.has(n) || $r("Cannot " + t);
var u = (n, e, t) => (Jn(n, e, "read from private field"), t ? t.call(n) : e.get(n)), T = (n, e, t) => e.has(n) ? $r("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(n) : e.set(n, t), y = (n, e, t, r) => (Jn(n, e, "write to private field"), r ? r.call(n, t) : e.set(n, t), t), $ = (n, e, t) => (Jn(n, e, "access private method"), t);
const Kn = {
  version: "0.0.10"
};
function Ns(n) {
  const e = atob(n), t = e.length, r = new Uint8Array(t);
  for (let s = 0; s < t; s++)
    r[s] = e.charCodeAt(s);
  return r.buffer;
}
function Rs(n) {
  const e = String.fromCharCode(...new Uint8Array(n));
  return btoa(e);
}
function Ds(n) {
  if (typeof n > "u" || n === null || typeof n != "object" || !("type" in n) || typeof n.type != "string" || !n.type || n.type !== "message" || !("content" in n) || !Array.isArray(n.content) || n.content.length < 1)
    return;
  const e = n.content[n.content.length - 1];
  if (!(!("type" in e) || typeof e.type != "string")) {
    if (e.type === "text")
      return typeof e.text == "string" ? e.text : void 0;
    if (e.type === "audio")
      return typeof e.transcript == "string" ? e.transcript : void 0;
  }
}
function Ea(n, e) {
  const t = n.filter((a) => !e.some((i) => i.itemId === a.itemId)), r = e.filter((a) => !n.some((i) => i.itemId === a.itemId)), s = e.filter((a) => n.some((i) => i.itemId === a.itemId && JSON.stringify(i) !== JSON.stringify(a)));
  return {
    removals: t,
    additions: r,
    updates: s
  };
}
function Oa() {
  return typeof window > "u" ? !1 : typeof window.RTCPeerConnection < "u";
}
function Lr(n) {
  return n.role === "system" ? n : n.role === "assistant" ? {
    ...n,
    content: n.content.map((e) => e.type === "audio" ? {
      ...e,
      audio: null
    } : e)
  } : n.role === "user" ? {
    ...n,
    content: n.content.map((e) => e.type === "input_audio" ? {
      ...e,
      audio: null
    } : e)
  } : n;
}
function Na(n, e, t) {
  const r = !t && e.type === "message" ? Lr(e) : e, s = n.findIndex((a) => a.itemId === e.itemId);
  if (s !== -1)
    return n.map((a, i) => i === s ? r : !t && a.type === "message" ? Lr(a) : a);
  if (e.previousItemId) {
    const a = n.findIndex((i) => i.itemId === e.previousItemId);
    return a !== -1 ? [
      ...n.slice(0, a + 1),
      r,
      ...n.slice(a + 1)
    ] : [...n, r];
  } else
    return [...n, r];
}
const Ra = {
  "User-Agent": `Agents/JavaScript ${Kn.version}`,
  "X-OpenAI-Agents-SDK": `openai-agents-sdk.${Kn.version}`
}, Da = `openai-agents-sdk.${Kn.version}`;
async function wr(n) {
  try {
    return [null, await n()];
  } catch (e) {
    return [e, null];
  }
}
function Pa(n, e) {
  const t = { ...n };
  return Object.defineProperties(t, {
    $brand: {
      value: "auto-parseable-response-format",
      enumerable: !1
    },
    $parseRaw: {
      value: e,
      enumerable: !1
    }
  }), t;
}
const ja = Symbol("Let zodToJsonSchema decide on which parser to use"), Fr = {
  name: void 0,
  $refStrategy: "root",
  effectStrategy: "input",
  pipeStrategy: "all",
  dateStrategy: "format:date-time",
  mapStrategy: "entries",
  nullableStrategy: "from-target",
  removeAdditionalStrategy: "passthrough",
  definitionPath: "definitions",
  target: "jsonSchema7",
  strictUnions: !1,
  errorMessages: !1,
  markdownDescription: !1,
  patternStrategy: "escape",
  applyRegexFlags: !1,
  emailStrategy: "format:email",
  base64Strategy: "contentEncoding:base64",
  nameStrategy: "ref"
}, Za = (n) => typeof n == "string" ? {
  ...Fr,
  basePath: ["#"],
  definitions: {},
  name: n
} : {
  ...Fr,
  basePath: ["#"],
  definitions: {},
  ...n
}, er = (n) => "_def" in n ? n._def : n;
function Ma(n) {
  if (!n)
    return !0;
  for (const e in n)
    return !1;
  return !0;
}
const $a = (n) => {
  const e = Za(n), t = e.name !== void 0 ? [...e.basePath, e.definitionPath, e.name] : e.basePath;
  return {
    ...e,
    currentPath: t,
    propertyPath: void 0,
    seenRefs: /* @__PURE__ */ new Set(),
    seen: new Map(Object.entries(e.definitions).map(([r, s]) => [
      er(s),
      {
        def: er(s),
        path: [...e.basePath, e.definitionPath, r],
        // Resolution of references will be forced even though seen, so it's ok that the schema is undefined here for now.
        jsonSchema: void 0
      }
    ]))
  };
};
function Ps(n, e, t, r) {
  r != null && r.errorMessages && t && (n.errorMessage = {
    ...n.errorMessage,
    [e]: t
  });
}
function q(n, e, t, r, s) {
  n[e] = t, Ps(n, e, r, s);
}
var Dt;
(function(n) {
  n.assertEqual = (s) => {
  };
  function e(s) {
  }
  n.assertIs = e;
  function t(s) {
    throw new Error();
  }
  n.assertNever = t, n.arrayToEnum = (s) => {
    const a = {};
    for (const i of s)
      a[i] = i;
    return a;
  }, n.getValidEnumValues = (s) => {
    const a = n.objectKeys(s).filter((o) => typeof s[s[o]] != "number"), i = {};
    for (const o of a)
      i[o] = s[o];
    return n.objectValues(i);
  }, n.objectValues = (s) => n.objectKeys(s).map(function(a) {
    return s[a];
  }), n.objectKeys = typeof Object.keys == "function" ? (s) => Object.keys(s) : (s) => {
    const a = [];
    for (const i in s)
      Object.prototype.hasOwnProperty.call(s, i) && a.push(i);
    return a;
  }, n.find = (s, a) => {
    for (const i of s)
      if (a(i))
        return i;
  }, n.isInteger = typeof Number.isInteger == "function" ? (s) => Number.isInteger(s) : (s) => typeof s == "number" && Number.isFinite(s) && Math.floor(s) === s;
  function r(s, a = " | ") {
    return s.map((i) => typeof i == "string" ? `'${i}'` : i).join(a);
  }
  n.joinValues = r, n.jsonStringifyReplacer = (s, a) => typeof a == "bigint" ? a.toString() : a;
})(Dt || (Dt = {}));
var Ur;
(function(n) {
  n.mergeShapes = (e, t) => ({
    ...e,
    ...t
    // second overwrites first
  });
})(Ur || (Ur = {}));
Dt.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]);
Dt.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]);
let Jr = class js extends Error {
  get errors() {
    return this.issues;
  }
  constructor(e) {
    super(), this.issues = [], this.addIssue = (r) => {
      this.issues = [...this.issues, r];
    }, this.addIssues = (r = []) => {
      this.issues = [...this.issues, ...r];
    };
    const t = new.target.prototype;
    Object.setPrototypeOf ? Object.setPrototypeOf(this, t) : this.__proto__ = t, this.name = "ZodError", this.issues = e;
  }
  format(e) {
    const t = e || function(a) {
      return a.message;
    }, r = { _errors: [] }, s = (a) => {
      for (const i of a.issues)
        if (i.code === "invalid_union")
          i.unionErrors.map(s);
        else if (i.code === "invalid_return_type")
          s(i.returnTypeError);
        else if (i.code === "invalid_arguments")
          s(i.argumentsError);
        else if (i.path.length === 0)
          r._errors.push(t(i));
        else {
          let o = r, c = 0;
          for (; c < i.path.length; ) {
            const l = i.path[c];
            c === i.path.length - 1 ? (o[l] = o[l] || { _errors: [] }, o[l]._errors.push(t(i))) : o[l] = o[l] || { _errors: [] }, o = o[l], c++;
          }
        }
    };
    return s(this), r;
  }
  static assert(e) {
    if (!(e instanceof js))
      throw new Error(`Not a ZodError: ${e}`);
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, Dt.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(e = (t) => t.message) {
    const t = {}, r = [];
    for (const s of this.issues)
      s.path.length > 0 ? (t[s.path[0]] = t[s.path[0]] || [], t[s.path[0]].push(e(s))) : r.push(e(s));
    return { formErrors: r, fieldErrors: t };
  }
  get formErrors() {
    return this.flatten();
  }
};
Jr.create = (n) => new Jr(n);
var Br;
(function(n) {
  n.errToObj = (e) => typeof e == "string" ? { message: e } : e || {}, n.toString = (e) => typeof e == "string" ? e : e == null ? void 0 : e.message;
})(Br || (Br = {}));
var D;
(function(n) {
  n.ZodString = "ZodString", n.ZodNumber = "ZodNumber", n.ZodNaN = "ZodNaN", n.ZodBigInt = "ZodBigInt", n.ZodBoolean = "ZodBoolean", n.ZodDate = "ZodDate", n.ZodSymbol = "ZodSymbol", n.ZodUndefined = "ZodUndefined", n.ZodNull = "ZodNull", n.ZodAny = "ZodAny", n.ZodUnknown = "ZodUnknown", n.ZodNever = "ZodNever", n.ZodVoid = "ZodVoid", n.ZodArray = "ZodArray", n.ZodObject = "ZodObject", n.ZodUnion = "ZodUnion", n.ZodDiscriminatedUnion = "ZodDiscriminatedUnion", n.ZodIntersection = "ZodIntersection", n.ZodTuple = "ZodTuple", n.ZodRecord = "ZodRecord", n.ZodMap = "ZodMap", n.ZodSet = "ZodSet", n.ZodFunction = "ZodFunction", n.ZodLazy = "ZodLazy", n.ZodLiteral = "ZodLiteral", n.ZodEnum = "ZodEnum", n.ZodEffects = "ZodEffects", n.ZodNativeEnum = "ZodNativeEnum", n.ZodOptional = "ZodOptional", n.ZodNullable = "ZodNullable", n.ZodDefault = "ZodDefault", n.ZodCatch = "ZodCatch", n.ZodPromise = "ZodPromise", n.ZodBranded = "ZodBranded", n.ZodPipeline = "ZodPipeline", n.ZodReadonly = "ZodReadonly";
})(D || (D = {}));
function La() {
  return {};
}
function Fa(n, e) {
  var r, s;
  const t = {
    type: "array"
  };
  return ((s = (r = n.type) == null ? void 0 : r._def) == null ? void 0 : s.typeName) !== D.ZodAny && (t.items = J(n.type._def, {
    ...e,
    currentPath: [...e.currentPath, "items"]
  })), n.minLength && q(t, "minItems", n.minLength.value, n.minLength.message, e), n.maxLength && q(t, "maxItems", n.maxLength.value, n.maxLength.message, e), n.exactLength && (q(t, "minItems", n.exactLength.value, n.exactLength.message, e), q(t, "maxItems", n.exactLength.value, n.exactLength.message, e)), t;
}
function Ua(n, e) {
  const t = {
    type: "integer",
    format: "int64"
  };
  if (!n.checks)
    return t;
  for (const r of n.checks)
    switch (r.kind) {
      case "min":
        e.target === "jsonSchema7" ? r.inclusive ? q(t, "minimum", r.value, r.message, e) : q(t, "exclusiveMinimum", r.value, r.message, e) : (r.inclusive || (t.exclusiveMinimum = !0), q(t, "minimum", r.value, r.message, e));
        break;
      case "max":
        e.target === "jsonSchema7" ? r.inclusive ? q(t, "maximum", r.value, r.message, e) : q(t, "exclusiveMaximum", r.value, r.message, e) : (r.inclusive || (t.exclusiveMaximum = !0), q(t, "maximum", r.value, r.message, e));
        break;
      case "multipleOf":
        q(t, "multipleOf", r.value, r.message, e);
        break;
    }
  return t;
}
function Ja() {
  return {
    type: "boolean"
  };
}
function Ba(n, e) {
  return J(n.type._def, e);
}
const qa = (n, e) => J(n.innerType._def, e);
function Zs(n, e, t) {
  const r = t ?? e.dateStrategy;
  if (Array.isArray(r))
    return {
      anyOf: r.map((s, a) => Zs(n, e, s))
    };
  switch (r) {
    case "string":
    case "format:date-time":
      return {
        type: "string",
        format: "date-time"
      };
    case "format:date":
      return {
        type: "string",
        format: "date"
      };
    case "integer":
      return Ga(n, e);
  }
}
const Ga = (n, e) => {
  const t = {
    type: "integer",
    format: "unix-time"
  };
  if (e.target === "openApi3")
    return t;
  for (const r of n.checks)
    switch (r.kind) {
      case "min":
        q(
          t,
          "minimum",
          r.value,
          // This is in milliseconds
          r.message,
          e
        );
        break;
      case "max":
        q(
          t,
          "maximum",
          r.value,
          // This is in milliseconds
          r.message,
          e
        );
        break;
    }
  return t;
};
function Va(n, e) {
  return {
    ...J(n.innerType._def, e),
    default: n.defaultValue()
  };
}
function za(n, e, t) {
  return e.effectStrategy === "input" ? J(n.schema._def, e, t) : {};
}
function Ha(n) {
  return {
    type: "string",
    enum: [...n.values]
  };
}
const Wa = (n) => "type" in n && n.type === "string" ? !1 : "allOf" in n;
function Ya(n, e) {
  const t = [
    J(n.left._def, {
      ...e,
      currentPath: [...e.currentPath, "allOf", "0"]
    }),
    J(n.right._def, {
      ...e,
      currentPath: [...e.currentPath, "allOf", "1"]
    })
  ].filter((a) => !!a);
  let r = e.target === "jsonSchema2019-09" ? { unevaluatedProperties: !1 } : void 0;
  const s = [];
  return t.forEach((a) => {
    if (Wa(a))
      s.push(...a.allOf), a.unevaluatedProperties === void 0 && (r = void 0);
    else {
      let i = a;
      if ("additionalProperties" in a && a.additionalProperties === !1) {
        const { additionalProperties: o, ...c } = a;
        i = c;
      } else
        r = void 0;
      s.push(i);
    }
  }), s.length ? {
    allOf: s,
    ...r
  } : void 0;
}
function Xa(n, e) {
  const t = typeof n.value;
  return t !== "bigint" && t !== "number" && t !== "boolean" && t !== "string" ? {
    type: Array.isArray(n.value) ? "array" : "object"
  } : e.target === "openApi3" ? {
    type: t === "bigint" ? "integer" : t,
    enum: [n.value]
  } : {
    type: t === "bigint" ? "integer" : t,
    const: n.value
  };
}
let Bn;
const Be = {
  /**
   * `c` was changed to `[cC]` to replicate /i flag
   */
  cuid: /^[cC][^\s-]{8,}$/,
  cuid2: /^[0-9a-z]+$/,
  ulid: /^[0-9A-HJKMNP-TV-Z]{26}$/,
  /**
   * `a-z` was added to replicate /i flag
   */
  email: /^(?!\.)(?!.*\.\.)([a-zA-Z0-9_'+\-\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+[a-zA-Z]{2,}$/,
  /**
   * Constructed a valid Unicode RegExp
   *
   * Lazily instantiate since this type of regex isn't supported
   * in all envs (e.g. React Native).
   *
   * See:
   * https://github.com/colinhacks/zod/issues/2433
   * Fix in Zod:
   * https://github.com/colinhacks/zod/commit/9340fd51e48576a75adc919bff65dbc4a5d4c99b
   */
  emoji: () => (Bn === void 0 && (Bn = RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$", "u")), Bn),
  base64: /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,
  nanoid: /^[a-zA-Z0-9_-]{21}$/
};
function Ms(n, e) {
  const t = {
    type: "string"
  };
  function r(s) {
    return e.patternStrategy === "escape" ? Qa(s) : s;
  }
  if (n.checks)
    for (const s of n.checks)
      switch (s.kind) {
        case "min":
          q(t, "minLength", typeof t.minLength == "number" ? Math.max(t.minLength, s.value) : s.value, s.message, e);
          break;
        case "max":
          q(t, "maxLength", typeof t.maxLength == "number" ? Math.min(t.maxLength, s.value) : s.value, s.message, e);
          break;
        case "email":
          switch (e.emailStrategy) {
            case "format:email":
              me(t, "email", s.message, e);
              break;
            case "format:idn-email":
              me(t, "idn-email", s.message, e);
              break;
            case "pattern:zod":
              ge(t, Be.email, s.message, e);
              break;
          }
          break;
        case "url":
          me(t, "uri", s.message, e);
          break;
        case "uuid":
          me(t, "uuid", s.message, e);
          break;
        case "regex":
          ge(t, s.regex, s.message, e);
          break;
        case "cuid":
          ge(t, Be.cuid, s.message, e);
          break;
        case "cuid2":
          ge(t, Be.cuid2, s.message, e);
          break;
        case "startsWith":
          ge(t, RegExp(`^${r(s.value)}`), s.message, e);
          break;
        case "endsWith":
          ge(t, RegExp(`${r(s.value)}$`), s.message, e);
          break;
        case "datetime":
          me(t, "date-time", s.message, e);
          break;
        case "date":
          me(t, "date", s.message, e);
          break;
        case "time":
          me(t, "time", s.message, e);
          break;
        case "duration":
          me(t, "duration", s.message, e);
          break;
        case "length":
          q(t, "minLength", typeof t.minLength == "number" ? Math.max(t.minLength, s.value) : s.value, s.message, e), q(t, "maxLength", typeof t.maxLength == "number" ? Math.min(t.maxLength, s.value) : s.value, s.message, e);
          break;
        case "includes": {
          ge(t, RegExp(r(s.value)), s.message, e);
          break;
        }
        case "ip": {
          s.version !== "v6" && me(t, "ipv4", s.message, e), s.version !== "v4" && me(t, "ipv6", s.message, e);
          break;
        }
        case "emoji":
          ge(t, Be.emoji, s.message, e);
          break;
        case "ulid": {
          ge(t, Be.ulid, s.message, e);
          break;
        }
        case "base64": {
          switch (e.base64Strategy) {
            case "format:binary": {
              me(t, "binary", s.message, e);
              break;
            }
            case "contentEncoding:base64": {
              q(t, "contentEncoding", "base64", s.message, e);
              break;
            }
            case "pattern:zod": {
              ge(t, Be.base64, s.message, e);
              break;
            }
          }
          break;
        }
        case "nanoid":
          ge(t, Be.nanoid, s.message, e);
      }
  return t;
}
const Qa = (n) => Array.from(n).map((e) => /[a-zA-Z0-9]/.test(e) ? e : `\\${e}`).join(""), me = (n, e, t, r) => {
  var s;
  n.format || (s = n.anyOf) != null && s.some((a) => a.format) ? (n.anyOf || (n.anyOf = []), n.format && (n.anyOf.push({
    format: n.format,
    ...n.errorMessage && r.errorMessages && {
      errorMessage: { format: n.errorMessage.format }
    }
  }), delete n.format, n.errorMessage && (delete n.errorMessage.format, Object.keys(n.errorMessage).length === 0 && delete n.errorMessage)), n.anyOf.push({
    format: e,
    ...t && r.errorMessages && { errorMessage: { format: t } }
  })) : q(n, "format", e, t, r);
}, ge = (n, e, t, r) => {
  var s;
  n.pattern || (s = n.allOf) != null && s.some((a) => a.pattern) ? (n.allOf || (n.allOf = []), n.pattern && (n.allOf.push({
    pattern: n.pattern,
    ...n.errorMessage && r.errorMessages && {
      errorMessage: { pattern: n.errorMessage.pattern }
    }
  }), delete n.pattern, n.errorMessage && (delete n.errorMessage.pattern, Object.keys(n.errorMessage).length === 0 && delete n.errorMessage)), n.allOf.push({
    pattern: qr(e, r),
    ...t && r.errorMessages && { errorMessage: { pattern: t } }
  })) : q(n, "pattern", qr(e, r), t, r);
}, qr = (n, e) => {
  var l;
  const t = typeof n == "function" ? n() : n;
  if (!e.applyRegexFlags || !t.flags)
    return t.source;
  const r = {
    i: t.flags.includes("i"),
    // Case-insensitive
    m: t.flags.includes("m"),
    // `^` and `$` matches adjacent to newline characters
    s: t.flags.includes("s")
    // `.` matches newlines
  }, s = r.i ? t.source.toLowerCase() : t.source;
  let a = "", i = !1, o = !1, c = !1;
  for (let p = 0; p < s.length; p++) {
    if (i) {
      a += s[p], i = !1;
      continue;
    }
    if (r.i) {
      if (o) {
        if (s[p].match(/[a-z]/)) {
          c ? (a += s[p], a += `${s[p - 2]}-${s[p]}`.toUpperCase(), c = !1) : s[p + 1] === "-" && ((l = s[p + 2]) != null && l.match(/[a-z]/)) ? (a += s[p], c = !0) : a += `${s[p]}${s[p].toUpperCase()}`;
          continue;
        }
      } else if (s[p].match(/[a-z]/)) {
        a += `[${s[p]}${s[p].toUpperCase()}]`;
        continue;
      }
    }
    if (r.m) {
      if (s[p] === "^") {
        a += `(^|(?<=[\r
]))`;
        continue;
      } else if (s[p] === "$") {
        a += `($|(?=[\r
]))`;
        continue;
      }
    }
    if (r.s && s[p] === ".") {
      a += o ? `${s[p]}\r
` : `[${s[p]}\r
]`;
      continue;
    }
    a += s[p], s[p] === "\\" ? i = !0 : o && s[p] === "]" ? o = !1 : !o && s[p] === "[" && (o = !0);
  }
  try {
    const p = new RegExp(a);
  } catch {
    return console.warn(`Could not convert regex pattern at ${e.currentPath.join("/")} to a flag-independent form! Falling back to the flag-ignorant source`), t.source;
  }
  return a;
};
function $s(n, e) {
  var r, s, a, i;
  if (e.target === "openApi3" && ((r = n.keyType) == null ? void 0 : r._def.typeName) === D.ZodEnum)
    return {
      type: "object",
      required: n.keyType._def.values,
      properties: n.keyType._def.values.reduce((o, c) => ({
        ...o,
        [c]: J(n.valueType._def, {
          ...e,
          currentPath: [...e.currentPath, "properties", c]
        }) ?? {}
      }), {}),
      additionalProperties: !1
    };
  const t = {
    type: "object",
    additionalProperties: J(n.valueType._def, {
      ...e,
      currentPath: [...e.currentPath, "additionalProperties"]
    }) ?? {}
  };
  if (e.target === "openApi3")
    return t;
  if (((s = n.keyType) == null ? void 0 : s._def.typeName) === D.ZodString && ((a = n.keyType._def.checks) != null && a.length)) {
    const o = Object.entries(Ms(n.keyType._def, e)).reduce((c, [l, p]) => l === "type" ? c : { ...c, [l]: p }, {});
    return {
      ...t,
      propertyNames: o
    };
  } else if (((i = n.keyType) == null ? void 0 : i._def.typeName) === D.ZodEnum)
    return {
      ...t,
      propertyNames: {
        enum: n.keyType._def.values
      }
    };
  return t;
}
function Ka(n, e) {
  if (e.mapStrategy === "record")
    return $s(n, e);
  const t = J(n.keyType._def, {
    ...e,
    currentPath: [...e.currentPath, "items", "items", "0"]
  }) || {}, r = J(n.valueType._def, {
    ...e,
    currentPath: [...e.currentPath, "items", "items", "1"]
  }) || {};
  return {
    type: "array",
    maxItems: 125,
    items: {
      type: "array",
      items: [t, r],
      minItems: 2,
      maxItems: 2
    }
  };
}
function ei(n) {
  const e = n.values, r = Object.keys(n.values).filter((a) => typeof e[e[a]] != "number").map((a) => e[a]), s = Array.from(new Set(r.map((a) => typeof a)));
  return {
    type: s.length === 1 ? s[0] === "string" ? "string" : "number" : ["string", "number"],
    enum: r
  };
}
function ti() {
  return {
    not: {}
  };
}
function ni(n) {
  return n.target === "openApi3" ? {
    enum: ["null"],
    nullable: !0
  } : {
    type: "null"
  };
}
const _n = {
  ZodString: "string",
  ZodNumber: "number",
  ZodBigInt: "integer",
  ZodBoolean: "boolean",
  ZodNull: "null"
};
function ri(n, e) {
  if (e.target === "openApi3")
    return Gr(n, e);
  const t = n.options instanceof Map ? Array.from(n.options.values()) : n.options;
  if (t.every((r) => r._def.typeName in _n && (!r._def.checks || !r._def.checks.length))) {
    const r = t.reduce((s, a) => {
      const i = _n[a._def.typeName];
      return i && !s.includes(i) ? [...s, i] : s;
    }, []);
    return {
      type: r.length > 1 ? r : r[0]
    };
  } else if (t.every((r) => r._def.typeName === "ZodLiteral" && !r.description)) {
    const r = t.reduce((s, a) => {
      const i = typeof a._def.value;
      switch (i) {
        case "string":
        case "number":
        case "boolean":
          return [...s, i];
        case "bigint":
          return [...s, "integer"];
        case "object":
          if (a._def.value === null)
            return [...s, "null"];
        case "symbol":
        case "undefined":
        case "function":
        default:
          return s;
      }
    }, []);
    if (r.length === t.length) {
      const s = r.filter((a, i, o) => o.indexOf(a) === i);
      return {
        type: s.length > 1 ? s : s[0],
        enum: t.reduce((a, i) => a.includes(i._def.value) ? a : [...a, i._def.value], [])
      };
    }
  } else if (t.every((r) => r._def.typeName === "ZodEnum"))
    return {
      type: "string",
      enum: t.reduce((r, s) => [...r, ...s._def.values.filter((a) => !r.includes(a))], [])
    };
  return Gr(n, e);
}
const Gr = (n, e) => {
  const t = (n.options instanceof Map ? Array.from(n.options.values()) : n.options).map((r, s) => J(r._def, {
    ...e,
    currentPath: [...e.currentPath, "anyOf", `${s}`]
  })).filter((r) => !!r && (!e.strictUnions || typeof r == "object" && Object.keys(r).length > 0));
  return t.length ? { anyOf: t } : void 0;
};
function si(n, e) {
  if (["ZodString", "ZodNumber", "ZodBigInt", "ZodBoolean", "ZodNull"].includes(n.innerType._def.typeName) && (!n.innerType._def.checks || !n.innerType._def.checks.length))
    return e.target === "openApi3" || e.nullableStrategy === "property" ? {
      type: _n[n.innerType._def.typeName],
      nullable: !0
    } : {
      type: [_n[n.innerType._def.typeName], "null"]
    };
  if (e.target === "openApi3") {
    const r = J(n.innerType._def, {
      ...e,
      currentPath: [...e.currentPath]
    });
    return r && "$ref" in r ? { allOf: [r], nullable: !0 } : r && { ...r, nullable: !0 };
  }
  const t = J(n.innerType._def, {
    ...e,
    currentPath: [...e.currentPath, "anyOf", "0"]
  });
  return t && { anyOf: [t, { type: "null" }] };
}
function ai(n, e) {
  const t = {
    type: "number"
  };
  if (!n.checks)
    return t;
  for (const r of n.checks)
    switch (r.kind) {
      case "int":
        t.type = "integer", Ps(t, "type", r.message, e);
        break;
      case "min":
        e.target === "jsonSchema7" ? r.inclusive ? q(t, "minimum", r.value, r.message, e) : q(t, "exclusiveMinimum", r.value, r.message, e) : (r.inclusive || (t.exclusiveMinimum = !0), q(t, "minimum", r.value, r.message, e));
        break;
      case "max":
        e.target === "jsonSchema7" ? r.inclusive ? q(t, "maximum", r.value, r.message, e) : q(t, "exclusiveMaximum", r.value, r.message, e) : (r.inclusive || (t.exclusiveMaximum = !0), q(t, "maximum", r.value, r.message, e));
        break;
      case "multipleOf":
        q(t, "multipleOf", r.value, r.message, e);
        break;
    }
  return t;
}
function ii(n, e) {
  return e.removeAdditionalStrategy === "strict" ? n.catchall._def.typeName === "ZodNever" ? n.unknownKeys !== "strict" : J(n.catchall._def, {
    ...e,
    currentPath: [...e.currentPath, "additionalProperties"]
  }) ?? !0 : n.catchall._def.typeName === "ZodNever" ? n.unknownKeys === "passthrough" : J(n.catchall._def, {
    ...e,
    currentPath: [...e.currentPath, "additionalProperties"]
  }) ?? !0;
}
function oi(n, e) {
  const t = {
    type: "object",
    ...Object.entries(n.shape()).reduce((r, [s, a]) => {
      var c;
      if (a === void 0 || a._def === void 0)
        return r;
      const i = [...e.currentPath, "properties", s], o = J(a._def, {
        ...e,
        currentPath: i,
        propertyPath: i
      });
      if (o === void 0)
        return r;
      if (e.openaiStrictMode && a.isOptional() && !a.isNullable() && typeof ((c = a._def) == null ? void 0 : c.defaultValue) > "u")
        throw new Error(`Zod field at \`${i.join("/")}\` uses \`.optional()\` without \`.nullable()\` which is not supported by the API. See: https://platform.openai.com/docs/guides/structured-outputs?api-mode=responses#all-fields-must-be-required`);
      return {
        properties: {
          ...r.properties,
          [s]: o
        },
        required: a.isOptional() && !e.openaiStrictMode ? r.required : [...r.required, s]
      };
    }, { properties: {}, required: [] }),
    additionalProperties: ii(n, e)
  };
  return t.required.length || delete t.required, t;
}
const ui = (n, e) => {
  var r;
  if (e.currentPath.toString() === ((r = e.propertyPath) == null ? void 0 : r.toString()))
    return J(n.innerType._def, e);
  const t = J(n.innerType._def, {
    ...e,
    currentPath: [...e.currentPath, "anyOf", "1"]
  });
  return t ? {
    anyOf: [
      {
        not: {}
      },
      t
    ]
  } : {};
}, ci = (n, e) => {
  if (e.pipeStrategy === "input")
    return J(n.in._def, e);
  if (e.pipeStrategy === "output")
    return J(n.out._def, e);
  const t = J(n.in._def, {
    ...e,
    currentPath: [...e.currentPath, "allOf", "0"]
  }), r = J(n.out._def, {
    ...e,
    currentPath: [...e.currentPath, "allOf", t ? "1" : "0"]
  });
  return {
    allOf: [t, r].filter((s) => s !== void 0)
  };
};
function di(n, e) {
  return J(n.type._def, e);
}
function li(n, e) {
  const r = {
    type: "array",
    uniqueItems: !0,
    items: J(n.valueType._def, {
      ...e,
      currentPath: [...e.currentPath, "items"]
    })
  };
  return n.minSize && q(r, "minItems", n.minSize.value, n.minSize.message, e), n.maxSize && q(r, "maxItems", n.maxSize.value, n.maxSize.message, e), r;
}
function pi(n, e) {
  return n.rest ? {
    type: "array",
    minItems: n.items.length,
    items: n.items.map((t, r) => J(t._def, {
      ...e,
      currentPath: [...e.currentPath, "items", `${r}`]
    })).reduce((t, r) => r === void 0 ? t : [...t, r], []),
    additionalItems: J(n.rest._def, {
      ...e,
      currentPath: [...e.currentPath, "additionalItems"]
    })
  } : {
    type: "array",
    minItems: n.items.length,
    maxItems: n.items.length,
    items: n.items.map((t, r) => J(t._def, {
      ...e,
      currentPath: [...e.currentPath, "items", `${r}`]
    })).reduce((t, r) => r === void 0 ? t : [...t, r], [])
  };
}
function fi() {
  return {
    not: {}
  };
}
function hi() {
  return {};
}
const mi = (n, e) => J(n.innerType._def, e);
function J(n, e, t = !1) {
  var i;
  const r = e.seen.get(n);
  if (e.override) {
    const o = (i = e.override) == null ? void 0 : i.call(e, n, e, r, t);
    if (o !== ja)
      return o;
  }
  if (r && !t) {
    const o = gi(r, e);
    if (o !== void 0)
      return "$ref" in o && e.seenRefs.add(o.$ref), o;
  }
  const s = { def: n, path: e.currentPath, jsonSchema: void 0 };
  e.seen.set(n, s);
  const a = yi(n, n.typeName, e, t);
  return a && vi(n, e, a), s.jsonSchema = a, a;
}
const gi = (n, e) => {
  switch (e.$refStrategy) {
    case "root":
      return { $ref: n.path.join("/") };
    // this case is needed as OpenAI strict mode doesn't support top-level `$ref`s, i.e.
    // the top-level schema *must* be `{"type": "object", "properties": {...}}` but if we ever
    // need to define a `$ref`, relative `$ref`s aren't supported, so we need to extract
    // the schema to `#/definitions/` and reference that.
    //
    // e.g. if we need to reference a schema at
    // `["#","definitions","contactPerson","properties","person1","properties","name"]`
    // then we'll extract it out to `contactPerson_properties_person1_properties_name`
    case "extract-to-root":
      const t = n.path.slice(e.basePath.length + 1).join("_");
      return t !== e.name && e.nameStrategy === "duplicate-ref" && (e.definitions[t] = n.def), { $ref: [...e.basePath, e.definitionPath, t].join("/") };
    case "relative":
      return { $ref: _i(e.currentPath, n.path) };
    case "none":
    case "seen":
      return n.path.length < e.currentPath.length && n.path.every((r, s) => e.currentPath[s] === r) ? (console.warn(`Recursive reference detected at ${e.currentPath.join("/")}! Defaulting to any`), {}) : e.$refStrategy === "seen" ? {} : void 0;
  }
}, _i = (n, e) => {
  let t = 0;
  for (; t < n.length && t < e.length && n[t] === e[t]; t++)
    ;
  return [(n.length - t).toString(), ...e.slice(t)].join("/");
}, yi = (n, e, t, r) => {
  switch (e) {
    case D.ZodString:
      return Ms(n, t);
    case D.ZodNumber:
      return ai(n, t);
    case D.ZodObject:
      return oi(n, t);
    case D.ZodBigInt:
      return Ua(n, t);
    case D.ZodBoolean:
      return Ja();
    case D.ZodDate:
      return Zs(n, t);
    case D.ZodUndefined:
      return fi();
    case D.ZodNull:
      return ni(t);
    case D.ZodArray:
      return Fa(n, t);
    case D.ZodUnion:
    case D.ZodDiscriminatedUnion:
      return ri(n, t);
    case D.ZodIntersection:
      return Ya(n, t);
    case D.ZodTuple:
      return pi(n, t);
    case D.ZodRecord:
      return $s(n, t);
    case D.ZodLiteral:
      return Xa(n, t);
    case D.ZodEnum:
      return Ha(n);
    case D.ZodNativeEnum:
      return ei(n);
    case D.ZodNullable:
      return si(n, t);
    case D.ZodOptional:
      return ui(n, t);
    case D.ZodMap:
      return Ka(n, t);
    case D.ZodSet:
      return li(n, t);
    case D.ZodLazy:
      return J(n.getter()._def, t);
    case D.ZodPromise:
      return di(n, t);
    case D.ZodNaN:
    case D.ZodNever:
      return ti();
    case D.ZodEffects:
      return za(n, t, r);
    case D.ZodAny:
      return La();
    case D.ZodUnknown:
      return hi();
    case D.ZodDefault:
      return Va(n, t);
    case D.ZodBranded:
      return Ba(n, t);
    case D.ZodReadonly:
      return mi(n, t);
    case D.ZodCatch:
      return qa(n, t);
    case D.ZodPipeline:
      return ci(n, t);
    case D.ZodFunction:
    case D.ZodVoid:
    case D.ZodSymbol:
      return;
    default:
      return /* @__PURE__ */ ((s) => {
      })();
  }
}, vi = (n, e, t) => (n.description && (t.description = n.description, e.markdownDescription && (t.markdownDescription = n.description)), t), wi = (n, e) => {
  const t = $a(e), r = typeof e == "string" ? e : (e == null ? void 0 : e.nameStrategy) === "title" || e == null ? void 0 : e.name, s = J(n._def, r === void 0 ? t : {
    ...t,
    currentPath: [...t.basePath, t.definitionPath, r]
  }, !1) ?? {}, a = typeof e == "object" && e.name !== void 0 && e.nameStrategy === "title" ? e.name : void 0;
  a !== void 0 && (s.title = a);
  const i = (() => {
    if (Ma(t.definitions))
      return;
    const c = {}, l = /* @__PURE__ */ new Set();
    for (let p = 0; p < 500; p++) {
      const f = Object.entries(t.definitions).filter(([h]) => !l.has(h));
      if (f.length === 0)
        break;
      for (const [h, S] of f)
        c[h] = J(er(S), { ...t, currentPath: [...t.basePath, t.definitionPath, h] }, !0) ?? {}, l.add(h);
    }
    return c;
  })(), o = r === void 0 ? i ? {
    ...s,
    [t.definitionPath]: i
  } : s : t.nameStrategy === "duplicate-ref" ? {
    ...s,
    ...i || t.seenRefs.size ? {
      [t.definitionPath]: {
        ...i,
        // only actually duplicate the schema definition if it was ever referenced
        // otherwise the duplication is completely pointless
        ...t.seenRefs.size ? { [r]: s } : void 0
      }
    } : void 0
  } : {
    $ref: [...t.$refStrategy === "relative" ? [] : t.basePath, t.definitionPath, r].join("/"),
    [t.definitionPath]: {
      ...i,
      [r]: s
    }
  };
  return t.target === "jsonSchema7" ? o.$schema = "http://json-schema.org/draft-07/schema#" : t.target === "jsonSchema2019-09" && (o.$schema = "https://json-schema.org/draft/2019-09/schema#"), o;
};
function xi(n, { parser: e, callback: t }) {
  const r = { ...n };
  return Object.defineProperties(r, {
    $brand: {
      value: "auto-parseable-tool",
      enumerable: !1
    },
    $parseRaw: {
      value: e,
      enumerable: !1
    },
    $callback: {
      value: t,
      enumerable: !1
    }
  }), r;
}
function Ls(n, e) {
  return wi(n, {
    openaiStrictMode: !0,
    name: e.name,
    nameStrategy: "duplicate-ref",
    $refStrategy: "extract-to-root",
    nullableStrategy: "property"
  });
}
function bi(n, e, t) {
  return Pa({
    type: "json_schema",
    ...t,
    name: e,
    strict: !0,
    schema: Ls(n, { name: e })
  }, (r) => n.parse(JSON.parse(r)));
}
function Si(n) {
  return xi({
    type: "function",
    name: n.name,
    parameters: Ls(n.parameters, { name: n.name }),
    strict: !0
  }, {
    callback: n.function,
    parser: (e) => n.parameters.parse(JSON.parse(e))
  });
}
class Je extends Error {
  constructor(t, r) {
    super(t);
    _(this, "state");
    this.state = r;
  }
}
class Ti extends Je {
}
class Vr extends Je {
}
class fe extends Je {
}
class Q extends Je {
}
class zr extends Je {
  constructor(t, r, s) {
    super(t, s);
    _(this, "error");
    this.error = r;
  }
}
class ki extends Je {
  constructor(t, r, s) {
    super(t, s);
    _(this, "error");
    this.error = r;
  }
}
class Hr extends Je {
  constructor(t, r, s) {
    super(t, s);
    _(this, "result");
    this.result = r;
  }
}
class tr extends Je {
  constructor(t, r, s) {
    super(t, s);
    _(this, "result");
    this.result = r;
  }
}
function et(n) {
  return typeof n == "object" && n !== null && "_def" in n && typeof n._def == "object" && n._def !== null && "typeName" in n._def && n._def.typeName === "ZodObject";
}
function Ii(n) {
  return typeof n == "object" && n !== null && "input" in n && typeof n.input == "string";
}
function yn(n) {
  if (n = n.replace(/\s/g, "_"), n = n.replace(/[^a-zA-Z0-9]/g, "_"), n.length === 0)
    throw new Error("Tool name cannot be empty");
  return n;
}
function xr(n, e) {
  const t = (r) => JSON.parse(r);
  if (et(n)) {
    const r = Si({
      name: e,
      parameters: n,
      function: () => {
      }
    });
    return {
      schema: r.parameters,
      parser: r.$parseRaw
    };
  } else if (typeof n == "object" && n !== null)
    return {
      schema: n,
      parser: t
    };
  throw new Q("Input type is not a ZodObject or a valid JSON schema");
}
function Wr(n) {
  if (n === "text")
    return "text";
  if (et(n)) {
    const e = bi(n, "output");
    return {
      type: e.type,
      name: e.name,
      strict: e.strict || !1,
      schema: e.schema
    };
  }
  return n;
}
function Ai(n) {
  return n && n.__esModule && Object.prototype.hasOwnProperty.call(n, "default") ? n.default : n;
}
var dn = { exports: {} }, qn, Yr;
function Ci() {
  if (Yr) return qn;
  Yr = 1;
  var n = 1e3, e = n * 60, t = e * 60, r = t * 24, s = r * 7, a = r * 365.25;
  qn = function(p, f) {
    f = f || {};
    var h = typeof p;
    if (h === "string" && p.length > 0)
      return i(p);
    if (h === "number" && isFinite(p))
      return f.long ? c(p) : o(p);
    throw new Error(
      "val is not a non-empty string or a valid number. val=" + JSON.stringify(p)
    );
  };
  function i(p) {
    if (p = String(p), !(p.length > 100)) {
      var f = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        p
      );
      if (f) {
        var h = parseFloat(f[1]), S = (f[2] || "ms").toLowerCase();
        switch (S) {
          case "years":
          case "year":
          case "yrs":
          case "yr":
          case "y":
            return h * a;
          case "weeks":
          case "week":
          case "w":
            return h * s;
          case "days":
          case "day":
          case "d":
            return h * r;
          case "hours":
          case "hour":
          case "hrs":
          case "hr":
          case "h":
            return h * t;
          case "minutes":
          case "minute":
          case "mins":
          case "min":
          case "m":
            return h * e;
          case "seconds":
          case "second":
          case "secs":
          case "sec":
          case "s":
            return h * n;
          case "milliseconds":
          case "millisecond":
          case "msecs":
          case "msec":
          case "ms":
            return h;
          default:
            return;
        }
      }
    }
  }
  function o(p) {
    var f = Math.abs(p);
    return f >= r ? Math.round(p / r) + "d" : f >= t ? Math.round(p / t) + "h" : f >= e ? Math.round(p / e) + "m" : f >= n ? Math.round(p / n) + "s" : p + "ms";
  }
  function c(p) {
    var f = Math.abs(p);
    return f >= r ? l(p, f, r, "day") : f >= t ? l(p, f, t, "hour") : f >= e ? l(p, f, e, "minute") : f >= n ? l(p, f, n, "second") : p + " ms";
  }
  function l(p, f, h, S) {
    var x = f >= h * 1.5;
    return Math.round(p / h) + " " + S + (x ? "s" : "");
  }
  return qn;
}
var Gn, Xr;
function Ei() {
  if (Xr) return Gn;
  Xr = 1;
  function n(e) {
    r.debug = r, r.default = r, r.coerce = l, r.disable = o, r.enable = a, r.enabled = c, r.humanize = Ci(), r.destroy = p, Object.keys(e).forEach((f) => {
      r[f] = e[f];
    }), r.names = [], r.skips = [], r.formatters = {};
    function t(f) {
      let h = 0;
      for (let S = 0; S < f.length; S++)
        h = (h << 5) - h + f.charCodeAt(S), h |= 0;
      return r.colors[Math.abs(h) % r.colors.length];
    }
    r.selectColor = t;
    function r(f) {
      let h, S = null, x, w;
      function E(...R) {
        if (!E.enabled)
          return;
        const V = E, Y = Number(/* @__PURE__ */ new Date()), oe = Y - (h || Y);
        V.diff = oe, V.prev = h, V.curr = Y, h = Y, R[0] = r.coerce(R[0]), typeof R[0] != "string" && R.unshift("%O");
        let ue = 0;
        R[0] = R[0].replace(/%([a-zA-Z%])/g, (Un, ka) => {
          if (Un === "%%")
            return "%";
          ue++;
          const Mr = r.formatters[ka];
          if (typeof Mr == "function") {
            const Ia = R[ue];
            Un = Mr.call(V, Ia), R.splice(ue, 1), ue--;
          }
          return Un;
        }), r.formatArgs.call(V, R), (V.log || r.log).apply(V, R);
      }
      return E.namespace = f, E.useColors = r.useColors(), E.color = r.selectColor(f), E.extend = s, E.destroy = r.destroy, Object.defineProperty(E, "enabled", {
        enumerable: !0,
        configurable: !1,
        get: () => S !== null ? S : (x !== r.namespaces && (x = r.namespaces, w = r.enabled(f)), w),
        set: (R) => {
          S = R;
        }
      }), typeof r.init == "function" && r.init(E), E;
    }
    function s(f, h) {
      const S = r(this.namespace + (typeof h > "u" ? ":" : h) + f);
      return S.log = this.log, S;
    }
    function a(f) {
      r.save(f), r.namespaces = f, r.names = [], r.skips = [];
      const h = (typeof f == "string" ? f : "").trim().replace(/\s+/g, ",").split(",").filter(Boolean);
      for (const S of h)
        S[0] === "-" ? r.skips.push(S.slice(1)) : r.names.push(S);
    }
    function i(f, h) {
      let S = 0, x = 0, w = -1, E = 0;
      for (; S < f.length; )
        if (x < h.length && (h[x] === f[S] || h[x] === "*"))
          h[x] === "*" ? (w = x, E = S, x++) : (S++, x++);
        else if (w !== -1)
          x = w + 1, E++, S = E;
        else
          return !1;
      for (; x < h.length && h[x] === "*"; )
        x++;
      return x === h.length;
    }
    function o() {
      const f = [
        ...r.names,
        ...r.skips.map((h) => "-" + h)
      ].join(",");
      return r.enable(""), f;
    }
    function c(f) {
      for (const h of r.skips)
        if (i(f, h))
          return !1;
      for (const h of r.names)
        if (i(f, h))
          return !0;
      return !1;
    }
    function l(f) {
      return f instanceof Error ? f.stack || f.message : f;
    }
    function p() {
      console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }
    return r.enable(r.load()), r;
  }
  return Gn = n, Gn;
}
var Qr;
function Oi() {
  return Qr || (Qr = 1, function(n, e) {
    e.formatArgs = r, e.save = s, e.load = a, e.useColors = t, e.storage = i(), e.destroy = /* @__PURE__ */ (() => {
      let c = !1;
      return () => {
        c || (c = !0, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
      };
    })(), e.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function t() {
      if (typeof window < "u" && window.process && (window.process.type === "renderer" || window.process.__nwjs))
        return !0;
      if (typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))
        return !1;
      let c;
      return typeof document < "u" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window < "u" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator < "u" && navigator.userAgent && (c = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(c[1], 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function r(c) {
      if (c[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + c[0] + (this.useColors ? "%c " : " ") + "+" + n.exports.humanize(this.diff), !this.useColors)
        return;
      const l = "color: " + this.color;
      c.splice(1, 0, l, "color: inherit");
      let p = 0, f = 0;
      c[0].replace(/%[a-zA-Z%]/g, (h) => {
        h !== "%%" && (p++, h === "%c" && (f = p));
      }), c.splice(f, 0, l);
    }
    e.log = console.debug || console.log || (() => {
    });
    function s(c) {
      try {
        c ? e.storage.setItem("debug", c) : e.storage.removeItem("debug");
      } catch {
      }
    }
    function a() {
      let c;
      try {
        c = e.storage.getItem("debug") || e.storage.getItem("DEBUG");
      } catch {
      }
      return !c && typeof process < "u" && "env" in process && (c = process.env.DEBUG), c;
    }
    function i() {
      try {
        return localStorage;
      } catch {
      }
    }
    n.exports = Ei()(e);
    const { formatters: o } = n.exports;
    o.j = function(c) {
      try {
        return JSON.stringify(c);
      } catch (l) {
        return "[UnexpectedJSONParseError]: " + l.message;
      }
    };
  }(dn, dn.exports)), dn.exports;
}
var Ni = Oi();
const Ri = /* @__PURE__ */ Ai(Ni);
function Di() {
  return mo();
}
function Kr(n) {
  const e = Di();
  return typeof e < "u" && (e[n] === "true" || e[n] === "1");
}
const Fs = {
  get disabled() {
    return !0;
  }
}, Us = {
  get dontLogModelData() {
    return Kr("OPENAI_AGENTS_DONT_LOG_MODEL_DATA");
  },
  get dontLogToolData() {
    return Kr("OPENAI_AGENTS_DONT_LOG_TOOL_DATA");
  }
}, Pi = Us.dontLogModelData, ji = Us.dontLogToolData;
function Js(n = "openai-agents") {
  return {
    namespace: n,
    debug: Ri(n),
    error: console.error,
    warn: console.warn,
    dontLogModelData: Pi,
    dontLogToolData: ji
  };
}
const C = Js("openai-agents:core");
function tt(n) {
  if (n == null)
    return String(n);
  if (typeof n == "string")
    return n;
  if (typeof n == "object")
    try {
      return JSON.stringify(n);
    } catch {
      return "[object with circular references]";
    }
  return String(n);
}
function Zi(n, e) {
  return `An error occurred while running the tool. Please try again. Error: ${e instanceof Error ? e.toString() : String(e)}`;
}
function nr(n) {
  const e = n.name ? yn(n.name) : yn(n.execute.name), t = typeof n.errorFunction > "u" ? Zi : n.errorFunction;
  if (!e)
    throw new Error("Tool name cannot be empty. Either name your function or provide a name in the options.");
  const r = n.strict ?? !0;
  if (!r && et(n.parameters))
    throw new Q("Strict mode is required for Zod parameters");
  const { parser: s, schema: a } = xr(n.parameters, e);
  async function i(l, p) {
    const [f, h] = await wr(() => s(p));
    if (f !== null)
      throw C.dontLogToolData ? C.debug(`Invalid JSON input for tool ${e}`) : C.debug(`Invalid JSON input for tool ${e}: ${p}`), new fe("Invalid JSON input for tool");
    C.dontLogToolData ? C.debug(`Invoking tool ${e}`) : C.debug(`Invoking tool ${e} with input ${p}`);
    const S = await n.execute(h, l), x = tt(S);
    return C.dontLogToolData ? C.debug(`Tool ${e} completed`) : C.debug(`Tool ${e} returned: ${x}`), S;
  }
  async function o(l, p) {
    return i(l, p).catch((f) => {
      if (t) {
        const h = Mt();
        return h == null || h.setError({
          message: "Error running tool (non-fatal)",
          data: {
            tool_name: e,
            error: f.toString()
          }
        }), t(l, f);
      }
      throw f;
    });
  }
  const c = typeof n.needsApproval == "function" ? n.needsApproval : async () => typeof n.needsApproval == "boolean" ? n.needsApproval : !1;
  return {
    type: "function",
    name: e,
    description: n.description,
    parameters: a,
    strict: r,
    invoke: o,
    needsApproval: c
  };
}
var F;
(function(n) {
  n.assertEqual = (s) => {
  };
  function e(s) {
  }
  n.assertIs = e;
  function t(s) {
    throw new Error();
  }
  n.assertNever = t, n.arrayToEnum = (s) => {
    const a = {};
    for (const i of s)
      a[i] = i;
    return a;
  }, n.getValidEnumValues = (s) => {
    const a = n.objectKeys(s).filter((o) => typeof s[s[o]] != "number"), i = {};
    for (const o of a)
      i[o] = s[o];
    return n.objectValues(i);
  }, n.objectValues = (s) => n.objectKeys(s).map(function(a) {
    return s[a];
  }), n.objectKeys = typeof Object.keys == "function" ? (s) => Object.keys(s) : (s) => {
    const a = [];
    for (const i in s)
      Object.prototype.hasOwnProperty.call(s, i) && a.push(i);
    return a;
  }, n.find = (s, a) => {
    for (const i of s)
      if (a(i))
        return i;
  }, n.isInteger = typeof Number.isInteger == "function" ? (s) => Number.isInteger(s) : (s) => typeof s == "number" && Number.isFinite(s) && Math.floor(s) === s;
  function r(s, a = " | ") {
    return s.map((i) => typeof i == "string" ? `'${i}'` : i).join(a);
  }
  n.joinValues = r, n.jsonStringifyReplacer = (s, a) => typeof a == "bigint" ? a.toString() : a;
})(F || (F = {}));
var es;
(function(n) {
  n.mergeShapes = (e, t) => ({
    ...e,
    ...t
    // second overwrites first
  });
})(es || (es = {}));
const k = F.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]), je = (n) => {
  switch (typeof n) {
    case "undefined":
      return k.undefined;
    case "string":
      return k.string;
    case "number":
      return Number.isNaN(n) ? k.nan : k.number;
    case "boolean":
      return k.boolean;
    case "function":
      return k.function;
    case "bigint":
      return k.bigint;
    case "symbol":
      return k.symbol;
    case "object":
      return Array.isArray(n) ? k.array : n === null ? k.null : n.then && typeof n.then == "function" && n.catch && typeof n.catch == "function" ? k.promise : typeof Map < "u" && n instanceof Map ? k.map : typeof Set < "u" && n instanceof Set ? k.set : typeof Date < "u" && n instanceof Date ? k.date : k.object;
    default:
      return k.unknown;
  }
}, v = F.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]);
class Re extends Error {
  get errors() {
    return this.issues;
  }
  constructor(e) {
    super(), this.issues = [], this.addIssue = (r) => {
      this.issues = [...this.issues, r];
    }, this.addIssues = (r = []) => {
      this.issues = [...this.issues, ...r];
    };
    const t = new.target.prototype;
    Object.setPrototypeOf ? Object.setPrototypeOf(this, t) : this.__proto__ = t, this.name = "ZodError", this.issues = e;
  }
  format(e) {
    const t = e || function(a) {
      return a.message;
    }, r = { _errors: [] }, s = (a) => {
      for (const i of a.issues)
        if (i.code === "invalid_union")
          i.unionErrors.map(s);
        else if (i.code === "invalid_return_type")
          s(i.returnTypeError);
        else if (i.code === "invalid_arguments")
          s(i.argumentsError);
        else if (i.path.length === 0)
          r._errors.push(t(i));
        else {
          let o = r, c = 0;
          for (; c < i.path.length; ) {
            const l = i.path[c];
            c === i.path.length - 1 ? (o[l] = o[l] || { _errors: [] }, o[l]._errors.push(t(i))) : o[l] = o[l] || { _errors: [] }, o = o[l], c++;
          }
        }
    };
    return s(this), r;
  }
  static assert(e) {
    if (!(e instanceof Re))
      throw new Error(`Not a ZodError: ${e}`);
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, F.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(e = (t) => t.message) {
    const t = {}, r = [];
    for (const s of this.issues)
      s.path.length > 0 ? (t[s.path[0]] = t[s.path[0]] || [], t[s.path[0]].push(e(s))) : r.push(e(s));
    return { formErrors: r, fieldErrors: t };
  }
  get formErrors() {
    return this.flatten();
  }
}
Re.create = (n) => new Re(n);
const rr = (n, e) => {
  let t;
  switch (n.code) {
    case v.invalid_type:
      n.received === k.undefined ? t = "Required" : t = `Expected ${n.expected}, received ${n.received}`;
      break;
    case v.invalid_literal:
      t = `Invalid literal value, expected ${JSON.stringify(n.expected, F.jsonStringifyReplacer)}`;
      break;
    case v.unrecognized_keys:
      t = `Unrecognized key(s) in object: ${F.joinValues(n.keys, ", ")}`;
      break;
    case v.invalid_union:
      t = "Invalid input";
      break;
    case v.invalid_union_discriminator:
      t = `Invalid discriminator value. Expected ${F.joinValues(n.options)}`;
      break;
    case v.invalid_enum_value:
      t = `Invalid enum value. Expected ${F.joinValues(n.options)}, received '${n.received}'`;
      break;
    case v.invalid_arguments:
      t = "Invalid function arguments";
      break;
    case v.invalid_return_type:
      t = "Invalid function return type";
      break;
    case v.invalid_date:
      t = "Invalid date";
      break;
    case v.invalid_string:
      typeof n.validation == "object" ? "includes" in n.validation ? (t = `Invalid input: must include "${n.validation.includes}"`, typeof n.validation.position == "number" && (t = `${t} at one or more positions greater than or equal to ${n.validation.position}`)) : "startsWith" in n.validation ? t = `Invalid input: must start with "${n.validation.startsWith}"` : "endsWith" in n.validation ? t = `Invalid input: must end with "${n.validation.endsWith}"` : F.assertNever(n.validation) : n.validation !== "regex" ? t = `Invalid ${n.validation}` : t = "Invalid";
      break;
    case v.too_small:
      n.type === "array" ? t = `Array must contain ${n.exact ? "exactly" : n.inclusive ? "at least" : "more than"} ${n.minimum} element(s)` : n.type === "string" ? t = `String must contain ${n.exact ? "exactly" : n.inclusive ? "at least" : "over"} ${n.minimum} character(s)` : n.type === "number" ? t = `Number must be ${n.exact ? "exactly equal to " : n.inclusive ? "greater than or equal to " : "greater than "}${n.minimum}` : n.type === "date" ? t = `Date must be ${n.exact ? "exactly equal to " : n.inclusive ? "greater than or equal to " : "greater than "}${new Date(Number(n.minimum))}` : t = "Invalid input";
      break;
    case v.too_big:
      n.type === "array" ? t = `Array must contain ${n.exact ? "exactly" : n.inclusive ? "at most" : "less than"} ${n.maximum} element(s)` : n.type === "string" ? t = `String must contain ${n.exact ? "exactly" : n.inclusive ? "at most" : "under"} ${n.maximum} character(s)` : n.type === "number" ? t = `Number must be ${n.exact ? "exactly" : n.inclusive ? "less than or equal to" : "less than"} ${n.maximum}` : n.type === "bigint" ? t = `BigInt must be ${n.exact ? "exactly" : n.inclusive ? "less than or equal to" : "less than"} ${n.maximum}` : n.type === "date" ? t = `Date must be ${n.exact ? "exactly" : n.inclusive ? "smaller than or equal to" : "smaller than"} ${new Date(Number(n.maximum))}` : t = "Invalid input";
      break;
    case v.custom:
      t = "Invalid input";
      break;
    case v.invalid_intersection_types:
      t = "Intersection results could not be merged";
      break;
    case v.not_multiple_of:
      t = `Number must be a multiple of ${n.multipleOf}`;
      break;
    case v.not_finite:
      t = "Number must be finite";
      break;
    default:
      t = e.defaultError, F.assertNever(n);
  }
  return { message: t };
};
let Mi = rr;
function $i() {
  return Mi;
}
const Li = (n) => {
  const { data: e, path: t, errorMaps: r, issueData: s } = n, a = [...t, ...s.path || []], i = {
    ...s,
    path: a
  };
  if (s.message !== void 0)
    return {
      ...s,
      path: a,
      message: s.message
    };
  let o = "";
  const c = r.filter((l) => !!l).slice().reverse();
  for (const l of c)
    o = l(i, { data: e, defaultError: o }).message;
  return {
    ...s,
    path: a,
    message: o
  };
};
function b(n, e) {
  const t = $i(), r = Li({
    issueData: e,
    data: n.data,
    path: n.path,
    errorMaps: [
      n.common.contextualErrorMap,
      // contextual error map is first priority
      n.schemaErrorMap,
      // then schema-bound map if available
      t,
      // then global override map
      t === rr ? void 0 : rr
      // then global default map
    ].filter((s) => !!s)
  });
  n.common.issues.push(r);
}
class ae {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    this.value === "valid" && (this.value = "dirty");
  }
  abort() {
    this.value !== "aborted" && (this.value = "aborted");
  }
  static mergeArray(e, t) {
    const r = [];
    for (const s of t) {
      if (s.status === "aborted")
        return O;
      s.status === "dirty" && e.dirty(), r.push(s.value);
    }
    return { status: e.value, value: r };
  }
  static async mergeObjectAsync(e, t) {
    const r = [];
    for (const s of t) {
      const a = await s.key, i = await s.value;
      r.push({
        key: a,
        value: i
      });
    }
    return ae.mergeObjectSync(e, r);
  }
  static mergeObjectSync(e, t) {
    const r = {};
    for (const s of t) {
      const { key: a, value: i } = s;
      if (a.status === "aborted" || i.status === "aborted")
        return O;
      a.status === "dirty" && e.dirty(), i.status === "dirty" && e.dirty(), a.value !== "__proto__" && (typeof i.value < "u" || s.alwaysSet) && (r[a.value] = i.value);
    }
    return { status: e.value, value: r };
  }
}
const O = Object.freeze({
  status: "aborted"
}), Ot = (n) => ({ status: "dirty", value: n }), he = (n) => ({ status: "valid", value: n }), ts = (n) => n.status === "aborted", ns = (n) => n.status === "dirty", It = (n) => n.status === "valid", vn = (n) => typeof Promise < "u" && n instanceof Promise;
var I;
(function(n) {
  n.errToObj = (e) => typeof e == "string" ? { message: e } : e || {}, n.toString = (e) => typeof e == "string" ? e : e == null ? void 0 : e.message;
})(I || (I = {}));
class xe {
  constructor(e, t, r, s) {
    this._cachedPath = [], this.parent = e, this.data = t, this._path = r, this._key = s;
  }
  get path() {
    return this._cachedPath.length || (Array.isArray(this._key) ? this._cachedPath.push(...this._path, ...this._key) : this._cachedPath.push(...this._path, this._key)), this._cachedPath;
  }
}
const rs = (n, e) => {
  if (It(e))
    return { success: !0, data: e.value };
  if (!n.common.issues.length)
    throw new Error("Validation failed but no issues detected.");
  return {
    success: !1,
    get error() {
      if (this._error)
        return this._error;
      const t = new Re(n.common.issues);
      return this._error = t, this._error;
    }
  };
};
function P(n) {
  if (!n)
    return {};
  const { errorMap: e, invalid_type_error: t, required_error: r, description: s } = n;
  if (e && (t || r))
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  return e ? { errorMap: e, description: s } : { errorMap: (i, o) => {
    const { message: c } = n;
    return i.code === "invalid_enum_value" ? { message: c ?? o.defaultError } : typeof o.data > "u" ? { message: c ?? r ?? o.defaultError } : i.code !== "invalid_type" ? { message: o.defaultError } : { message: c ?? t ?? o.defaultError };
  }, description: s };
}
class M {
  get description() {
    return this._def.description;
  }
  _getType(e) {
    return je(e.data);
  }
  _getOrReturnCtx(e, t) {
    return t || {
      common: e.parent.common,
      data: e.data,
      parsedType: je(e.data),
      schemaErrorMap: this._def.errorMap,
      path: e.path,
      parent: e.parent
    };
  }
  _processInputParams(e) {
    return {
      status: new ae(),
      ctx: {
        common: e.parent.common,
        data: e.data,
        parsedType: je(e.data),
        schemaErrorMap: this._def.errorMap,
        path: e.path,
        parent: e.parent
      }
    };
  }
  _parseSync(e) {
    const t = this._parse(e);
    if (vn(t))
      throw new Error("Synchronous parse encountered promise.");
    return t;
  }
  _parseAsync(e) {
    const t = this._parse(e);
    return Promise.resolve(t);
  }
  parse(e, t) {
    const r = this.safeParse(e, t);
    if (r.success)
      return r.data;
    throw r.error;
  }
  safeParse(e, t) {
    const r = {
      common: {
        issues: [],
        async: (t == null ? void 0 : t.async) ?? !1,
        contextualErrorMap: t == null ? void 0 : t.errorMap
      },
      path: (t == null ? void 0 : t.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data: e,
      parsedType: je(e)
    }, s = this._parseSync({ data: e, path: r.path, parent: r });
    return rs(r, s);
  }
  "~validate"(e) {
    var r, s;
    const t = {
      common: {
        issues: [],
        async: !!this["~standard"].async
      },
      path: [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data: e,
      parsedType: je(e)
    };
    if (!this["~standard"].async)
      try {
        const a = this._parseSync({ data: e, path: [], parent: t });
        return It(a) ? {
          value: a.value
        } : {
          issues: t.common.issues
        };
      } catch (a) {
        (s = (r = a == null ? void 0 : a.message) == null ? void 0 : r.toLowerCase()) != null && s.includes("encountered") && (this["~standard"].async = !0), t.common = {
          issues: [],
          async: !0
        };
      }
    return this._parseAsync({ data: e, path: [], parent: t }).then((a) => It(a) ? {
      value: a.value
    } : {
      issues: t.common.issues
    });
  }
  async parseAsync(e, t) {
    const r = await this.safeParseAsync(e, t);
    if (r.success)
      return r.data;
    throw r.error;
  }
  async safeParseAsync(e, t) {
    const r = {
      common: {
        issues: [],
        contextualErrorMap: t == null ? void 0 : t.errorMap,
        async: !0
      },
      path: (t == null ? void 0 : t.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data: e,
      parsedType: je(e)
    }, s = this._parse({ data: e, path: r.path, parent: r }), a = await (vn(s) ? s : Promise.resolve(s));
    return rs(r, a);
  }
  refine(e, t) {
    const r = (s) => typeof t == "string" || typeof t > "u" ? { message: t } : typeof t == "function" ? t(s) : t;
    return this._refinement((s, a) => {
      const i = e(s), o = () => a.addIssue({
        code: v.custom,
        ...r(s)
      });
      return typeof Promise < "u" && i instanceof Promise ? i.then((c) => c ? !0 : (o(), !1)) : i ? !0 : (o(), !1);
    });
  }
  refinement(e, t) {
    return this._refinement((r, s) => e(r) ? !0 : (s.addIssue(typeof t == "function" ? t(r, s) : t), !1));
  }
  _refinement(e) {
    return new st({
      schema: this,
      typeName: N.ZodEffects,
      effect: { type: "refinement", refinement: e }
    });
  }
  superRefine(e) {
    return this._refinement(e);
  }
  constructor(e) {
    this.spa = this.safeParseAsync, this._def = e, this.parse = this.parse.bind(this), this.safeParse = this.safeParse.bind(this), this.parseAsync = this.parseAsync.bind(this), this.safeParseAsync = this.safeParseAsync.bind(this), this.spa = this.spa.bind(this), this.refine = this.refine.bind(this), this.refinement = this.refinement.bind(this), this.superRefine = this.superRefine.bind(this), this.optional = this.optional.bind(this), this.nullable = this.nullable.bind(this), this.nullish = this.nullish.bind(this), this.array = this.array.bind(this), this.promise = this.promise.bind(this), this.or = this.or.bind(this), this.and = this.and.bind(this), this.transform = this.transform.bind(this), this.brand = this.brand.bind(this), this.default = this.default.bind(this), this.catch = this.catch.bind(this), this.describe = this.describe.bind(this), this.pipe = this.pipe.bind(this), this.readonly = this.readonly.bind(this), this.isNullable = this.isNullable.bind(this), this.isOptional = this.isOptional.bind(this), this["~standard"] = {
      version: 1,
      vendor: "zod",
      validate: (t) => this["~validate"](t)
    };
  }
  optional() {
    return Ne.create(this, this._def);
  }
  nullable() {
    return at.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return we.create(this);
  }
  promise() {
    return In.create(this, this._def);
  }
  or(e) {
    return xn.create([this, e], this._def);
  }
  and(e) {
    return bn.create(this, e, this._def);
  }
  transform(e) {
    return new st({
      ...P(this._def),
      schema: this,
      typeName: N.ZodEffects,
      effect: { type: "transform", transform: e }
    });
  }
  default(e) {
    const t = typeof e == "function" ? e : () => e;
    return new An({
      ...P(this._def),
      innerType: this,
      defaultValue: t,
      typeName: N.ZodDefault
    });
  }
  brand() {
    return new Vs({
      typeName: N.ZodBranded,
      type: this,
      ...P(this._def)
    });
  }
  catch(e) {
    const t = typeof e == "function" ? e : () => e;
    return new Cn({
      ...P(this._def),
      innerType: this,
      catchValue: t,
      typeName: N.ZodCatch
    });
  }
  describe(e) {
    const t = this.constructor;
    return new t({
      ...this._def,
      description: e
    });
  }
  pipe(e) {
    return Sr.create(this, e);
  }
  readonly() {
    return En.create(this);
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
}
const Fi = /^c[^\s-]{8,}$/i, Ui = /^[0-9a-z]+$/, Ji = /^[0-9A-HJKMNP-TV-Z]{26}$/i, Bi = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i, qi = /^[a-z0-9_-]{21}$/i, Gi = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/, Vi = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/, zi = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i, Hi = "^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";
let Vn;
const Wi = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/, Yi = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/, Xi = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/, Qi = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/, Ki = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/, eo = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/, Bs = "((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))", to = new RegExp(`^${Bs}$`);
function qs(n) {
  let e = "[0-5]\\d";
  n.precision ? e = `${e}\\.\\d{${n.precision}}` : n.precision == null && (e = `${e}(\\.\\d+)?`);
  const t = n.precision ? "+" : "?";
  return `([01]\\d|2[0-3]):[0-5]\\d(:${e})${t}`;
}
function no(n) {
  return new RegExp(`^${qs(n)}$`);
}
function ro(n) {
  let e = `${Bs}T${qs(n)}`;
  const t = [];
  return t.push(n.local ? "Z?" : "Z"), n.offset && t.push("([+-]\\d{2}:?\\d{2})"), e = `${e}(${t.join("|")})`, new RegExp(`^${e}$`);
}
function so(n, e) {
  return !!((e === "v4" || !e) && Wi.test(n) || (e === "v6" || !e) && Xi.test(n));
}
function ao(n, e) {
  if (!Gi.test(n))
    return !1;
  try {
    const [t] = n.split("."), r = t.replace(/-/g, "+").replace(/_/g, "/").padEnd(t.length + (4 - t.length % 4) % 4, "="), s = JSON.parse(atob(r));
    return !(typeof s != "object" || s === null || "typ" in s && (s == null ? void 0 : s.typ) !== "JWT" || !s.alg || e && s.alg !== e);
  } catch {
    return !1;
  }
}
function io(n, e) {
  return !!((e === "v4" || !e) && Yi.test(n) || (e === "v6" || !e) && Qi.test(n));
}
class Oe extends M {
  _parse(e) {
    if (this._def.coerce && (e.data = String(e.data)), this._getType(e) !== k.string) {
      const a = this._getOrReturnCtx(e);
      return b(a, {
        code: v.invalid_type,
        expected: k.string,
        received: a.parsedType
      }), O;
    }
    const r = new ae();
    let s;
    for (const a of this._def.checks)
      if (a.kind === "min")
        e.data.length < a.value && (s = this._getOrReturnCtx(e, s), b(s, {
          code: v.too_small,
          minimum: a.value,
          type: "string",
          inclusive: !0,
          exact: !1,
          message: a.message
        }), r.dirty());
      else if (a.kind === "max")
        e.data.length > a.value && (s = this._getOrReturnCtx(e, s), b(s, {
          code: v.too_big,
          maximum: a.value,
          type: "string",
          inclusive: !0,
          exact: !1,
          message: a.message
        }), r.dirty());
      else if (a.kind === "length") {
        const i = e.data.length > a.value, o = e.data.length < a.value;
        (i || o) && (s = this._getOrReturnCtx(e, s), i ? b(s, {
          code: v.too_big,
          maximum: a.value,
          type: "string",
          inclusive: !0,
          exact: !0,
          message: a.message
        }) : o && b(s, {
          code: v.too_small,
          minimum: a.value,
          type: "string",
          inclusive: !0,
          exact: !0,
          message: a.message
        }), r.dirty());
      } else if (a.kind === "email")
        zi.test(e.data) || (s = this._getOrReturnCtx(e, s), b(s, {
          validation: "email",
          code: v.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "emoji")
        Vn || (Vn = new RegExp(Hi, "u")), Vn.test(e.data) || (s = this._getOrReturnCtx(e, s), b(s, {
          validation: "emoji",
          code: v.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "uuid")
        Bi.test(e.data) || (s = this._getOrReturnCtx(e, s), b(s, {
          validation: "uuid",
          code: v.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "nanoid")
        qi.test(e.data) || (s = this._getOrReturnCtx(e, s), b(s, {
          validation: "nanoid",
          code: v.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "cuid")
        Fi.test(e.data) || (s = this._getOrReturnCtx(e, s), b(s, {
          validation: "cuid",
          code: v.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "cuid2")
        Ui.test(e.data) || (s = this._getOrReturnCtx(e, s), b(s, {
          validation: "cuid2",
          code: v.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "ulid")
        Ji.test(e.data) || (s = this._getOrReturnCtx(e, s), b(s, {
          validation: "ulid",
          code: v.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "url")
        try {
          new URL(e.data);
        } catch {
          s = this._getOrReturnCtx(e, s), b(s, {
            validation: "url",
            code: v.invalid_string,
            message: a.message
          }), r.dirty();
        }
      else a.kind === "regex" ? (a.regex.lastIndex = 0, a.regex.test(e.data) || (s = this._getOrReturnCtx(e, s), b(s, {
        validation: "regex",
        code: v.invalid_string,
        message: a.message
      }), r.dirty())) : a.kind === "trim" ? e.data = e.data.trim() : a.kind === "includes" ? e.data.includes(a.value, a.position) || (s = this._getOrReturnCtx(e, s), b(s, {
        code: v.invalid_string,
        validation: { includes: a.value, position: a.position },
        message: a.message
      }), r.dirty()) : a.kind === "toLowerCase" ? e.data = e.data.toLowerCase() : a.kind === "toUpperCase" ? e.data = e.data.toUpperCase() : a.kind === "startsWith" ? e.data.startsWith(a.value) || (s = this._getOrReturnCtx(e, s), b(s, {
        code: v.invalid_string,
        validation: { startsWith: a.value },
        message: a.message
      }), r.dirty()) : a.kind === "endsWith" ? e.data.endsWith(a.value) || (s = this._getOrReturnCtx(e, s), b(s, {
        code: v.invalid_string,
        validation: { endsWith: a.value },
        message: a.message
      }), r.dirty()) : a.kind === "datetime" ? ro(a).test(e.data) || (s = this._getOrReturnCtx(e, s), b(s, {
        code: v.invalid_string,
        validation: "datetime",
        message: a.message
      }), r.dirty()) : a.kind === "date" ? to.test(e.data) || (s = this._getOrReturnCtx(e, s), b(s, {
        code: v.invalid_string,
        validation: "date",
        message: a.message
      }), r.dirty()) : a.kind === "time" ? no(a).test(e.data) || (s = this._getOrReturnCtx(e, s), b(s, {
        code: v.invalid_string,
        validation: "time",
        message: a.message
      }), r.dirty()) : a.kind === "duration" ? Vi.test(e.data) || (s = this._getOrReturnCtx(e, s), b(s, {
        validation: "duration",
        code: v.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "ip" ? so(e.data, a.version) || (s = this._getOrReturnCtx(e, s), b(s, {
        validation: "ip",
        code: v.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "jwt" ? ao(e.data, a.alg) || (s = this._getOrReturnCtx(e, s), b(s, {
        validation: "jwt",
        code: v.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "cidr" ? io(e.data, a.version) || (s = this._getOrReturnCtx(e, s), b(s, {
        validation: "cidr",
        code: v.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "base64" ? Ki.test(e.data) || (s = this._getOrReturnCtx(e, s), b(s, {
        validation: "base64",
        code: v.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "base64url" ? eo.test(e.data) || (s = this._getOrReturnCtx(e, s), b(s, {
        validation: "base64url",
        code: v.invalid_string,
        message: a.message
      }), r.dirty()) : F.assertNever(a);
    return { status: r.value, value: e.data };
  }
  _regex(e, t, r) {
    return this.refinement((s) => e.test(s), {
      validation: t,
      code: v.invalid_string,
      ...I.errToObj(r)
    });
  }
  _addCheck(e) {
    return new Oe({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  email(e) {
    return this._addCheck({ kind: "email", ...I.errToObj(e) });
  }
  url(e) {
    return this._addCheck({ kind: "url", ...I.errToObj(e) });
  }
  emoji(e) {
    return this._addCheck({ kind: "emoji", ...I.errToObj(e) });
  }
  uuid(e) {
    return this._addCheck({ kind: "uuid", ...I.errToObj(e) });
  }
  nanoid(e) {
    return this._addCheck({ kind: "nanoid", ...I.errToObj(e) });
  }
  cuid(e) {
    return this._addCheck({ kind: "cuid", ...I.errToObj(e) });
  }
  cuid2(e) {
    return this._addCheck({ kind: "cuid2", ...I.errToObj(e) });
  }
  ulid(e) {
    return this._addCheck({ kind: "ulid", ...I.errToObj(e) });
  }
  base64(e) {
    return this._addCheck({ kind: "base64", ...I.errToObj(e) });
  }
  base64url(e) {
    return this._addCheck({
      kind: "base64url",
      ...I.errToObj(e)
    });
  }
  jwt(e) {
    return this._addCheck({ kind: "jwt", ...I.errToObj(e) });
  }
  ip(e) {
    return this._addCheck({ kind: "ip", ...I.errToObj(e) });
  }
  cidr(e) {
    return this._addCheck({ kind: "cidr", ...I.errToObj(e) });
  }
  datetime(e) {
    return typeof e == "string" ? this._addCheck({
      kind: "datetime",
      precision: null,
      offset: !1,
      local: !1,
      message: e
    }) : this._addCheck({
      kind: "datetime",
      precision: typeof (e == null ? void 0 : e.precision) > "u" ? null : e == null ? void 0 : e.precision,
      offset: (e == null ? void 0 : e.offset) ?? !1,
      local: (e == null ? void 0 : e.local) ?? !1,
      ...I.errToObj(e == null ? void 0 : e.message)
    });
  }
  date(e) {
    return this._addCheck({ kind: "date", message: e });
  }
  time(e) {
    return typeof e == "string" ? this._addCheck({
      kind: "time",
      precision: null,
      message: e
    }) : this._addCheck({
      kind: "time",
      precision: typeof (e == null ? void 0 : e.precision) > "u" ? null : e == null ? void 0 : e.precision,
      ...I.errToObj(e == null ? void 0 : e.message)
    });
  }
  duration(e) {
    return this._addCheck({ kind: "duration", ...I.errToObj(e) });
  }
  regex(e, t) {
    return this._addCheck({
      kind: "regex",
      regex: e,
      ...I.errToObj(t)
    });
  }
  includes(e, t) {
    return this._addCheck({
      kind: "includes",
      value: e,
      position: t == null ? void 0 : t.position,
      ...I.errToObj(t == null ? void 0 : t.message)
    });
  }
  startsWith(e, t) {
    return this._addCheck({
      kind: "startsWith",
      value: e,
      ...I.errToObj(t)
    });
  }
  endsWith(e, t) {
    return this._addCheck({
      kind: "endsWith",
      value: e,
      ...I.errToObj(t)
    });
  }
  min(e, t) {
    return this._addCheck({
      kind: "min",
      value: e,
      ...I.errToObj(t)
    });
  }
  max(e, t) {
    return this._addCheck({
      kind: "max",
      value: e,
      ...I.errToObj(t)
    });
  }
  length(e, t) {
    return this._addCheck({
      kind: "length",
      value: e,
      ...I.errToObj(t)
    });
  }
  /**
   * Equivalent to `.min(1)`
   */
  nonempty(e) {
    return this.min(1, I.errToObj(e));
  }
  trim() {
    return new Oe({
      ...this._def,
      checks: [...this._def.checks, { kind: "trim" }]
    });
  }
  toLowerCase() {
    return new Oe({
      ...this._def,
      checks: [...this._def.checks, { kind: "toLowerCase" }]
    });
  }
  toUpperCase() {
    return new Oe({
      ...this._def,
      checks: [...this._def.checks, { kind: "toUpperCase" }]
    });
  }
  get isDatetime() {
    return !!this._def.checks.find((e) => e.kind === "datetime");
  }
  get isDate() {
    return !!this._def.checks.find((e) => e.kind === "date");
  }
  get isTime() {
    return !!this._def.checks.find((e) => e.kind === "time");
  }
  get isDuration() {
    return !!this._def.checks.find((e) => e.kind === "duration");
  }
  get isEmail() {
    return !!this._def.checks.find((e) => e.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((e) => e.kind === "url");
  }
  get isEmoji() {
    return !!this._def.checks.find((e) => e.kind === "emoji");
  }
  get isUUID() {
    return !!this._def.checks.find((e) => e.kind === "uuid");
  }
  get isNANOID() {
    return !!this._def.checks.find((e) => e.kind === "nanoid");
  }
  get isCUID() {
    return !!this._def.checks.find((e) => e.kind === "cuid");
  }
  get isCUID2() {
    return !!this._def.checks.find((e) => e.kind === "cuid2");
  }
  get isULID() {
    return !!this._def.checks.find((e) => e.kind === "ulid");
  }
  get isIP() {
    return !!this._def.checks.find((e) => e.kind === "ip");
  }
  get isCIDR() {
    return !!this._def.checks.find((e) => e.kind === "cidr");
  }
  get isBase64() {
    return !!this._def.checks.find((e) => e.kind === "base64");
  }
  get isBase64url() {
    return !!this._def.checks.find((e) => e.kind === "base64url");
  }
  get minLength() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e;
  }
  get maxLength() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e;
  }
}
Oe.create = (n) => new Oe({
  checks: [],
  typeName: N.ZodString,
  coerce: (n == null ? void 0 : n.coerce) ?? !1,
  ...P(n)
});
function oo(n, e) {
  const t = (n.toString().split(".")[1] || "").length, r = (e.toString().split(".")[1] || "").length, s = t > r ? t : r, a = Number.parseInt(n.toFixed(s).replace(".", "")), i = Number.parseInt(e.toFixed(s).replace(".", ""));
  return a % i / 10 ** s;
}
class At extends M {
  constructor() {
    super(...arguments), this.min = this.gte, this.max = this.lte, this.step = this.multipleOf;
  }
  _parse(e) {
    if (this._def.coerce && (e.data = Number(e.data)), this._getType(e) !== k.number) {
      const a = this._getOrReturnCtx(e);
      return b(a, {
        code: v.invalid_type,
        expected: k.number,
        received: a.parsedType
      }), O;
    }
    let r;
    const s = new ae();
    for (const a of this._def.checks)
      a.kind === "int" ? F.isInteger(e.data) || (r = this._getOrReturnCtx(e, r), b(r, {
        code: v.invalid_type,
        expected: "integer",
        received: "float",
        message: a.message
      }), s.dirty()) : a.kind === "min" ? (a.inclusive ? e.data < a.value : e.data <= a.value) && (r = this._getOrReturnCtx(e, r), b(r, {
        code: v.too_small,
        minimum: a.value,
        type: "number",
        inclusive: a.inclusive,
        exact: !1,
        message: a.message
      }), s.dirty()) : a.kind === "max" ? (a.inclusive ? e.data > a.value : e.data >= a.value) && (r = this._getOrReturnCtx(e, r), b(r, {
        code: v.too_big,
        maximum: a.value,
        type: "number",
        inclusive: a.inclusive,
        exact: !1,
        message: a.message
      }), s.dirty()) : a.kind === "multipleOf" ? oo(e.data, a.value) !== 0 && (r = this._getOrReturnCtx(e, r), b(r, {
        code: v.not_multiple_of,
        multipleOf: a.value,
        message: a.message
      }), s.dirty()) : a.kind === "finite" ? Number.isFinite(e.data) || (r = this._getOrReturnCtx(e, r), b(r, {
        code: v.not_finite,
        message: a.message
      }), s.dirty()) : F.assertNever(a);
    return { status: s.value, value: e.data };
  }
  gte(e, t) {
    return this.setLimit("min", e, !0, I.toString(t));
  }
  gt(e, t) {
    return this.setLimit("min", e, !1, I.toString(t));
  }
  lte(e, t) {
    return this.setLimit("max", e, !0, I.toString(t));
  }
  lt(e, t) {
    return this.setLimit("max", e, !1, I.toString(t));
  }
  setLimit(e, t, r, s) {
    return new At({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind: e,
          value: t,
          inclusive: r,
          message: I.toString(s)
        }
      ]
    });
  }
  _addCheck(e) {
    return new At({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  int(e) {
    return this._addCheck({
      kind: "int",
      message: I.toString(e)
    });
  }
  positive(e) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: !1,
      message: I.toString(e)
    });
  }
  negative(e) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: !1,
      message: I.toString(e)
    });
  }
  nonpositive(e) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: !0,
      message: I.toString(e)
    });
  }
  nonnegative(e) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: !0,
      message: I.toString(e)
    });
  }
  multipleOf(e, t) {
    return this._addCheck({
      kind: "multipleOf",
      value: e,
      message: I.toString(t)
    });
  }
  finite(e) {
    return this._addCheck({
      kind: "finite",
      message: I.toString(e)
    });
  }
  safe(e) {
    return this._addCheck({
      kind: "min",
      inclusive: !0,
      value: Number.MIN_SAFE_INTEGER,
      message: I.toString(e)
    })._addCheck({
      kind: "max",
      inclusive: !0,
      value: Number.MAX_SAFE_INTEGER,
      message: I.toString(e)
    });
  }
  get minValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e;
  }
  get maxValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e;
  }
  get isInt() {
    return !!this._def.checks.find((e) => e.kind === "int" || e.kind === "multipleOf" && F.isInteger(e.value));
  }
  get isFinite() {
    let e = null, t = null;
    for (const r of this._def.checks) {
      if (r.kind === "finite" || r.kind === "int" || r.kind === "multipleOf")
        return !0;
      r.kind === "min" ? (t === null || r.value > t) && (t = r.value) : r.kind === "max" && (e === null || r.value < e) && (e = r.value);
    }
    return Number.isFinite(t) && Number.isFinite(e);
  }
}
At.create = (n) => new At({
  checks: [],
  typeName: N.ZodNumber,
  coerce: (n == null ? void 0 : n.coerce) || !1,
  ...P(n)
});
class Pt extends M {
  constructor() {
    super(...arguments), this.min = this.gte, this.max = this.lte;
  }
  _parse(e) {
    if (this._def.coerce)
      try {
        e.data = BigInt(e.data);
      } catch {
        return this._getInvalidInput(e);
      }
    if (this._getType(e) !== k.bigint)
      return this._getInvalidInput(e);
    let r;
    const s = new ae();
    for (const a of this._def.checks)
      a.kind === "min" ? (a.inclusive ? e.data < a.value : e.data <= a.value) && (r = this._getOrReturnCtx(e, r), b(r, {
        code: v.too_small,
        type: "bigint",
        minimum: a.value,
        inclusive: a.inclusive,
        message: a.message
      }), s.dirty()) : a.kind === "max" ? (a.inclusive ? e.data > a.value : e.data >= a.value) && (r = this._getOrReturnCtx(e, r), b(r, {
        code: v.too_big,
        type: "bigint",
        maximum: a.value,
        inclusive: a.inclusive,
        message: a.message
      }), s.dirty()) : a.kind === "multipleOf" ? e.data % a.value !== BigInt(0) && (r = this._getOrReturnCtx(e, r), b(r, {
        code: v.not_multiple_of,
        multipleOf: a.value,
        message: a.message
      }), s.dirty()) : F.assertNever(a);
    return { status: s.value, value: e.data };
  }
  _getInvalidInput(e) {
    const t = this._getOrReturnCtx(e);
    return b(t, {
      code: v.invalid_type,
      expected: k.bigint,
      received: t.parsedType
    }), O;
  }
  gte(e, t) {
    return this.setLimit("min", e, !0, I.toString(t));
  }
  gt(e, t) {
    return this.setLimit("min", e, !1, I.toString(t));
  }
  lte(e, t) {
    return this.setLimit("max", e, !0, I.toString(t));
  }
  lt(e, t) {
    return this.setLimit("max", e, !1, I.toString(t));
  }
  setLimit(e, t, r, s) {
    return new Pt({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind: e,
          value: t,
          inclusive: r,
          message: I.toString(s)
        }
      ]
    });
  }
  _addCheck(e) {
    return new Pt({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  positive(e) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: !1,
      message: I.toString(e)
    });
  }
  negative(e) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: !1,
      message: I.toString(e)
    });
  }
  nonpositive(e) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: !0,
      message: I.toString(e)
    });
  }
  nonnegative(e) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: !0,
      message: I.toString(e)
    });
  }
  multipleOf(e, t) {
    return this._addCheck({
      kind: "multipleOf",
      value: e,
      message: I.toString(t)
    });
  }
  get minValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e;
  }
  get maxValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e;
  }
}
Pt.create = (n) => new Pt({
  checks: [],
  typeName: N.ZodBigInt,
  coerce: (n == null ? void 0 : n.coerce) ?? !1,
  ...P(n)
});
class sr extends M {
  _parse(e) {
    if (this._def.coerce && (e.data = !!e.data), this._getType(e) !== k.boolean) {
      const r = this._getOrReturnCtx(e);
      return b(r, {
        code: v.invalid_type,
        expected: k.boolean,
        received: r.parsedType
      }), O;
    }
    return he(e.data);
  }
}
sr.create = (n) => new sr({
  typeName: N.ZodBoolean,
  coerce: (n == null ? void 0 : n.coerce) || !1,
  ...P(n)
});
class wn extends M {
  _parse(e) {
    if (this._def.coerce && (e.data = new Date(e.data)), this._getType(e) !== k.date) {
      const a = this._getOrReturnCtx(e);
      return b(a, {
        code: v.invalid_type,
        expected: k.date,
        received: a.parsedType
      }), O;
    }
    if (Number.isNaN(e.data.getTime())) {
      const a = this._getOrReturnCtx(e);
      return b(a, {
        code: v.invalid_date
      }), O;
    }
    const r = new ae();
    let s;
    for (const a of this._def.checks)
      a.kind === "min" ? e.data.getTime() < a.value && (s = this._getOrReturnCtx(e, s), b(s, {
        code: v.too_small,
        message: a.message,
        inclusive: !0,
        exact: !1,
        minimum: a.value,
        type: "date"
      }), r.dirty()) : a.kind === "max" ? e.data.getTime() > a.value && (s = this._getOrReturnCtx(e, s), b(s, {
        code: v.too_big,
        message: a.message,
        inclusive: !0,
        exact: !1,
        maximum: a.value,
        type: "date"
      }), r.dirty()) : F.assertNever(a);
    return {
      status: r.value,
      value: new Date(e.data.getTime())
    };
  }
  _addCheck(e) {
    return new wn({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  min(e, t) {
    return this._addCheck({
      kind: "min",
      value: e.getTime(),
      message: I.toString(t)
    });
  }
  max(e, t) {
    return this._addCheck({
      kind: "max",
      value: e.getTime(),
      message: I.toString(t)
    });
  }
  get minDate() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e != null ? new Date(e) : null;
  }
  get maxDate() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e != null ? new Date(e) : null;
  }
}
wn.create = (n) => new wn({
  checks: [],
  coerce: (n == null ? void 0 : n.coerce) || !1,
  typeName: N.ZodDate,
  ...P(n)
});
class ss extends M {
  _parse(e) {
    if (this._getType(e) !== k.symbol) {
      const r = this._getOrReturnCtx(e);
      return b(r, {
        code: v.invalid_type,
        expected: k.symbol,
        received: r.parsedType
      }), O;
    }
    return he(e.data);
  }
}
ss.create = (n) => new ss({
  typeName: N.ZodSymbol,
  ...P(n)
});
class ar extends M {
  _parse(e) {
    if (this._getType(e) !== k.undefined) {
      const r = this._getOrReturnCtx(e);
      return b(r, {
        code: v.invalid_type,
        expected: k.undefined,
        received: r.parsedType
      }), O;
    }
    return he(e.data);
  }
}
ar.create = (n) => new ar({
  typeName: N.ZodUndefined,
  ...P(n)
});
class ir extends M {
  _parse(e) {
    if (this._getType(e) !== k.null) {
      const r = this._getOrReturnCtx(e);
      return b(r, {
        code: v.invalid_type,
        expected: k.null,
        received: r.parsedType
      }), O;
    }
    return he(e.data);
  }
}
ir.create = (n) => new ir({
  typeName: N.ZodNull,
  ...P(n)
});
class or extends M {
  constructor() {
    super(...arguments), this._any = !0;
  }
  _parse(e) {
    return he(e.data);
  }
}
or.create = (n) => new or({
  typeName: N.ZodAny,
  ...P(n)
});
class as extends M {
  constructor() {
    super(...arguments), this._unknown = !0;
  }
  _parse(e) {
    return he(e.data);
  }
}
as.create = (n) => new as({
  typeName: N.ZodUnknown,
  ...P(n)
});
class Ue extends M {
  _parse(e) {
    const t = this._getOrReturnCtx(e);
    return b(t, {
      code: v.invalid_type,
      expected: k.never,
      received: t.parsedType
    }), O;
  }
}
Ue.create = (n) => new Ue({
  typeName: N.ZodNever,
  ...P(n)
});
class is extends M {
  _parse(e) {
    if (this._getType(e) !== k.undefined) {
      const r = this._getOrReturnCtx(e);
      return b(r, {
        code: v.invalid_type,
        expected: k.void,
        received: r.parsedType
      }), O;
    }
    return he(e.data);
  }
}
is.create = (n) => new is({
  typeName: N.ZodVoid,
  ...P(n)
});
class we extends M {
  _parse(e) {
    const { ctx: t, status: r } = this._processInputParams(e), s = this._def;
    if (t.parsedType !== k.array)
      return b(t, {
        code: v.invalid_type,
        expected: k.array,
        received: t.parsedType
      }), O;
    if (s.exactLength !== null) {
      const i = t.data.length > s.exactLength.value, o = t.data.length < s.exactLength.value;
      (i || o) && (b(t, {
        code: i ? v.too_big : v.too_small,
        minimum: o ? s.exactLength.value : void 0,
        maximum: i ? s.exactLength.value : void 0,
        type: "array",
        inclusive: !0,
        exact: !0,
        message: s.exactLength.message
      }), r.dirty());
    }
    if (s.minLength !== null && t.data.length < s.minLength.value && (b(t, {
      code: v.too_small,
      minimum: s.minLength.value,
      type: "array",
      inclusive: !0,
      exact: !1,
      message: s.minLength.message
    }), r.dirty()), s.maxLength !== null && t.data.length > s.maxLength.value && (b(t, {
      code: v.too_big,
      maximum: s.maxLength.value,
      type: "array",
      inclusive: !0,
      exact: !1,
      message: s.maxLength.message
    }), r.dirty()), t.common.async)
      return Promise.all([...t.data].map((i, o) => s.type._parseAsync(new xe(t, i, t.path, o)))).then((i) => ae.mergeArray(r, i));
    const a = [...t.data].map((i, o) => s.type._parseSync(new xe(t, i, t.path, o)));
    return ae.mergeArray(r, a);
  }
  get element() {
    return this._def.type;
  }
  min(e, t) {
    return new we({
      ...this._def,
      minLength: { value: e, message: I.toString(t) }
    });
  }
  max(e, t) {
    return new we({
      ...this._def,
      maxLength: { value: e, message: I.toString(t) }
    });
  }
  length(e, t) {
    return new we({
      ...this._def,
      exactLength: { value: e, message: I.toString(t) }
    });
  }
  nonempty(e) {
    return this.min(1, e);
  }
}
we.create = (n, e) => new we({
  type: n,
  minLength: null,
  maxLength: null,
  exactLength: null,
  typeName: N.ZodArray,
  ...P(e)
});
function ct(n) {
  if (n instanceof W) {
    const e = {};
    for (const t in n.shape) {
      const r = n.shape[t];
      e[t] = Ne.create(ct(r));
    }
    return new W({
      ...n._def,
      shape: () => e
    });
  } else return n instanceof we ? new we({
    ...n._def,
    type: ct(n.element)
  }) : n instanceof Ne ? Ne.create(ct(n.unwrap())) : n instanceof at ? at.create(ct(n.unwrap())) : n instanceof nt ? nt.create(n.items.map((e) => ct(e))) : n;
}
class W extends M {
  constructor() {
    super(...arguments), this._cached = null, this.nonstrict = this.passthrough, this.augment = this.extend;
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    const e = this._def.shape(), t = F.objectKeys(e);
    return this._cached = { shape: e, keys: t }, this._cached;
  }
  _parse(e) {
    if (this._getType(e) !== k.object) {
      const l = this._getOrReturnCtx(e);
      return b(l, {
        code: v.invalid_type,
        expected: k.object,
        received: l.parsedType
      }), O;
    }
    const { status: r, ctx: s } = this._processInputParams(e), { shape: a, keys: i } = this._getCached(), o = [];
    if (!(this._def.catchall instanceof Ue && this._def.unknownKeys === "strip"))
      for (const l in s.data)
        i.includes(l) || o.push(l);
    const c = [];
    for (const l of i) {
      const p = a[l], f = s.data[l];
      c.push({
        key: { status: "valid", value: l },
        value: p._parse(new xe(s, f, s.path, l)),
        alwaysSet: l in s.data
      });
    }
    if (this._def.catchall instanceof Ue) {
      const l = this._def.unknownKeys;
      if (l === "passthrough")
        for (const p of o)
          c.push({
            key: { status: "valid", value: p },
            value: { status: "valid", value: s.data[p] }
          });
      else if (l === "strict")
        o.length > 0 && (b(s, {
          code: v.unrecognized_keys,
          keys: o
        }), r.dirty());
      else if (l !== "strip") throw new Error("Internal ZodObject error: invalid unknownKeys value.");
    } else {
      const l = this._def.catchall;
      for (const p of o) {
        const f = s.data[p];
        c.push({
          key: { status: "valid", value: p },
          value: l._parse(
            new xe(s, f, s.path, p)
            //, ctx.child(key), value, getParsedType(value)
          ),
          alwaysSet: p in s.data
        });
      }
    }
    return s.common.async ? Promise.resolve().then(async () => {
      const l = [];
      for (const p of c) {
        const f = await p.key, h = await p.value;
        l.push({
          key: f,
          value: h,
          alwaysSet: p.alwaysSet
        });
      }
      return l;
    }).then((l) => ae.mergeObjectSync(r, l)) : ae.mergeObjectSync(r, c);
  }
  get shape() {
    return this._def.shape();
  }
  strict(e) {
    return I.errToObj, new W({
      ...this._def,
      unknownKeys: "strict",
      ...e !== void 0 ? {
        errorMap: (t, r) => {
          var a, i;
          const s = ((i = (a = this._def).errorMap) == null ? void 0 : i.call(a, t, r).message) ?? r.defaultError;
          return t.code === "unrecognized_keys" ? {
            message: I.errToObj(e).message ?? s
          } : {
            message: s
          };
        }
      } : {}
    });
  }
  strip() {
    return new W({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new W({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  // const AugmentFactory =
  //   <Def extends ZodObjectDef>(def: Def) =>
  //   <Augmentation extends ZodRawShape>(
  //     augmentation: Augmentation
  //   ): ZodObject<
  //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
  //     Def["unknownKeys"],
  //     Def["catchall"]
  //   > => {
  //     return new ZodObject({
  //       ...def,
  //       shape: () => ({
  //         ...def.shape(),
  //         ...augmentation,
  //       }),
  //     }) as any;
  //   };
  extend(e) {
    return new W({
      ...this._def,
      shape: () => ({
        ...this._def.shape(),
        ...e
      })
    });
  }
  /**
   * Prior to zod@1.0.12 there was a bug in the
   * inferred type of merged objects. Please
   * upgrade if you are experiencing issues.
   */
  merge(e) {
    return new W({
      unknownKeys: e._def.unknownKeys,
      catchall: e._def.catchall,
      shape: () => ({
        ...this._def.shape(),
        ...e._def.shape()
      }),
      typeName: N.ZodObject
    });
  }
  // merge<
  //   Incoming extends AnyZodObject,
  //   Augmentation extends Incoming["shape"],
  //   NewOutput extends {
  //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
  //       ? Augmentation[k]["_output"]
  //       : k extends keyof Output
  //       ? Output[k]
  //       : never;
  //   },
  //   NewInput extends {
  //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
  //       ? Augmentation[k]["_input"]
  //       : k extends keyof Input
  //       ? Input[k]
  //       : never;
  //   }
  // >(
  //   merging: Incoming
  // ): ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"],
  //   NewOutput,
  //   NewInput
  // > {
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  setKey(e, t) {
    return this.augment({ [e]: t });
  }
  // merge<Incoming extends AnyZodObject>(
  //   merging: Incoming
  // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
  // ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"]
  // > {
  //   // const mergedShape = objectUtil.mergeShapes(
  //   //   this._def.shape(),
  //   //   merging._def.shape()
  //   // );
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  catchall(e) {
    return new W({
      ...this._def,
      catchall: e
    });
  }
  pick(e) {
    const t = {};
    for (const r of F.objectKeys(e))
      e[r] && this.shape[r] && (t[r] = this.shape[r]);
    return new W({
      ...this._def,
      shape: () => t
    });
  }
  omit(e) {
    const t = {};
    for (const r of F.objectKeys(this.shape))
      e[r] || (t[r] = this.shape[r]);
    return new W({
      ...this._def,
      shape: () => t
    });
  }
  /**
   * @deprecated
   */
  deepPartial() {
    return ct(this);
  }
  partial(e) {
    const t = {};
    for (const r of F.objectKeys(this.shape)) {
      const s = this.shape[r];
      e && !e[r] ? t[r] = s : t[r] = s.optional();
    }
    return new W({
      ...this._def,
      shape: () => t
    });
  }
  required(e) {
    const t = {};
    for (const r of F.objectKeys(this.shape))
      if (e && !e[r])
        t[r] = this.shape[r];
      else {
        let a = this.shape[r];
        for (; a instanceof Ne; )
          a = a._def.innerType;
        t[r] = a;
      }
    return new W({
      ...this._def,
      shape: () => t
    });
  }
  keyof() {
    return Gs(F.objectKeys(this.shape));
  }
}
W.create = (n, e) => new W({
  shape: () => n,
  unknownKeys: "strip",
  catchall: Ue.create(),
  typeName: N.ZodObject,
  ...P(e)
});
W.strictCreate = (n, e) => new W({
  shape: () => n,
  unknownKeys: "strict",
  catchall: Ue.create(),
  typeName: N.ZodObject,
  ...P(e)
});
W.lazycreate = (n, e) => new W({
  shape: n,
  unknownKeys: "strip",
  catchall: Ue.create(),
  typeName: N.ZodObject,
  ...P(e)
});
class xn extends M {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e), r = this._def.options;
    function s(a) {
      for (const o of a)
        if (o.result.status === "valid")
          return o.result;
      for (const o of a)
        if (o.result.status === "dirty")
          return t.common.issues.push(...o.ctx.common.issues), o.result;
      const i = a.map((o) => new Re(o.ctx.common.issues));
      return b(t, {
        code: v.invalid_union,
        unionErrors: i
      }), O;
    }
    if (t.common.async)
      return Promise.all(r.map(async (a) => {
        const i = {
          ...t,
          common: {
            ...t.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await a._parseAsync({
            data: t.data,
            path: t.path,
            parent: i
          }),
          ctx: i
        };
      })).then(s);
    {
      let a;
      const i = [];
      for (const c of r) {
        const l = {
          ...t,
          common: {
            ...t.common,
            issues: []
          },
          parent: null
        }, p = c._parseSync({
          data: t.data,
          path: t.path,
          parent: l
        });
        if (p.status === "valid")
          return p;
        p.status === "dirty" && !a && (a = { result: p, ctx: l }), l.common.issues.length && i.push(l.common.issues);
      }
      if (a)
        return t.common.issues.push(...a.ctx.common.issues), a.result;
      const o = i.map((c) => new Re(c));
      return b(t, {
        code: v.invalid_union,
        unionErrors: o
      }), O;
    }
  }
  get options() {
    return this._def.options;
  }
}
xn.create = (n, e) => new xn({
  options: n,
  typeName: N.ZodUnion,
  ...P(e)
});
const ke = (n) => n instanceof Tn ? ke(n.schema) : n instanceof st ? ke(n.innerType()) : n instanceof kn ? [n.value] : n instanceof rt ? n.options : n instanceof cr ? F.objectValues(n.enum) : n instanceof An ? ke(n._def.innerType) : n instanceof ar ? [void 0] : n instanceof ir ? [null] : n instanceof Ne ? [void 0, ...ke(n.unwrap())] : n instanceof at ? [null, ...ke(n.unwrap())] : n instanceof Vs || n instanceof En ? ke(n.unwrap()) : n instanceof Cn ? ke(n._def.innerType) : [];
class br extends M {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    if (t.parsedType !== k.object)
      return b(t, {
        code: v.invalid_type,
        expected: k.object,
        received: t.parsedType
      }), O;
    const r = this.discriminator, s = t.data[r], a = this.optionsMap.get(s);
    return a ? t.common.async ? a._parseAsync({
      data: t.data,
      path: t.path,
      parent: t
    }) : a._parseSync({
      data: t.data,
      path: t.path,
      parent: t
    }) : (b(t, {
      code: v.invalid_union_discriminator,
      options: Array.from(this.optionsMap.keys()),
      path: [r]
    }), O);
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get options() {
    return this._def.options;
  }
  get optionsMap() {
    return this._def.optionsMap;
  }
  /**
   * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
   * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
   * have a different value for each object in the union.
   * @param discriminator the name of the discriminator property
   * @param types an array of object schemas
   * @param params
   */
  static create(e, t, r) {
    const s = /* @__PURE__ */ new Map();
    for (const a of t) {
      const i = ke(a.shape[e]);
      if (!i.length)
        throw new Error(`A discriminator value for key \`${e}\` could not be extracted from all schema options`);
      for (const o of i) {
        if (s.has(o))
          throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(o)}`);
        s.set(o, a);
      }
    }
    return new br({
      typeName: N.ZodDiscriminatedUnion,
      discriminator: e,
      options: t,
      optionsMap: s,
      ...P(r)
    });
  }
}
function ur(n, e) {
  const t = je(n), r = je(e);
  if (n === e)
    return { valid: !0, data: n };
  if (t === k.object && r === k.object) {
    const s = F.objectKeys(e), a = F.objectKeys(n).filter((o) => s.indexOf(o) !== -1), i = { ...n, ...e };
    for (const o of a) {
      const c = ur(n[o], e[o]);
      if (!c.valid)
        return { valid: !1 };
      i[o] = c.data;
    }
    return { valid: !0, data: i };
  } else if (t === k.array && r === k.array) {
    if (n.length !== e.length)
      return { valid: !1 };
    const s = [];
    for (let a = 0; a < n.length; a++) {
      const i = n[a], o = e[a], c = ur(i, o);
      if (!c.valid)
        return { valid: !1 };
      s.push(c.data);
    }
    return { valid: !0, data: s };
  } else return t === k.date && r === k.date && +n == +e ? { valid: !0, data: n } : { valid: !1 };
}
class bn extends M {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e), s = (a, i) => {
      if (ts(a) || ts(i))
        return O;
      const o = ur(a.value, i.value);
      return o.valid ? ((ns(a) || ns(i)) && t.dirty(), { status: t.value, value: o.data }) : (b(r, {
        code: v.invalid_intersection_types
      }), O);
    };
    return r.common.async ? Promise.all([
      this._def.left._parseAsync({
        data: r.data,
        path: r.path,
        parent: r
      }),
      this._def.right._parseAsync({
        data: r.data,
        path: r.path,
        parent: r
      })
    ]).then(([a, i]) => s(a, i)) : s(this._def.left._parseSync({
      data: r.data,
      path: r.path,
      parent: r
    }), this._def.right._parseSync({
      data: r.data,
      path: r.path,
      parent: r
    }));
  }
}
bn.create = (n, e, t) => new bn({
  left: n,
  right: e,
  typeName: N.ZodIntersection,
  ...P(t)
});
class nt extends M {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== k.array)
      return b(r, {
        code: v.invalid_type,
        expected: k.array,
        received: r.parsedType
      }), O;
    if (r.data.length < this._def.items.length)
      return b(r, {
        code: v.too_small,
        minimum: this._def.items.length,
        inclusive: !0,
        exact: !1,
        type: "array"
      }), O;
    !this._def.rest && r.data.length > this._def.items.length && (b(r, {
      code: v.too_big,
      maximum: this._def.items.length,
      inclusive: !0,
      exact: !1,
      type: "array"
    }), t.dirty());
    const a = [...r.data].map((i, o) => {
      const c = this._def.items[o] || this._def.rest;
      return c ? c._parse(new xe(r, i, r.path, o)) : null;
    }).filter((i) => !!i);
    return r.common.async ? Promise.all(a).then((i) => ae.mergeArray(t, i)) : ae.mergeArray(t, a);
  }
  get items() {
    return this._def.items;
  }
  rest(e) {
    return new nt({
      ...this._def,
      rest: e
    });
  }
}
nt.create = (n, e) => {
  if (!Array.isArray(n))
    throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  return new nt({
    items: n,
    typeName: N.ZodTuple,
    rest: null,
    ...P(e)
  });
};
class Sn extends M {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== k.object)
      return b(r, {
        code: v.invalid_type,
        expected: k.object,
        received: r.parsedType
      }), O;
    const s = [], a = this._def.keyType, i = this._def.valueType;
    for (const o in r.data)
      s.push({
        key: a._parse(new xe(r, o, r.path, o)),
        value: i._parse(new xe(r, r.data[o], r.path, o)),
        alwaysSet: o in r.data
      });
    return r.common.async ? ae.mergeObjectAsync(t, s) : ae.mergeObjectSync(t, s);
  }
  get element() {
    return this._def.valueType;
  }
  static create(e, t, r) {
    return t instanceof M ? new Sn({
      keyType: e,
      valueType: t,
      typeName: N.ZodRecord,
      ...P(r)
    }) : new Sn({
      keyType: Oe.create(),
      valueType: e,
      typeName: N.ZodRecord,
      ...P(t)
    });
  }
}
class os extends M {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== k.map)
      return b(r, {
        code: v.invalid_type,
        expected: k.map,
        received: r.parsedType
      }), O;
    const s = this._def.keyType, a = this._def.valueType, i = [...r.data.entries()].map(([o, c], l) => ({
      key: s._parse(new xe(r, o, r.path, [l, "key"])),
      value: a._parse(new xe(r, c, r.path, [l, "value"]))
    }));
    if (r.common.async) {
      const o = /* @__PURE__ */ new Map();
      return Promise.resolve().then(async () => {
        for (const c of i) {
          const l = await c.key, p = await c.value;
          if (l.status === "aborted" || p.status === "aborted")
            return O;
          (l.status === "dirty" || p.status === "dirty") && t.dirty(), o.set(l.value, p.value);
        }
        return { status: t.value, value: o };
      });
    } else {
      const o = /* @__PURE__ */ new Map();
      for (const c of i) {
        const l = c.key, p = c.value;
        if (l.status === "aborted" || p.status === "aborted")
          return O;
        (l.status === "dirty" || p.status === "dirty") && t.dirty(), o.set(l.value, p.value);
      }
      return { status: t.value, value: o };
    }
  }
}
os.create = (n, e, t) => new os({
  valueType: e,
  keyType: n,
  typeName: N.ZodMap,
  ...P(t)
});
class jt extends M {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== k.set)
      return b(r, {
        code: v.invalid_type,
        expected: k.set,
        received: r.parsedType
      }), O;
    const s = this._def;
    s.minSize !== null && r.data.size < s.minSize.value && (b(r, {
      code: v.too_small,
      minimum: s.minSize.value,
      type: "set",
      inclusive: !0,
      exact: !1,
      message: s.minSize.message
    }), t.dirty()), s.maxSize !== null && r.data.size > s.maxSize.value && (b(r, {
      code: v.too_big,
      maximum: s.maxSize.value,
      type: "set",
      inclusive: !0,
      exact: !1,
      message: s.maxSize.message
    }), t.dirty());
    const a = this._def.valueType;
    function i(c) {
      const l = /* @__PURE__ */ new Set();
      for (const p of c) {
        if (p.status === "aborted")
          return O;
        p.status === "dirty" && t.dirty(), l.add(p.value);
      }
      return { status: t.value, value: l };
    }
    const o = [...r.data.values()].map((c, l) => a._parse(new xe(r, c, r.path, l)));
    return r.common.async ? Promise.all(o).then((c) => i(c)) : i(o);
  }
  min(e, t) {
    return new jt({
      ...this._def,
      minSize: { value: e, message: I.toString(t) }
    });
  }
  max(e, t) {
    return new jt({
      ...this._def,
      maxSize: { value: e, message: I.toString(t) }
    });
  }
  size(e, t) {
    return this.min(e, t).max(e, t);
  }
  nonempty(e) {
    return this.min(1, e);
  }
}
jt.create = (n, e) => new jt({
  valueType: n,
  minSize: null,
  maxSize: null,
  typeName: N.ZodSet,
  ...P(e)
});
class Tn extends M {
  get schema() {
    return this._def.getter();
  }
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    return this._def.getter()._parse({ data: t.data, path: t.path, parent: t });
  }
}
Tn.create = (n, e) => new Tn({
  getter: n,
  typeName: N.ZodLazy,
  ...P(e)
});
class kn extends M {
  _parse(e) {
    if (e.data !== this._def.value) {
      const t = this._getOrReturnCtx(e);
      return b(t, {
        received: t.data,
        code: v.invalid_literal,
        expected: this._def.value
      }), O;
    }
    return { status: "valid", value: e.data };
  }
  get value() {
    return this._def.value;
  }
}
kn.create = (n, e) => new kn({
  value: n,
  typeName: N.ZodLiteral,
  ...P(e)
});
function Gs(n, e) {
  return new rt({
    values: n,
    typeName: N.ZodEnum,
    ...P(e)
  });
}
class rt extends M {
  _parse(e) {
    if (typeof e.data != "string") {
      const t = this._getOrReturnCtx(e), r = this._def.values;
      return b(t, {
        expected: F.joinValues(r),
        received: t.parsedType,
        code: v.invalid_type
      }), O;
    }
    if (this._cache || (this._cache = new Set(this._def.values)), !this._cache.has(e.data)) {
      const t = this._getOrReturnCtx(e), r = this._def.values;
      return b(t, {
        received: t.data,
        code: v.invalid_enum_value,
        options: r
      }), O;
    }
    return he(e.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const e = {};
    for (const t of this._def.values)
      e[t] = t;
    return e;
  }
  get Values() {
    const e = {};
    for (const t of this._def.values)
      e[t] = t;
    return e;
  }
  get Enum() {
    const e = {};
    for (const t of this._def.values)
      e[t] = t;
    return e;
  }
  extract(e, t = this._def) {
    return rt.create(e, {
      ...this._def,
      ...t
    });
  }
  exclude(e, t = this._def) {
    return rt.create(this.options.filter((r) => !e.includes(r)), {
      ...this._def,
      ...t
    });
  }
}
rt.create = Gs;
class cr extends M {
  _parse(e) {
    const t = F.getValidEnumValues(this._def.values), r = this._getOrReturnCtx(e);
    if (r.parsedType !== k.string && r.parsedType !== k.number) {
      const s = F.objectValues(t);
      return b(r, {
        expected: F.joinValues(s),
        received: r.parsedType,
        code: v.invalid_type
      }), O;
    }
    if (this._cache || (this._cache = new Set(F.getValidEnumValues(this._def.values))), !this._cache.has(e.data)) {
      const s = F.objectValues(t);
      return b(r, {
        received: r.data,
        code: v.invalid_enum_value,
        options: s
      }), O;
    }
    return he(e.data);
  }
  get enum() {
    return this._def.values;
  }
}
cr.create = (n, e) => new cr({
  values: n,
  typeName: N.ZodNativeEnum,
  ...P(e)
});
class In extends M {
  unwrap() {
    return this._def.type;
  }
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    if (t.parsedType !== k.promise && t.common.async === !1)
      return b(t, {
        code: v.invalid_type,
        expected: k.promise,
        received: t.parsedType
      }), O;
    const r = t.parsedType === k.promise ? t.data : Promise.resolve(t.data);
    return he(r.then((s) => this._def.type.parseAsync(s, {
      path: t.path,
      errorMap: t.common.contextualErrorMap
    })));
  }
}
In.create = (n, e) => new In({
  type: n,
  typeName: N.ZodPromise,
  ...P(e)
});
class st extends M {
  innerType() {
    return this._def.schema;
  }
  sourceType() {
    return this._def.schema._def.typeName === N.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
  }
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e), s = this._def.effect || null, a = {
      addIssue: (i) => {
        b(r, i), i.fatal ? t.abort() : t.dirty();
      },
      get path() {
        return r.path;
      }
    };
    if (a.addIssue = a.addIssue.bind(a), s.type === "preprocess") {
      const i = s.transform(r.data, a);
      if (r.common.async)
        return Promise.resolve(i).then(async (o) => {
          if (t.value === "aborted")
            return O;
          const c = await this._def.schema._parseAsync({
            data: o,
            path: r.path,
            parent: r
          });
          return c.status === "aborted" ? O : c.status === "dirty" || t.value === "dirty" ? Ot(c.value) : c;
        });
      {
        if (t.value === "aborted")
          return O;
        const o = this._def.schema._parseSync({
          data: i,
          path: r.path,
          parent: r
        });
        return o.status === "aborted" ? O : o.status === "dirty" || t.value === "dirty" ? Ot(o.value) : o;
      }
    }
    if (s.type === "refinement") {
      const i = (o) => {
        const c = s.refinement(o, a);
        if (r.common.async)
          return Promise.resolve(c);
        if (c instanceof Promise)
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        return o;
      };
      if (r.common.async === !1) {
        const o = this._def.schema._parseSync({
          data: r.data,
          path: r.path,
          parent: r
        });
        return o.status === "aborted" ? O : (o.status === "dirty" && t.dirty(), i(o.value), { status: t.value, value: o.value });
      } else
        return this._def.schema._parseAsync({ data: r.data, path: r.path, parent: r }).then((o) => o.status === "aborted" ? O : (o.status === "dirty" && t.dirty(), i(o.value).then(() => ({ status: t.value, value: o.value }))));
    }
    if (s.type === "transform")
      if (r.common.async === !1) {
        const i = this._def.schema._parseSync({
          data: r.data,
          path: r.path,
          parent: r
        });
        if (!It(i))
          return O;
        const o = s.transform(i.value, a);
        if (o instanceof Promise)
          throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");
        return { status: t.value, value: o };
      } else
        return this._def.schema._parseAsync({ data: r.data, path: r.path, parent: r }).then((i) => It(i) ? Promise.resolve(s.transform(i.value, a)).then((o) => ({
          status: t.value,
          value: o
        })) : O);
    F.assertNever(s);
  }
}
st.create = (n, e, t) => new st({
  schema: n,
  typeName: N.ZodEffects,
  effect: e,
  ...P(t)
});
st.createWithPreprocess = (n, e, t) => new st({
  schema: e,
  effect: { type: "preprocess", transform: n },
  typeName: N.ZodEffects,
  ...P(t)
});
class Ne extends M {
  _parse(e) {
    return this._getType(e) === k.undefined ? he(void 0) : this._def.innerType._parse(e);
  }
  unwrap() {
    return this._def.innerType;
  }
}
Ne.create = (n, e) => new Ne({
  innerType: n,
  typeName: N.ZodOptional,
  ...P(e)
});
class at extends M {
  _parse(e) {
    return this._getType(e) === k.null ? he(null) : this._def.innerType._parse(e);
  }
  unwrap() {
    return this._def.innerType;
  }
}
at.create = (n, e) => new at({
  innerType: n,
  typeName: N.ZodNullable,
  ...P(e)
});
class An extends M {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    let r = t.data;
    return t.parsedType === k.undefined && (r = this._def.defaultValue()), this._def.innerType._parse({
      data: r,
      path: t.path,
      parent: t
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
}
An.create = (n, e) => new An({
  innerType: n,
  typeName: N.ZodDefault,
  defaultValue: typeof e.default == "function" ? e.default : () => e.default,
  ...P(e)
});
class Cn extends M {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e), r = {
      ...t,
      common: {
        ...t.common,
        issues: []
      }
    }, s = this._def.innerType._parse({
      data: r.data,
      path: r.path,
      parent: {
        ...r
      }
    });
    return vn(s) ? s.then((a) => ({
      status: "valid",
      value: a.status === "valid" ? a.value : this._def.catchValue({
        get error() {
          return new Re(r.common.issues);
        },
        input: r.data
      })
    })) : {
      status: "valid",
      value: s.status === "valid" ? s.value : this._def.catchValue({
        get error() {
          return new Re(r.common.issues);
        },
        input: r.data
      })
    };
  }
  removeCatch() {
    return this._def.innerType;
  }
}
Cn.create = (n, e) => new Cn({
  innerType: n,
  typeName: N.ZodCatch,
  catchValue: typeof e.catch == "function" ? e.catch : () => e.catch,
  ...P(e)
});
class us extends M {
  _parse(e) {
    if (this._getType(e) !== k.nan) {
      const r = this._getOrReturnCtx(e);
      return b(r, {
        code: v.invalid_type,
        expected: k.nan,
        received: r.parsedType
      }), O;
    }
    return { status: "valid", value: e.data };
  }
}
us.create = (n) => new us({
  typeName: N.ZodNaN,
  ...P(n)
});
class Vs extends M {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e), r = t.data;
    return this._def.type._parse({
      data: r,
      path: t.path,
      parent: t
    });
  }
  unwrap() {
    return this._def.type;
  }
}
class Sr extends M {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.common.async)
      return (async () => {
        const a = await this._def.in._parseAsync({
          data: r.data,
          path: r.path,
          parent: r
        });
        return a.status === "aborted" ? O : a.status === "dirty" ? (t.dirty(), Ot(a.value)) : this._def.out._parseAsync({
          data: a.value,
          path: r.path,
          parent: r
        });
      })();
    {
      const s = this._def.in._parseSync({
        data: r.data,
        path: r.path,
        parent: r
      });
      return s.status === "aborted" ? O : s.status === "dirty" ? (t.dirty(), {
        status: "dirty",
        value: s.value
      }) : this._def.out._parseSync({
        data: s.value,
        path: r.path,
        parent: r
      });
    }
  }
  static create(e, t) {
    return new Sr({
      in: e,
      out: t,
      typeName: N.ZodPipeline
    });
  }
}
class En extends M {
  _parse(e) {
    const t = this._def.innerType._parse(e), r = (s) => (It(s) && (s.value = Object.freeze(s.value)), s);
    return vn(t) ? t.then((s) => r(s)) : r(t);
  }
  unwrap() {
    return this._def.innerType;
  }
}
En.create = (n, e) => new En({
  innerType: n,
  typeName: N.ZodReadonly,
  ...P(e)
});
var N;
(function(n) {
  n.ZodString = "ZodString", n.ZodNumber = "ZodNumber", n.ZodNaN = "ZodNaN", n.ZodBigInt = "ZodBigInt", n.ZodBoolean = "ZodBoolean", n.ZodDate = "ZodDate", n.ZodSymbol = "ZodSymbol", n.ZodUndefined = "ZodUndefined", n.ZodNull = "ZodNull", n.ZodAny = "ZodAny", n.ZodUnknown = "ZodUnknown", n.ZodNever = "ZodNever", n.ZodVoid = "ZodVoid", n.ZodArray = "ZodArray", n.ZodObject = "ZodObject", n.ZodUnion = "ZodUnion", n.ZodDiscriminatedUnion = "ZodDiscriminatedUnion", n.ZodIntersection = "ZodIntersection", n.ZodTuple = "ZodTuple", n.ZodRecord = "ZodRecord", n.ZodMap = "ZodMap", n.ZodSet = "ZodSet", n.ZodFunction = "ZodFunction", n.ZodLazy = "ZodLazy", n.ZodLiteral = "ZodLiteral", n.ZodEnum = "ZodEnum", n.ZodEffects = "ZodEffects", n.ZodNativeEnum = "ZodNativeEnum", n.ZodOptional = "ZodOptional", n.ZodNullable = "ZodNullable", n.ZodDefault = "ZodDefault", n.ZodCatch = "ZodCatch", n.ZodPromise = "ZodPromise", n.ZodBranded = "ZodBranded", n.ZodPipeline = "ZodPipeline", n.ZodReadonly = "ZodReadonly";
})(N || (N = {}));
const d = Oe.create, A = At.create, Rt = sr.create, L = or.create;
Ue.create;
const B = we.create, g = W.create, zs = xn.create, pe = br.create;
bn.create;
nt.create;
const ee = Sn.create, uo = Tn.create, m = kn.create, se = rt.create;
In.create;
Ne.create;
at.create;
g({
  name: d(),
  description: d().optional(),
  inputSchema: g({
    type: m("object"),
    properties: ee(d(), L()),
    required: B(d()),
    additionalProperties: Rt()
  })
});
async function co(n, e = !1) {
  const t = [], r = /* @__PURE__ */ new Set();
  for (const s of n) {
    const a = await lo(s, e), o = [...new Set(a.map((c) => c.name))].filter((c) => r.has(c));
    if (o.length > 0)
      throw new Q(`Duplicate tool names found across MCP servers: ${o.join(", ")}`);
    for (const c of a)
      r.add(c.name), t.push(c);
  }
  return t;
}
const zn = {};
async function lo(n, e) {
  return n.cacheToolsList && zn[n.name] ? zn[n.name] : Mo(async (t) => {
    const r = await n.listTools();
    t.spanData.result = r.map((a) => a.name);
    const s = r.map((a) => fo(a, n, e));
    return n.cacheToolsList && (zn[n.name] = s), s;
  }, { data: { server: n.name } });
}
async function po(n, e = !1) {
  return co(n, e);
}
function fo(n, e, t) {
  var i, o, c, l;
  async function r(p, f) {
    let h = {};
    typeof p == "string" && p ? h = JSON.parse(p) : typeof p == "object" && p != null && (h = p);
    const S = Mt();
    S && (S.spanData.mcp_data = { server: e.name });
    const x = await e.callTool(n.name, h);
    return x.length === 1 ? x[0] : x;
  }
  const s = {
    type: ((i = n.inputSchema) == null ? void 0 : i.type) ?? "object",
    properties: ((o = n.inputSchema) == null ? void 0 : o.properties) ?? {},
    required: ((c = n.inputSchema) == null ? void 0 : c.required) ?? [],
    additionalProperties: ((l = n.inputSchema) == null ? void 0 : l.additionalProperties) ?? !1
  };
  if (t || s.additionalProperties === !0)
    try {
      const p = ho(s);
      return nr({
        name: n.name,
        description: n.description || "",
        parameters: p,
        strict: !0,
        execute: r
      });
    } catch (p) {
      C.warn(`Error converting MCP schema to strict mode: ${p}`);
    }
  const a = {
    ...s,
    additionalProperties: !0
  };
  return nr({
    name: n.name,
    description: n.description || "",
    parameters: a,
    strict: !1,
    execute: r
  });
}
function ho(n) {
  const e = {
    ...n,
    additionalProperties: !1
  };
  return e.required || (e.required = []), e;
}
function mo() {
  return {};
}
var ht;
class Zn {
  constructor() {
    T(this, ht, new EventTarget());
  }
  on(e, t) {
    return u(this, ht).addEventListener(e, (r) => t(...r.detail ?? [])), this;
  }
  off(e, t) {
    return u(this, ht).removeEventListener(e, (r) => t(...r.detail ?? [])), this;
  }
  emit(e, ...t) {
    const r = new CustomEvent(e, { detail: t });
    return u(this, ht).dispatchEvent(r);
  }
  once(e, t) {
    const r = (...s) => {
      this.off(e, r), t(...s);
    };
    return this.on(e, r), this;
  }
}
ht = new WeakMap();
const Hs = crypto.randomUUID.bind(crypto), go = class {
  constructor() {
  }
  pipeTo(e, t) {
  }
  pipeThrough(e, t) {
  }
}, _o = globalThis.ReadableStream, yo = globalThis.TransformStream;
class vo {
  constructor() {
    _(this, "context", null);
  }
  run(e, t) {
    return this.context = e, t();
  }
  getStore() {
    return this.context;
  }
  enterWith(e) {
    this.context = e;
  }
}
class wo {
  constructor() {
  }
  setTimeout(e, t) {
    const r = setTimeout(e, t);
    return r.ref = typeof r.ref == "function" ? r.ref : () => r, r.unref = typeof r.unref == "function" ? r.unref : () => r, r.hasRef = typeof r.hasRef == "function" ? r.hasRef : () => !0, r.refresh = typeof r.refresh == "function" ? r.refresh : () => r, r;
  }
  clearTimeout(e) {
    window.clearTimeout(e);
  }
}
const xo = new wo();
let cs;
function be() {
  return cs ?? (cs = new vo()), cs;
}
function Zt() {
  const n = be().getStore();
  return n != null && n.trace ? n.trace : null;
}
function Mt() {
  const n = be().getStore();
  return n != null && n.span ? n.span : null;
}
function Ws(n) {
  return async () => {
    const e = Zt();
    if (!e)
      throw new Error("No trace found");
    await e.start();
    const t = await n(e);
    return await e.end(), t;
  };
}
async function bo(n, e, t = {}) {
  const r = typeof n == "string" ? Te().createTrace({
    ...t,
    name: n
  }) : n;
  return be().run({ trace: r }, Ws(e));
}
async function So(n, e = {}) {
  if (Zt())
    return await n();
  const r = Te().createTrace(e);
  return be().run({ trace: r }, Ws(n));
}
function pn(n) {
  const e = be().getStore();
  if (!e)
    throw new Error("No existing trace found");
  e.span && (e.span.previousSpan = e.previousSpan, e.previousSpan = e.span), e.span = n, be().enterWith(e);
}
function Nt() {
  var e;
  const n = be().getStore();
  n && (n.span = n.previousSpan, n.previousSpan = (e = n.previousSpan) == null ? void 0 : e.previousSpan, be().enterWith(n));
}
function ft(n) {
  const e = Mt();
  e && e.setError(n);
}
function To(n) {
  var e, t, r;
  return {
    trace: (e = n.trace) == null ? void 0 : e.clone(),
    span: (t = n.span) == null ? void 0 : t.clone(),
    previousSpan: (r = n.previousSpan) == null ? void 0 : r.clone()
  };
}
function dr(n) {
  const e = be().getStore();
  if (!e)
    throw new Error("No existing trace found");
  const t = To(e);
  return be().run(t, n);
}
class ko {
  async export(e) {
    if (Fs.disabled) {
      C.debug("Tracing is disabled. Skipping export");
      return;
    }
    for (const t of e)
      t.type === "trace" ? console.log(`[Exporter] Export trace traceId=${t.traceId} name=${t.name}`) : console.log(`[Exporter] Export span: ${JSON.stringify(t)}`);
  }
}
var Jt, mt, Bt, qt, gt, ne, Ae, Ze, Me, _t, ie, lr, pr, dt;
class Io {
  constructor(e, {
    maxQueueSize: t = 1e3,
    maxBatchSize: r = 100,
    scheduleDelay: s = 5e3,
    // 5 seconds
    exportTriggerRatio: a = 0.8
  } = {}) {
    T(this, ie);
    T(this, Jt);
    T(this, mt);
    T(this, Bt);
    T(this, qt);
    T(this, gt);
    T(this, ne, []);
    T(this, Ae);
    T(this, Ze, null);
    T(this, Me, !1);
    T(this, _t, null);
    y(this, Jt, t), y(this, mt, r), y(this, Bt, s), y(this, qt, t * a), y(this, gt, e), y(this, Ae, xo), C.debug("Automatic trace export loop is not supported in this environment. You need to manually call `getGlobalTraceProvider().forceFlush()` to export traces.");
  }
  start() {
    y(this, _t, new AbortController()), $(this, ie, pr).call(this);
  }
  async onTraceStart(e) {
    await $(this, ie, lr).call(this, e);
  }
  async onTraceEnd(e) {
  }
  async onSpanStart(e) {
  }
  async onSpanEnd(e) {
    await $(this, ie, lr).call(this, e);
  }
  async shutdown(e) {
    var t;
    for (e && u(this, Ae).setTimeout(() => {
      var r;
      (r = u(this, _t)) == null || r.abort();
    }, e), C.debug("Shutting down gracefully"); u(this, ne).length > 0; ) {
      if (C.debug(`Waiting for buffer to empty. Items left: ${u(this, ne).length}`), u(this, Me) || await $(this, ie, dt).call(this, !0), (t = u(this, _t)) != null && t.signal.aborted) {
        C.debug("Timeout reached, force flushing"), await $(this, ie, dt).call(this, !0);
        break;
      }
      await new Promise((r) => u(this, Ae).setTimeout(r, 500));
    }
    C.debug("Buffer empty. Exiting"), u(this, Ae) && u(this, Ze) && u(this, Ae).clearTimeout(u(this, Ze));
  }
  async forceFlush() {
    u(this, ne).length > 0 && await $(this, ie, dt).call(this, !0);
  }
}
Jt = new WeakMap(), mt = new WeakMap(), Bt = new WeakMap(), qt = new WeakMap(), gt = new WeakMap(), ne = new WeakMap(), Ae = new WeakMap(), Ze = new WeakMap(), Me = new WeakMap(), _t = new WeakMap(), ie = new WeakSet(), lr = async function(e) {
  if (u(this, ne).length + 1 > u(this, Jt)) {
    C.error("Dropping trace because buffer is full");
    return;
  }
  u(this, ne).push(e), u(this, ne).length > u(this, qt) && await $(this, ie, dt).call(this);
}, pr = function() {
  y(this, Ze, u(this, Ae).setTimeout(async () => {
    await $(this, ie, dt).call(this), $(this, ie, pr).call(this);
  }, u(this, Bt))), typeof u(this, Ze).unref == "function" && u(this, Ze).unref();
}, dt = async function(e = !1) {
  if (u(this, ne).length !== 0) {
    if (C.debug(`Exporting batches. Force: ${e}. Buffer size: ${u(this, ne).length}`), e || u(this, ne).length < u(this, mt)) {
      const t = [...u(this, ne)];
      y(this, ne, []), y(this, Me, !0), await u(this, gt).export(t), y(this, Me, !1);
    } else if (u(this, ne).length > 0) {
      const t = u(this, ne).splice(0, u(this, mt));
      y(this, Me, !0), await u(this, gt).export(t), y(this, Me, !1);
    }
  }
};
var ce;
class Ao {
  constructor() {
    T(this, ce, []);
  }
  start() {
    for (const e of u(this, ce))
      e.start && e.start();
  }
  addTraceProcessor(e) {
    u(this, ce).push(e);
  }
  setProcessors(e) {
    C.debug("Shutting down old processors");
    for (const t of u(this, ce))
      t.shutdown();
    y(this, ce, e);
  }
  async onTraceStart(e) {
    for (const t of u(this, ce))
      await t.onTraceStart(e);
  }
  async onTraceEnd(e) {
    for (const t of u(this, ce))
      await t.onTraceEnd(e);
  }
  async onSpanStart(e) {
    for (const t of u(this, ce))
      await t.onSpanStart(e);
  }
  async onSpanEnd(e) {
    for (const t of u(this, ce))
      await t.onSpanEnd(e);
  }
  async shutdown(e) {
    for (const t of u(this, ce))
      await t.shutdown(e);
  }
  async forceFlush() {
    for (const e of u(this, ce))
      await e.forceFlush();
  }
}
ce = new WeakMap();
let Hn = null, Wn = null;
function Co() {
  return Hn || (Hn = new ko()), Hn;
}
function Ys() {
  return Wn || (Wn = new Io(Co())), Wn;
}
function ds() {
  return (/* @__PURE__ */ new Date()).toISOString();
}
function Xs() {
  return `trace_${Hs().replace(/-/g, "")}`;
}
function Eo() {
  return `span_${Hs().replace(/-/g, "").slice(0, 24)}`;
}
function Oo(n) {
  return Object.fromEntries(Object.entries(n).filter(([e]) => !e.startsWith("_")));
}
var Gt, Vt, zt, Ht, Ge, $e, Le, Ve, Wt;
const Pr = class Pr {
  constructor(e, t) {
    _(this, "type", "trace.span");
    T(this, Gt);
    T(this, Vt);
    T(this, zt);
    T(this, Ht);
    T(this, Ge);
    T(this, $e);
    T(this, Le);
    T(this, Ve);
    T(this, Wt);
    y(this, Vt, e.traceId), y(this, zt, e.spanId ?? Eo()), y(this, Gt, e.data), y(this, Ge, t), y(this, Ht, e.parentId ?? null), y(this, Ve, e.error ?? null), y(this, $e, e.startedAt ?? null), y(this, Le, e.endedAt ?? null);
  }
  get traceId() {
    return u(this, Vt);
  }
  get spanData() {
    return u(this, Gt);
  }
  get spanId() {
    return u(this, zt);
  }
  get parentId() {
    return u(this, Ht);
  }
  get previousSpan() {
    return u(this, Wt);
  }
  set previousSpan(e) {
    y(this, Wt, e);
  }
  start() {
    if (u(this, $e)) {
      C.warn("Span already started");
      return;
    }
    y(this, $e, ds()), u(this, Ge).onSpanStart(this);
  }
  end() {
    if (u(this, Le)) {
      C.debug("Span already finished", this.spanData);
      return;
    }
    y(this, Le, ds()), u(this, Ge).onSpanEnd(this);
  }
  setError(e) {
    y(this, Ve, e);
  }
  get error() {
    return u(this, Ve);
  }
  get startedAt() {
    return u(this, $e);
  }
  get endedAt() {
    return u(this, Le);
  }
  clone() {
    var t;
    const e = new Pr({
      traceId: this.traceId,
      spanId: this.spanId,
      parentId: this.parentId ?? void 0,
      data: this.spanData,
      startedAt: u(this, $e) ?? void 0,
      endedAt: u(this, Le) ?? void 0,
      error: u(this, Ve) ?? void 0
    }, u(this, Ge));
    return e.previousSpan = (t = this.previousSpan) == null ? void 0 : t.clone(), e;
  }
  toJSON() {
    return {
      object: this.type,
      id: this.spanId,
      trace_id: this.traceId,
      parent_id: this.parentId,
      started_at: this.startedAt,
      ended_at: this.endedAt,
      span_data: Oo(this.spanData),
      error: this.error
    };
  }
};
Gt = new WeakMap(), Vt = new WeakMap(), zt = new WeakMap(), Ht = new WeakMap(), Ge = new WeakMap(), $e = new WeakMap(), Le = new WeakMap(), Ve = new WeakMap(), Wt = new WeakMap();
let $t = Pr;
class De extends $t {
  constructor(e, t) {
    super({ traceId: "no-op", spanId: "no-op", data: e }, t);
  }
  start() {
  }
  end() {
  }
  setError() {
  }
  toJSON() {
    return null;
  }
}
var yt, Ce;
const jr = class jr {
  constructor(e, t) {
    _(this, "type", "trace");
    _(this, "traceId");
    _(this, "name");
    _(this, "groupId", null);
    _(this, "metadata");
    T(this, yt);
    T(this, Ce);
    this.traceId = e.traceId ?? Xs(), this.name = e.name ?? "Agent workflow", this.groupId = e.groupId ?? null, this.metadata = e.metadata ?? {}, y(this, yt, t ?? Ys()), y(this, Ce, e.started ?? !1);
  }
  async start() {
    u(this, Ce) || (y(this, Ce, !0), await u(this, yt).onTraceStart(this));
  }
  async end() {
    u(this, Ce) && (y(this, Ce, !1), await u(this, yt).onTraceEnd(this));
  }
  clone() {
    return new jr({
      traceId: this.traceId,
      name: this.name,
      groupId: this.groupId ?? void 0,
      metadata: this.metadata,
      started: u(this, Ce)
    });
  }
  toJSON() {
    return {
      object: this.type,
      id: this.traceId,
      workflow_name: this.name,
      group_id: this.groupId,
      metadata: this.metadata
    };
  }
};
yt = new WeakMap(), Ce = new WeakMap();
let Lt = jr;
class Yn extends Lt {
  constructor() {
    super({});
  }
  async start() {
  }
  async end() {
  }
  toJSON() {
    return null;
  }
}
var K, ze, Pn, Qs;
class No {
  constructor() {
    T(this, Pn);
    T(this, K);
    T(this, ze);
    y(this, K, new Ao()), y(this, ze, Fs.disabled), $(this, Pn, Qs).call(this);
  }
  /**
   * Add a processor to the list of processors. Each processor will receive all traces/spans.
   *
   * @param processor - The processor to add.
   */
  registerProcessor(e) {
    u(this, K).addTraceProcessor(e);
  }
  /**
   * Set the list of processors. This will replace any existing processors.
   *
   * @param processors - The list of processors to set.
   */
  setProcessors(e) {
    u(this, K).setProcessors(e);
  }
  /**
   * Get the current trace.
   *
   * @returns The current trace.
   */
  getCurrentTrace() {
    return Zt();
  }
  getCurrentSpan() {
    return Mt();
  }
  setDisabled(e) {
    y(this, ze, e);
  }
  startExportLoop() {
    u(this, K).start();
  }
  createTrace(e) {
    if (u(this, ze))
      return C.debug("Tracing is disabled, Not creating trace %o", e), new Yn();
    const t = e.traceId ?? Xs(), r = e.name ?? "Agent workflow";
    return C.debug("Creating trace %s with name %s", t, r), new Lt({ ...e, name: r, traceId: t }, u(this, K));
  }
  createSpan(e, t) {
    if (u(this, ze) || e.disabled)
      return C.debug("Tracing is disabled, Not creating span %o", e), new De(e.data, u(this, K));
    let r, s;
    if (t) {
      if (t instanceof Lt) {
        if (t instanceof Yn)
          return C.debug("Parent trace is no-op, returning NoopSpan"), new De(e.data, u(this, K));
        s = t.traceId;
      } else if (t instanceof $t) {
        if (t instanceof De)
          return C.debug("Parent span is no-op, returning NoopSpan"), new De(e.data, u(this, K));
        r = t.spanId, s = t.traceId;
      }
    } else {
      const a = Zt(), i = Mt();
      if (!a)
        return C.error("No active trace. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."), new De(e.data, u(this, K));
      if (i instanceof De || a instanceof Yn)
        return C.debug(`Parent ${i} or ${a} is no-op, returning NoopSpan`), new De(e.data, u(this, K));
      s = a.traceId, i ? (C.debug("Using parent span %s", i.spanId), r = i.spanId) : C.debug("No parent span, using current trace %s", a.traceId);
    }
    return s ? (C.debug(`Creating span ${JSON.stringify(e.data)} with id ${e.spanId ?? s}`), new $t({
      ...e,
      traceId: s,
      parentId: r
    }, u(this, K))) : (C.error("No traceId found. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."), new De(e.data, u(this, K)));
  }
  async shutdown(e) {
    try {
      C.debug("Shutting down tracing provider"), await u(this, K).shutdown(e);
    } catch (t) {
      C.error("Error shutting down tracing provider %o", t);
    }
  }
  async forceFlush() {
    await u(this, K).forceFlush();
  }
}
K = new WeakMap(), ze = new WeakMap(), Pn = new WeakSet(), /** Adds listeners to `process` to ensure `shutdown` occurs before exit. */
Qs = function() {
  if (typeof process < "u" && typeof process.on == "function") {
    const e = async () => {
      const t = setTimeout(() => {
        console.warn("Cleanup timeout, forcing exit"), process.exit(1);
      }, 5e3);
      try {
        await this.shutdown();
      } finally {
        clearTimeout(t);
      }
    };
    process.on("beforeExit", e), process.on("SIGINT", async () => {
      await e(), process.exit(130);
    }), process.on("SIGTERM", async () => {
      await e(), process.exit(0);
    }), process.on("unhandledRejection", async (t, r) => {
      C.error("Unhandled rejection", t, r), await e(), process.exit(1);
    });
  }
};
let Xn;
function Te() {
  return Xn || (Xn = new No()), Xn;
}
function Mn(n) {
  return async (e, ...t) => dr(async () => {
    const r = n(...t);
    pn(r);
    try {
      return r.start(), await e(r);
    } catch (s) {
      throw r.setError({
        message: s.message,
        data: s.data
      }), s;
    } finally {
      r.end(), Nt();
    }
  });
}
function ls(n, e) {
  var t;
  return Te().createSpan({
    ...n,
    data: {
      type: "agent",
      name: ((t = n == null ? void 0 : n.data) == null ? void 0 : t.name) ?? "Agent",
      ...n == null ? void 0 : n.data
    }
  }, e);
}
function Ro(n, e) {
  var t, r;
  return Te().createSpan({
    ...n,
    data: {
      type: "function",
      input: ((t = n == null ? void 0 : n.data) == null ? void 0 : t.input) ?? "",
      output: ((r = n == null ? void 0 : n.data) == null ? void 0 : r.output) ?? "",
      ...n == null ? void 0 : n.data
    }
  }, e);
}
const ps = Mn(Ro);
function Do(n, e) {
  return Te().createSpan({
    ...n,
    data: { type: "handoff", ...n == null ? void 0 : n.data }
  }, e);
}
const Po = Mn(Do);
function jo(n, e) {
  return Te().createSpan({
    ...n,
    data: {
      type: "guardrail",
      triggered: !1,
      ...n == null ? void 0 : n.data
    }
  }, e);
}
const fs = Mn(jo);
function Zo(n, e) {
  return Te().createSpan({
    ...n,
    data: {
      type: "mcp_tools",
      ...n == null ? void 0 : n.data
    }
  }, e);
}
const Mo = Mn(Zo);
function $o(n) {
  Te().registerProcessor(n);
}
class Tr {
  on(e, t) {
    return this.eventEmitter.on(e, t), this.eventEmitter;
  }
  off(e, t) {
    return this.eventEmitter.off(e, t), this.eventEmitter;
  }
  emit(e, ...t) {
    return this.eventEmitter.emit(e, ...t);
  }
  once(e, t) {
    return this.eventEmitter.once(e, t), this.eventEmitter;
  }
}
class Lo extends Tr {
  constructor() {
    super(...arguments);
    _(this, "eventEmitter", new Zn());
  }
}
class Fo extends Tr {
  constructor() {
    super(...arguments);
    _(this, "eventEmitter", new Zn());
  }
}
function hs({ name: n, execute: e }) {
  return {
    type: "input",
    name: n,
    guardrailFunction: e,
    async run(t) {
      return {
        guardrail: { type: "input", name: n },
        output: await e(t)
      };
    }
  };
}
function fr({ name: n, execute: e }) {
  return {
    type: "output",
    name: n,
    guardrailFunction: e,
    async run(t) {
      return {
        guardrail: { type: "output", name: n },
        agent: t.agent,
        agentOutput: t.agentOutput,
        output: await e(t)
      };
    }
  };
}
function Ks(n) {
  return JSON.stringify({ assistant: n.name });
}
function Uo(n) {
  return `transfer_to_${yn(n.name)}`;
}
function Jo(n) {
  return `Handoff to the ${n.name} agent to handle the request. ${n.handoffDescription ?? ""}`;
}
class ea {
  constructor(e, t) {
    /**
     * The name of the tool that represents the handoff.
     */
    _(this, "toolName");
    /**
     * The description of the tool that represents the handoff.
     */
    _(this, "toolDescription");
    /**
     * The JSON schema for the handoff input. Can be empty if the handoff does not take an input
     */
    _(this, "inputJsonSchema", {
      type: "object",
      properties: {},
      required: [],
      additionalProperties: !1
    });
    /**
     * Whether the input JSON schema is in strict mode. We **strongly** recommend setting this to
     * true, as it increases the likelihood of correct JSON input.
     */
    _(this, "strictJsonSchema", !0);
    /**
     * The function that invokes the handoff. The parameters passed are:
     * 1. The handoff run context
     * 2. The arugments from the LLM, as a JSON string. Empty string if inputJsonSchema is empty.
     *
     * Must return an agent
     */
    _(this, "onInvokeHandoff");
    /**
     * The name of the agent that is being handed off to.
     */
    _(this, "agentName");
    /**
     * A function that filters the inputs that are passed to the next agent. By default, the new agent
     * sees the entire conversation history. In some cases, you may want to filter inputs e.g. to
     * remove older inputs, or remove tools from existing inputs.
     *
     * The function will receive the entire conversation hisstory so far, including the input item
     * that triggered the handoff and a tool call output item representing the handoff tool's output.
     *
     * You are free to modify the input history or new items as you see fit. The next agent that runs
     * will receive `handoffInputData.allItems
     */
    _(this, "inputFilter");
    /**
     * The agent that is being handed off to.
     */
    _(this, "agent");
    this.agentName = e.name, this.onInvokeHandoff = t, this.toolName = Uo(e), this.toolDescription = Jo(e), this.agent = e;
  }
  /**
   * Returns a function tool definition that can be used to invoke the handoff.
   */
  getHandoffAsFunctionTool() {
    return {
      type: "function",
      name: this.toolName,
      description: this.toolDescription,
      parameters: this.inputJsonSchema,
      strict: this.strictJsonSchema
    };
  }
}
function ta(n, e = {}) {
  let t;
  const r = !!e.onHandoff, s = !!e.inputType;
  if (!(r === s))
    throw new Q("You must provide either both `onHandoff` and `inputType` or neither.");
  async function i(c, l) {
    var p;
    if (t) {
      if (!l)
        throw ft({
          message: `Handoff function expected non empty input but got: ${l}`,
          data: {
            details: "input is empty"
          }
        }), new fe("Handoff function expected non empty input");
      try {
        const f = await t(l);
        e.onHandoff && await e.onHandoff(c, f);
      } catch (f) {
        throw ft({
          message: "Invalid JSON provided",
          data: {}
        }), C.dontLogToolData || C.error(`Invalid JSON when parsing: ${l}. Error: ${f}`), new fe("Invalid JSON provided");
      }
    } else
      await ((p = e.onHandoff) == null ? void 0 : p.call(e, c));
    return n;
  }
  const o = new ea(n, i);
  if (e.inputType) {
    const c = xr(e.inputType, o.toolName);
    o.inputJsonSchema = c.schema, o.strictJsonSchema = !0, t = c.parser;
  }
  return e.toolNameOverride && (o.toolName = e.toolNameOverride), e.toolDescriptionOverride && (o.toolDescription = e.toolDescriptionOverride), e.inputFilter && (o.inputFilter = e.inputFilter), o;
}
function On(n) {
  return n instanceof ea ? n : ta(n);
}
function Bo() {
  throw new Error("No default model provider set. Make sure to set a provider using setDefaultModelProvider before calling getDefaultModelProvider or pass an explicit provider.");
}
const te = g({
  /**
   * Additional optional provider specific data. Used for custom functionality or model provider
   * specific fields.
   */
  providerData: ee(d(), L()).optional()
}), ot = te.extend({
  /**
   * An ID to identify the item. This is optional by default. If a model provider absolutely
   * requires this field, it will be validated on the model level.
   */
  id: d().optional()
}), qo = te.extend({
  type: m("refusal"),
  /**
   * The refusal explanation from the model.
   */
  refusal: d()
}), Go = te.extend({
  type: m("output_text"),
  /**
   * The text output from the model.
   */
  text: d()
}), kr = te.extend({
  type: m("input_text"),
  /**
   * A text input for example a message from a user
   */
  text: d()
}), Vo = te.extend({
  type: m("input_image"),
  /**
   * The image input to the model. Could be a URL, base64 or an object with a file ID.
   */
  image: d().or(g({
    id: d()
  })).describe("Could be a URL, base64 or an object with a file ID.")
}), zo = te.extend({
  type: m("input_file"),
  /**
   * The file input to the model. Could be a URL, base64 or an object with a file ID.
   */
  file: d().or(g({
    id: d()
  })).describe("Contents of the file or an object with a file ID.")
}), na = te.extend({
  type: m("audio"),
  /**
   * The audio input to the model. Could be base64 encoded audio data or an object with a file ID.
   */
  audio: d().or(g({
    id: d()
  })).describe("Base64 encoded audio data or file id"),
  /**
   * The format of the audio.
   */
  format: d().nullable().optional(),
  /**
   * The transcript of the audio.
   */
  transcript: d().nullable().optional()
}), Ho = te.extend({
  type: m("image"),
  /**
   * The image input to the model. Could be base64 encoded image data or an object with a file ID.
   */
  image: d().describe("Base64 encoded image data")
}), Wo = te.extend({
  type: m("text"),
  /**
   * The text output from the model.
   */
  text: d()
}), Yo = te.extend({
  type: m("image"),
  /**
   * The image data. Could be base64 encoded image data or an object with a file ID.
   */
  data: d().describe("Base64 encoded image data"),
  /**
   * The media type of the image.
   */
  mediaType: d().describe("IANA media type of the image")
}), Xo = te.extend({
  type: m("computer_screenshot"),
  /**
   * A base64 encoded image data or a URL representing the screenshot.
   */
  data: d().describe("Base64 encoded image data or URL")
}), Qo = pe("type", [
  g({ type: m("screenshot") }),
  g({
    type: m("click"),
    x: A(),
    y: A(),
    button: se(["left", "right", "wheel", "back", "forward"])
  }),
  g({
    type: m("double_click"),
    x: A(),
    y: A()
  }),
  g({
    type: m("scroll"),
    x: A(),
    y: A(),
    scroll_x: A(),
    scroll_y: A()
  }),
  g({
    type: m("type"),
    text: d()
  }),
  g({ type: m("wait") }),
  g({
    type: m("move"),
    x: A(),
    y: A()
  }),
  g({
    type: m("keypress"),
    keys: B(d())
  }),
  g({
    type: m("drag"),
    path: B(g({ x: A(), y: A() }))
  })
]), Ko = pe("type", [
  Go,
  qo,
  kr,
  na,
  Ho
]), Ir = ot.extend({
  /**
   * Any item without a type is treated as a message
   */
  type: m("message").optional()
}), $n = Ir.extend({
  /**
   * Representing a message from the assistant (i.e. the model)
   */
  role: m("assistant"),
  /**
   * The status of the message.
   */
  status: se(["in_progress", "completed", "incomplete"]),
  /**
   * The content of the message.
   */
  content: B(Ko)
}), eu = pe("type", [
  kr,
  Vo,
  zo,
  na
]), ra = Ir.extend({
  // type: z.literal('message'),
  /**
   * Representing a message from the user
   */
  role: m("user"),
  /**
   * The content of the message.
   */
  content: B(eu).or(d())
}), sa = Ir.extend({
  // type: z.literal('message'),
  /**
   * Representing a system message to the user
   */
  role: m("system"),
  /**
   * The content of the message.
   */
  content: d()
});
pe("role", [
  sa,
  $n,
  ra
]);
const Ft = ot.extend({
  type: m("hosted_tool_call"),
  /**
   * The name of the hosted tool. For example `web_search_call` or `file_search_call`
   */
  name: d().describe("The name of the hosted tool"),
  /**
   * The arguments of the hosted tool call.
   */
  arguments: d().describe("The arguments of the hosted tool call").optional(),
  /**
   * The status of the tool call.
   */
  status: d().optional(),
  /**
   * The primary output of the tool call. Additional output might be in the `providerData` field.
   */
  output: d().optional()
}), Ut = ot.extend({
  type: m("function_call"),
  /**
   * The ID of the tool call. Required to match up the respective tool call result.
   */
  callId: d().describe("The ID of the tool call"),
  /**
   * The name of the function.
   */
  name: d().describe("The name of the function"),
  /**
   * The status of the function call.
   */
  status: se(["in_progress", "completed", "incomplete"]).optional(),
  /**
   * The arguments of the function call.
   */
  arguments: d()
}), hr = ot.extend({
  type: m("function_call_result"),
  /**
   * The name of the tool that was called
   */
  name: d().describe("The name of the tool"),
  /**
   * The ID of the tool call. Required to match up the respective tool call result.
   */
  callId: d().describe("The ID of the tool call"),
  /**
   * The status of the tool call.
   */
  status: se(["in_progress", "completed", "incomplete"]),
  /**
   * The output of the tool call.
   */
  output: pe("type", [Wo, Yo])
}), Ar = ot.extend({
  type: m("computer_call"),
  /**
   * The ID of the computer call. Required to match up the respective computer call result.
   */
  callId: d().describe("The ID of the computer call"),
  /**
   * The status of the computer call.
   */
  status: se(["in_progress", "completed", "incomplete"]),
  /**
   * The action to be performed by the computer.
   */
  action: Qo
}), tu = ot.extend({
  type: m("computer_call_result"),
  /**
   * The ID of the computer call. Required to match up the respective computer call result.
   */
  callId: d().describe("The ID of the computer call"),
  /**
   * The output of the computer call.
   */
  output: Xo
}), nu = pe("type", [
  Ar,
  Ut,
  Ft
]), Cr = te.extend({
  id: d().optional(),
  type: m("reasoning"),
  /**
   * The user facing representation of the reasoning. Additional information might be in the `providerData` field.
   */
  content: B(kr)
}), aa = ot.extend({
  type: m("unknown")
}), Er = pe("type", [
  $n,
  Ft,
  Ut,
  Ar,
  Cr,
  aa
]), ru = zs([
  ra,
  $n,
  sa,
  Ft,
  Ut,
  Ar,
  hr,
  tu,
  Cr,
  aa
]), su = g({
  requests: A().optional(),
  inputTokens: A(),
  outputTokens: A(),
  totalTokens: A(),
  inputTokensDetails: ee(d(), A()).optional(),
  outputTokensDetails: ee(d(), A()).optional()
}), ia = te.extend({
  type: m("output_text_delta"),
  /**
   * The delta text that was streamed by the modelto the user.
   */
  delta: d()
}), au = te.extend({
  type: m("response_started")
}), oa = te.extend({
  type: m("response_done"),
  /**
   * The response from the model.
   */
  response: te.extend({
    /**
     * The ID of the response.
     */
    id: d(),
    /**
     * The usage data for the response.
     */
    usage: su,
    /**
     * The output from the model.
     */
    output: B(Er)
  })
}), iu = te.extend({
  type: m("model"),
  event: L().describe("The event from the model")
});
pe("type", [
  ia,
  oa,
  au,
  iu
]);
class Ln {
  constructor(e) {
    /**
     * The number of requests made to the LLM API.
     */
    _(this, "requests");
    /**
     * The number of input tokens used across all requests.
     */
    _(this, "inputTokens");
    /**
     * The number of output tokens used across all requests.
     */
    _(this, "outputTokens");
    /**
     * The total number of tokens sent and received, across all requests.
     */
    _(this, "totalTokens");
    /**
     * Details about the input tokens used across all requests.
     */
    _(this, "inputTokensDetails", []);
    /**
     * Details about the output tokens used across all requests.
     */
    _(this, "outputTokensDetails", []);
    typeof e > "u" ? (this.requests = 0, this.inputTokens = 0, this.outputTokens = 0, this.totalTokens = 0, this.inputTokensDetails = [], this.outputTokensDetails = []) : (this.requests = (e == null ? void 0 : e.requests) ?? 1, this.inputTokens = (e == null ? void 0 : e.inputTokens) ?? 0, this.outputTokens = (e == null ? void 0 : e.outputTokens) ?? 0, this.totalTokens = (e == null ? void 0 : e.totalTokens) ?? 0, this.inputTokensDetails = e != null && e.inputTokensDetails ? [e.inputTokensDetails] : [], this.outputTokensDetails = e != null && e.outputTokensDetails ? [e.outputTokensDetails] : []);
  }
  add(e) {
    this.requests += e.requests, this.inputTokens += e.inputTokens, this.outputTokens += e.outputTokens, this.totalTokens += e.totalTokens, e.inputTokensDetails && this.inputTokensDetails.push(...e.inputTokensDetails), e.outputTokensDetails && this.outputTokensDetails.push(...e.outputTokensDetails);
  }
}
var de;
class lt {
  constructor(e = {}) {
    /**
     * The context object passed by you to the `Runner.run()`
     */
    _(this, "context");
    /**
     * The usage of the agent run so far. For streamed responses, the usage will be stale until the
     * last chunk of the stream is processed.
     */
    _(this, "usage");
    /**
     * A map of tool names to whether they have been approved.
     */
    T(this, de);
    this.context = e, this.usage = new Ln(), y(this, de, /* @__PURE__ */ new Map());
  }
  /**
   * Rebuild the approvals map from a serialized state.
   * @internal
   *
   * @param approvals - The approvals map to rebuild.
   */
  _rebuildApprovals(e) {
    y(this, de, new Map(Object.entries(e)));
  }
  /**
   * Check if a tool call has been approved.
   *
   * @param toolName - The name of the tool.
   * @param callId - The call ID of the tool call.
   * @returns `true` if the tool call has been approved, `false` if blocked and `undefined` if not yet approved or rejected.
   */
  isToolApproved({ toolName: e, callId: t }) {
    const r = u(this, de).get(e);
    if ((r == null ? void 0 : r.approved) === !0 && r.rejected === !0)
      return C.warn("Tool is permanently approved and rejected at the same time. Approval takes precedence"), !0;
    if ((r == null ? void 0 : r.approved) === !0)
      return !0;
    if ((r == null ? void 0 : r.rejected) === !0)
      return !1;
    const s = Array.isArray(r == null ? void 0 : r.approved) ? r.approved.includes(t) : !1, a = Array.isArray(r == null ? void 0 : r.rejected) ? r.rejected.includes(t) : !1;
    if (s && a)
      return C.warn(`Tool call ${t} is both approved and rejected at the same time. Approval takes precedence`), !0;
    if (s)
      return !0;
    if (a)
      return !1;
  }
  /**
   * Approve a tool call.
   *
   * @param toolName - The name of the tool.
   * @param callId - The call ID of the tool call.
   */
  approveTool(e, { alwaysApprove: t = !1 } = {}) {
    const r = e.rawItem.name;
    if (t) {
      u(this, de).set(r, {
        approved: !0,
        rejected: []
      });
      return;
    }
    const s = u(this, de).get(r) ?? {
      approved: [],
      rejected: []
    };
    if (Array.isArray(s.approved)) {
      const a = "callId" in e.rawItem ? e.rawItem.callId : e.rawItem.id;
      s.approved.push(a);
    }
    u(this, de).set(r, s);
  }
  /**
   * Reject a tool call.
   *
   * @param approvalItem - The tool approval item to reject.
   */
  rejectTool(e, { alwaysReject: t = !1 } = {}) {
    const r = e.rawItem.name;
    if (t) {
      u(this, de).set(r, {
        approved: !1,
        rejected: !0
      });
      return;
    }
    const s = u(this, de).get(r) ?? {
      approved: [],
      rejected: []
    };
    if (Array.isArray(s.rejected)) {
      const a = "callId" in e.rawItem ? e.rawItem.callId : e.rawItem.id;
      s.rejected.push(a);
    }
    u(this, de).set(r, s);
  }
  toJSON() {
    return {
      context: this.context,
      usage: this.usage,
      approvals: Object.fromEntries(u(this, de).entries())
    };
  }
}
de = new WeakMap();
class ua {
  constructor(e) {
    _(this, "state");
    this.state = e;
  }
  /**
   * The history of the agent run. This includes the input items and the new items generated during
   * the agent run.
   *
   * This can be used as inputs for the next agent run.
   */
  get history() {
    return Rn(this.input, this.newItems);
  }
  /**
   * The new items generated during the agent run. These include things like new messages, tool
   * calls and their outputs, etc.
   *
   * It does not include information about the agents and instead represents the model data.
   *
   * For the output including the agents, use the `newItems` property.
   */
  get output() {
    return Rn([], this.newItems);
  }
  /**
   * A copy of the original input items.
   */
  get input() {
    return this.state._originalInput;
  }
  /**
   * The run items generated during the agent run. This associates the model data with the agents.
   *
   * For the model data that can be used as inputs for the next agent run, use the `output` property.
   */
  get newItems() {
    return this.state._generatedItems;
  }
  /**
   * The raw LLM responses generated by the model during the agent run.
   */
  get rawResponses() {
    return this.state._modelResponses;
  }
  /**
   * The last response ID generated by the model during the agent run.
   */
  get lastResponseId() {
    const e = this.rawResponses;
    return e && e.length > 0 ? e[e.length - 1].responseId : void 0;
  }
  /**
   * The last agent that was run
   */
  get lastAgent() {
    return this.state._currentAgent;
  }
  /**
   * Guardrail results for the input messages.
   */
  get inputGuardrailResults() {
    return this.state._inputGuardrailResults;
  }
  /**
   * Guardrail results for the final output of the agent.
   */
  get outputGuardrailResults() {
    return this.state._outputGuardrailResults;
  }
  /**
   * Any interruptions that occurred during the agent run for example for tool approvals.
   */
  get interruptions() {
    var e;
    return ((e = this.state._currentStep) == null ? void 0 : e.type) === "next_step_interruption" ? this.state._currentStep.data.interruptions : [];
  }
  /**
   * The final output of the agent. If the output type was set to anything other than `text`,
   * this will be parsed either as JSON or using the Zod schema you provided.
   */
  get finalOutput() {
    var e;
    if (((e = this.state._currentStep) == null ? void 0 : e.type) === "next_step_final_output")
      return this.state._currentAgent.processFinalOutput(this.state._currentStep.output);
    C.warn("Accessed finalOutput before agent run is completed.");
  }
}
class Qn extends ua {
  constructor(e) {
    super(e);
  }
}
var Yt, vt, _e, Fe, wt, Xt, Qt, Kt;
class ou extends ua {
  constructor(t = {}) {
    super(t.state);
    /**
     * The current turn number
     */
    _(this, "currentTurn", 0);
    /**
     * The maximum number of turns that can be run
     */
    _(this, "maxTurns");
    T(this, Yt, null);
    T(this, vt);
    T(this, _e);
    T(this, Fe);
    T(this, wt);
    T(this, Xt);
    T(this, Qt);
    T(this, Kt, !1);
    y(this, vt, t.signal), u(this, vt) && u(this, vt).addEventListener("abort", async () => {
      await u(this, Fe).cancel();
    }), y(this, Fe, new _o({
      start: (r) => {
        y(this, _e, r);
      },
      cancel: () => {
        y(this, Kt, !0);
      }
    })), y(this, wt, new Promise((r, s) => {
      y(this, Xt, r), y(this, Qt, s);
    }));
  }
  /**
   * The current agent that is running
   */
  get currentAgent() {
    return this.lastAgent;
  }
  /**
   * @internal
   * Adds an item to the stream of output items
   */
  _addItem(t) {
    var r;
    this.cancelled || (r = u(this, _e)) == null || r.enqueue(t);
  }
  /**
   * @internal
   * Indicates that the stream has been completed
   */
  _done() {
    var t;
    !this.cancelled && u(this, _e) && (u(this, _e).close(), y(this, _e, void 0), (t = u(this, Xt)) == null || t.call(this));
  }
  /**
   * @internal
   * Handles an error in the stream loop.
   */
  _raiseError(t) {
    var r;
    !this.cancelled && u(this, _e) && (u(this, _e).error(t), y(this, _e, void 0)), y(this, Yt, t), (r = u(this, Qt)) == null || r.call(this, t), u(this, wt).catch((s) => {
      C.debug(`Resulted in an error: ${s}`);
    });
  }
  /**
   * Returns true if the stream has been cancelled.
   */
  get cancelled() {
    return u(this, Kt);
  }
  /**
   * Returns the underlying readable stream.
   * @returns A readable stream of the agent run.
   */
  toStream() {
    return u(this, Fe);
  }
  /**
   * Await this promise to ensure that the stream has been completed if you are not consuming the
   * stream directly.
   */
  get completed() {
    return u(this, wt);
  }
  /**
   * Error thrown during the run, if any.
   */
  get error() {
    return u(this, Yt);
  }
  toTextStream(t = {}) {
    const r = u(this, Fe).pipeThrough(new yo({
      transform(s, a) {
        if (s.type === "raw_model_stream_event" && s.data.type === "output_text_delta") {
          const i = ia.parse(s.data);
          a.enqueue(i.delta);
        }
      }
    }));
    return t.compatibleWithNodeStreams ? go.fromWeb(r) : r;
  }
  [Symbol.asyncIterator]() {
    return u(this, Fe)[Symbol.asyncIterator]();
  }
}
Yt = new WeakMap(), vt = new WeakMap(), _e = new WeakMap(), Fe = new WeakMap(), wt = new WeakMap(), Xt = new WeakMap(), Qt = new WeakMap(), Kt = new WeakMap();
function ms(n) {
  return n.type === "function" ? {
    type: "function",
    name: n.name,
    description: n.description,
    parameters: n.parameters,
    strict: n.strict
  } : n.type === "computer" ? {
    type: "computer",
    name: n.name,
    environment: n.computer.environment,
    dimensions: n.computer.dimensions
  } : {
    type: "hosted_tool",
    name: n.name,
    providerData: n.providerData
  };
}
function gs(n) {
  return {
    toolName: n.toolName,
    toolDescription: n.toolDescription,
    inputJsonSchema: n.inputJsonSchema,
    strictJsonSchema: n.strictJsonSchema
  };
}
class ut {
  constructor() {
    _(this, "type", "base_item");
    _(this, "rawItem");
  }
  toJSON() {
    return {
      type: this.type,
      rawItem: this.rawItem
    };
  }
}
class Fn extends ut {
  constructor(t, r) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "type", "message_output_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
  get content() {
    let t = "";
    for (const r of this.rawItem.content)
      r.type === "output_text" && (t += r.text);
    return t;
  }
}
class Ke extends ut {
  constructor(t, r) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "type", "tool_call_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
}
class Ct extends ut {
  constructor(t, r, s) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "output");
    _(this, "type", "tool_call_output_item");
    this.rawItem = t, this.agent = r, this.output = s;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON(),
      output: tt(this.output)
    };
  }
}
class Or extends ut {
  constructor(t, r) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "type", "reasoning_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
}
class Nr extends ut {
  constructor(t, r) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "type", "handoff_call_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
}
class Rr extends ut {
  constructor(t, r, s) {
    super();
    _(this, "rawItem");
    _(this, "sourceAgent");
    _(this, "targetAgent");
    _(this, "type", "handoff_output_item");
    this.rawItem = t, this.sourceAgent = r, this.targetAgent = s;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      sourceAgent: this.sourceAgent.toJSON(),
      targetAgent: this.targetAgent.toJSON()
    };
  }
}
class Se extends ut {
  constructor(t, r) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "type", "tool_approval_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
}
function ca(n) {
  if (n.type !== "message" || n.role !== "assistant")
    return;
  const e = n.content[n.content.length - 1];
  if (e.type === "output_text")
    return e.text;
}
function uu(n) {
  return n.output.length === 0 ? "" : ca(n.output[n.output.length - 1]) || "";
}
class cu {
  /**
   * @param data The raw responses stream events from the LLM.
   */
  constructor(e) {
    _(this, "data");
    /**
     * The type of the event.
     */
    _(this, "type", "raw_model_stream_event");
    this.data = e;
  }
}
class du {
  /**
   * @param name The name of the event.
   * @param item The item that was created.
   */
  constructor(e, t) {
    _(this, "name");
    _(this, "item");
    _(this, "type", "run_item_stream_event");
    this.name = e, this.item = t;
  }
}
class lu {
  /**
   * @param agent The new agent
   */
  constructor(e) {
    _(this, "agent");
    _(this, "type", "agent_updated_stream_event");
    this.agent = e;
  }
}
function _s(n, e, t, r) {
  var x;
  const s = [], a = [], i = [], o = [], c = [], l = [], p = new Map(r.map((w) => [w.toolName, w])), f = new Map(t.filter((w) => w.type === "function").map((w) => [w.name, w])), h = t.find((w) => w.type === "computer"), S = new Map(t.filter((w) => {
    var E;
    return w.type === "hosted_tool" && ((E = w.providerData) == null ? void 0 : E.type) === "mcp";
  }).map((w) => w).map((w) => [w.providerData.server_label, w]));
  for (const w of n.output) {
    if (w.type === "message")
      w.role === "assistant" && s.push(new Fn(w, e));
    else if (w.type === "hosted_tool_call") {
      s.push(new Ke(w, e));
      const R = w.name;
      if (l.push(R), ((x = w.providerData) == null ? void 0 : x.type) === "mcp_approval_request" || w.name === "mcp_approval_request") {
        const V = w.providerData, Y = V.server_label, oe = S.get(Y);
        if (typeof oe > "u") {
          const Et = `MCP server (${Y}) not found in Agent (${e.name})`;
          throw ft({
            message: Et,
            data: { mcp_server_label: Y }
          }), new fe(Et);
        }
        const ue = new Se({
          type: "hosted_tool_call",
          // We must use this name to align with the name sent from the servers
          name: V.name,
          id: V.id,
          status: "in_progress",
          providerData: V
        }, e);
        c.push({
          requestItem: ue,
          mcpTool: oe
        }), oe.providerData.on_approval || s.push(ue);
      }
    } else if (w.type === "reasoning")
      s.push(new Or(w, e));
    else if (w.type === "computer_call") {
      if (s.push(new Ke(w, e)), l.push("computer_use"), !h)
        throw ft({
          message: "Model produced computer action without a computer tool.",
          data: {
            agent_name: e.name
          }
        }), new fe("Model produced computer action without a computer tool.");
      o.push({
        toolCall: w,
        computer: h
      });
    }
    if (w.type !== "function_call")
      continue;
    l.push(w.name);
    const E = p.get(w.name);
    if (E)
      s.push(new Nr(w, e)), a.push({
        toolCall: w,
        handoff: E
      });
    else {
      const R = f.get(w.name);
      if (!R)
        throw ft({
          message: `Tool ${w.name} not found in agent ${e.name}.`,
          data: {
            tool_name: w.name,
            agent_name: e.name
          }
        }), new fe(`Tool ${w.name} not found in agent ${e.name}.`);
      s.push(new Ke(w, e)), i.push({
        toolCall: w,
        tool: R
      });
    }
  }
  return {
    newItems: s,
    handoffs: a,
    functions: i,
    computerActions: o,
    mcpApprovalRequests: c,
    toolsUsed: l,
    hasToolsOrApprovalsToRun() {
      return a.length > 0 || i.length > 0 || c.length > 0 || o.length > 0;
    }
  };
}
const pu = pe("type", [
  g({
    type: m("next_step_handoff"),
    newAgent: L()
  }),
  g({
    type: m("next_step_final_output"),
    output: d()
  }),
  g({
    type: m("next_step_run_again")
  }),
  g({
    type: m("next_step_interruption"),
    data: ee(d(), L())
  })
]);
class ye {
  constructor(e, t, r, s, a) {
    _(this, "originalInput");
    _(this, "modelResponse");
    _(this, "preStepItems");
    _(this, "newStepItems");
    _(this, "nextStep");
    this.originalInput = e, this.modelResponse = t, this.preStepItems = r, this.newStepItems = s, this.nextStep = a;
  }
  /**
   * The items generated during the agent run (i.e. everything generated after originalInput)
   */
  get generatedItems() {
    return this.preStepItems.concat(this.newStepItems);
  }
}
function ys(n, e, t) {
  return n.resetToolChoice && e.hasUsedTools(n) ? { ...t, toolChoice: void 0 } : t;
}
async function vs(n, e, t, r, s, a, i) {
  const o = t.filter((x) => x instanceof Se && "callId" in x.rawItem && x.rawItem.type === "function_call").map((x) => x.rawItem.callId), c = s.functions.filter((x) => o.includes(x.toolCall.callId)), l = await da(n, c, a, i), p = l.map((x) => x.runItem), f = s.mcpApprovalRequests.filter((x) => {
    var w;
    return x.requestItem.type === "tool_approval_item" && x.requestItem.rawItem.type === "hosted_tool_call" && ((w = x.requestItem.rawItem.providerData) == null ? void 0 : w.type) === "mcp_approval_request";
  });
  for (const x of f) {
    const w = x.requestItem.rawItem.id, E = i._context.isToolApproved({
      // Since this item name must be the same with the one sent from Responses API server
      toolName: x.requestItem.rawItem.name,
      callId: w
    });
    if (typeof E < "u") {
      const R = {
        approve: E,
        approval_request_id: w,
        reason: void 0
      };
      p.push(new Ke({
        type: "hosted_tool_call",
        name: "mcp_approval_response",
        providerData: R
      }, n));
    }
  }
  const h = await la(n, l, i), S = t.filter((x) => !(x instanceof Se));
  return h.isFinalOutput ? (a.emit("agent_end", i._context, n, h.finalOutput), n.emit("agent_end", i._context, h.finalOutput), new ye(e, r, S, p, {
    type: "next_step_final_output",
    output: h.finalOutput
  })) : h.isInterrupted ? new ye(e, r, S, p, {
    type: "next_step_interruption",
    data: {
      interruptions: h.interruptions
    }
  }) : new ye(e, r, S, p, { type: "next_step_run_again" });
}
async function ws(n, e, t, r, s, a, i) {
  const o = t;
  let c = s.newItems;
  const [l, p] = await Promise.all([
    da(n, s.functions, a, i),
    hu(n, s.computerActions, a, i._context)
  ]);
  if (c = c.concat(l.map((x) => x.runItem)), c = c.concat(p), s.mcpApprovalRequests.length > 0)
    for (const x of s.mcpApprovalRequests) {
      const w = x.mcpTool.providerData, E = x.requestItem.rawItem.providerData;
      if (w.on_approval) {
        const R = await w.on_approval(i._context, x.requestItem), V = {
          approve: R.approve,
          approval_request_id: E.id,
          reason: R.reason
        };
        c.push(new Ke({
          type: "hosted_tool_call",
          name: "mcp_approval_response",
          providerData: V
        }, n));
      } else {
        c.push(x.requestItem);
        const R = {
          type: "hosted_mcp_tool_approval",
          tool: x.mcpTool,
          runItem: new Se({
            type: "hosted_tool_call",
            name: E.name,
            id: E.id,
            arguments: E.arguments,
            status: "in_progress",
            providerData: E
          }, n)
        };
        l.push(R);
      }
    }
  if (s.handoffs.length > 0)
    return await mu(n, e, o, c, r, s.handoffs, a, i._context);
  const f = await la(n, l, i);
  if (f.isFinalOutput)
    return a.emit("agent_end", i._context, n, f.finalOutput), n.emit("agent_end", i._context, f.finalOutput), new ye(e, r, o, c, {
      type: "next_step_final_output",
      output: f.finalOutput
    });
  if (f.isInterrupted)
    return new ye(e, r, o, c, {
      type: "next_step_interruption",
      data: {
        interruptions: f.interruptions
      }
    });
  const h = c.filter((x) => x instanceof Fn), S = h.length > 0 ? ca(h[h.length - 1].rawItem) : void 0;
  if (!S)
    return new ye(e, r, o, c, { type: "next_step_run_again" });
  if (n.outputType === "text" && !s.hasToolsOrApprovalsToRun())
    return new ye(e, r, o, c, {
      type: "next_step_final_output",
      output: S
    });
  if (n.outputType !== "text" && S) {
    const { parser: x } = xr(n.outputType, "final_output"), [w] = await wr(() => x(S));
    if (w)
      throw ft({
        message: "Invalid output type",
        data: {
          error: String(w)
        }
      }), new fe("Invalid output type");
    return new ye(e, r, o, c, { type: "next_step_final_output", output: S });
  }
  return new ye(e, r, o, c, { type: "next_step_run_again" });
}
function Nn(n, e) {
  return {
    type: "function_call_result",
    name: n.name,
    callId: n.callId,
    status: "completed",
    output: {
      type: "text",
      text: tt(e)
    }
  };
}
async function da(n, e, t, r) {
  async function s(a) {
    let i = a.toolCall.arguments;
    if (a.tool.parameters && (et(a.tool.parameters) ? i = a.tool.parameters.parse(i) : i = JSON.parse(i)), await a.tool.needsApproval(r._context, i, a.toolCall.callId)) {
      const c = r._context.isToolApproved({
        toolName: a.tool.name,
        callId: a.toolCall.callId
      });
      if (c === !1)
        return ps(async (l) => {
          const p = "Tool execution was not approved.";
          return l.setError({
            message: p,
            data: {
              tool_name: a.tool.name,
              error: `Tool execution for ${a.toolCall.callId} was manually rejected by user.`
            }
          }), l.spanData.output = p, {
            type: "function_output",
            tool: a.tool,
            output: p,
            runItem: new Ct(Nn(a.toolCall, p), n, p)
          };
        }, {
          data: {
            name: a.tool.name
          }
        });
      if (c !== !0)
        return {
          type: "function_approval",
          tool: a.tool,
          runItem: new Se(a.toolCall, n)
        };
    }
    return ps(async (c) => {
      t.config.traceIncludeSensitiveData && (c.spanData.input = a.toolCall.arguments);
      try {
        t.emit("agent_tool_start", r._context, n, a.tool, {
          toolCall: a.toolCall
        }), n.emit("agent_tool_start", r._context, a.tool, {
          toolCall: a.toolCall
        });
        const l = await a.tool.invoke(r._context, a.toolCall.arguments), p = tt(l);
        return t.emit("agent_tool_end", r._context, n, a.tool, p, { toolCall: a.toolCall }), n.emit("agent_tool_end", r._context, a.tool, p, { toolCall: a.toolCall }), t.config.traceIncludeSensitiveData && (c.spanData.output = p), {
          type: "function_output",
          tool: a.tool,
          output: l,
          runItem: new Ct(Nn(a.toolCall, l), n, l)
        };
      } catch (l) {
        throw c.setError({
          message: "Error running tool",
          data: {
            tool_name: a.tool.name,
            error: String(l)
          }
        }), l;
      }
    }, {
      data: {
        name: a.tool.name
      }
    });
  }
  try {
    return await Promise.all(e.map(s));
  } catch (a) {
    throw new ki(`Failed to run function tools: ${a}`, a, r);
  }
}
async function fu(n, e) {
  const t = e.action;
  let r;
  switch (t.type) {
    case "click":
      await n.click(t.x, t.y, t.button);
      break;
    case "double_click":
      await n.doubleClick(t.x, t.y);
      break;
    case "drag":
      await n.drag(t.path.map((s) => [s.x, s.y]));
      break;
    case "keypress":
      await n.keypress(t.keys);
      break;
    case "move":
      await n.move(t.x, t.y);
      break;
    case "screenshot":
      r = await n.screenshot();
      break;
    case "scroll":
      await n.scroll(t.x, t.y, t.scroll_x, t.scroll_y);
      break;
    case "type":
      await n.type(t.text);
      break;
    case "wait":
      await n.wait();
      break;
  }
  if (typeof r < "u" || typeof n.screenshot == "function" && (r = await n.screenshot(), typeof r < "u"))
    return r;
  throw new Error("Computer does not implement screenshot()");
}
async function hu(n, e, t, r, s = void 0) {
  const a = s ?? C, i = [];
  for (const o of e) {
    const c = o.computer.computer, l = o.toolCall;
    t.emit("agent_tool_start", r, n, o.computer, {
      toolCall: l
    }), typeof n.emit == "function" && n.emit("agent_tool_start", r, o.computer, { toolCall: l });
    let p;
    try {
      p = await fu(c, l);
    } catch (S) {
      a.error("Failed to execute computer action:", S), p = "";
    }
    t.emit("agent_tool_end", r, n, o.computer, p, {
      toolCall: l
    }), typeof n.emit == "function" && n.emit("agent_tool_end", r, o.computer, p, {
      toolCall: l
    });
    const f = p ? `data:image/png;base64,${p}` : "", h = {
      type: "computer_call_result",
      callId: l.callId,
      output: { type: "computer_screenshot", data: f }
    };
    i.push(new Ct(h, n, f));
  }
  return i;
}
async function mu(n, e, t, r, s, a, i, o) {
  if (r = [...r], a.length === 0)
    return C.warn("Incorrectly called executeHandoffCalls with no handoffs. This should not happen. Moving on."), new ye(e, s, t, r, { type: "next_step_run_again" });
  if (a.length > 1) {
    const l = "Multiple handoffs detected, ignorning this one.";
    for (let p = 1; p < a.length; p++)
      r.push(new Ct(Nn(a[p].toolCall, l), n, l));
  }
  const c = a[0];
  return Po(async (l) => {
    const p = c.handoff, f = await p.onInvokeHandoff(o, c.toolCall.arguments);
    if (l.spanData.to_agent = f.name, a.length > 1) {
      const S = a.map((x) => x.handoff.agentName);
      l.setError({
        message: "Multiple handoffs requested",
        data: {
          requested_agents: S
        }
      });
    }
    r.push(new Rr(Nn(c.toolCall, Ks(f)), n, f)), i.emit("agent_handoff", o, n, f), n.emit("agent_handoff", o, f);
    const h = p.inputFilter ?? i.config.handoffInputFilter;
    if (h) {
      C.debug("Filtering inputs for handoff"), typeof h != "function" && l.setError({
        message: "Invalid input filter",
        data: {
          details: "not callable"
        }
      });
      const S = {
        inputHistory: Array.isArray(e) ? [...e] : e,
        preHandoffItems: [...t],
        newItems: [...r]
      }, x = h(S);
      e = x.inputHistory, t = x.preHandoffItems, r = x.newItems;
    }
    return new ye(e, s, t, r, { type: "next_step_handoff", newAgent: f });
  }, {
    data: {
      from_agent: n.name
    }
  });
}
const ln = {
  isFinalOutput: !1,
  isInterrupted: void 0
};
async function la(n, e, t) {
  if (e.length === 0)
    return ln;
  const r = e.filter((i) => i.runItem instanceof Se).map((i) => i.runItem);
  if (r.length > 0)
    return {
      isFinalOutput: !1,
      isInterrupted: !0,
      interruptions: r
    };
  if (n.toolUseBehavior === "run_llm_again")
    return ln;
  const s = e[0];
  if (n.toolUseBehavior === "stop_on_first_tool")
    return (s == null ? void 0 : s.type) === "function_output" ? {
      isFinalOutput: !0,
      isInterrupted: void 0,
      finalOutput: tt(s.output)
    } : ln;
  const a = n.toolUseBehavior;
  if (typeof a == "object") {
    const i = e.find((o) => a.stopAtToolNames.includes(o.tool.name));
    return (i == null ? void 0 : i.type) === "function_output" ? {
      isFinalOutput: !0,
      isInterrupted: void 0,
      finalOutput: tt(i.output)
    } : ln;
  }
  if (typeof a == "function")
    return a(t._context, e);
  throw new Q(`Invalid toolUseBehavior: ${a}`, t);
}
function xs(n, e) {
  for (const t of e.newStepItems) {
    let r;
    if (t instanceof Fn)
      r = "message_output_created";
    else if (t instanceof Nr)
      r = "handoff_requested";
    else if (t instanceof Rr)
      r = "handoff_occurred";
    else if (t instanceof Ke)
      r = "tool_called";
    else if (t instanceof Ct)
      r = "tool_output";
    else if (t instanceof Or)
      r = "reasoning_item_created";
    else if (t instanceof Se)
      r = "tool_approval_requested";
    else {
      C.warn("Unknown item type: ", t);
      continue;
    }
    n._addItem(new du(r, t));
  }
}
var xt;
class bs {
  constructor() {
    T(this, xt, /* @__PURE__ */ new Map());
  }
  addToolUse(e, t) {
    u(this, xt).set(e, t);
  }
  hasUsedTools(e) {
    return u(this, xt).has(e);
  }
  toJSON() {
    return Object.fromEntries(Array.from(u(this, xt).entries()).map(([e, t]) => [e.name, t]));
  }
}
xt = new WeakMap();
const fn = "1.0", gu = m(fn), ve = g({
  name: d()
}), _u = g({
  object: m("trace.span"),
  id: d(),
  trace_id: d(),
  parent_id: d().nullable(),
  started_at: d().nullable(),
  ended_at: d().nullable(),
  error: g({
    message: d(),
    data: ee(d(), L()).optional()
  }).nullable(),
  span_data: ee(d(), L())
}), pa = _u.extend({
  previous_span: uo(() => pa).optional()
}), fa = g({
  requests: A(),
  inputTokens: A(),
  outputTokens: A(),
  totalTokens: A()
}), Ss = g({
  usage: fa,
  output: B(Er),
  responseId: d().optional(),
  providerData: ee(d(), L()).optional()
}), ha = pe("type", [
  g({
    type: m("message_output_item"),
    rawItem: $n,
    agent: ve
  }),
  g({
    type: m("tool_call_item"),
    rawItem: nu.or(Ft),
    agent: ve
  }),
  g({
    type: m("tool_call_output_item"),
    rawItem: hr,
    agent: ve,
    output: d()
  }),
  g({
    type: m("reasoning_item"),
    rawItem: Cr,
    agent: ve
  }),
  g({
    type: m("handoff_call_item"),
    rawItem: Ut,
    agent: ve
  }),
  g({
    type: m("handoff_output_item"),
    rawItem: hr,
    sourceAgent: ve,
    targetAgent: ve
  }),
  g({
    type: m("tool_approval_item"),
    rawItem: Ut.or(Ft),
    agent: ve
  })
]), yu = g({
  object: m("trace"),
  id: d(),
  workflow_name: d(),
  group_id: d().nullable(),
  metadata: ee(d(), L())
}), vu = g({
  newItems: B(ha),
  toolsUsed: B(d()),
  handoffs: B(g({
    toolCall: L(),
    handoff: L()
  })),
  functions: B(g({
    toolCall: L(),
    tool: L()
  })),
  computerActions: B(g({
    toolCall: L(),
    computer: L()
  })),
  mcpApprovalRequests: B(g({
    requestItem: g({
      // protocol.HostedToolCallItem
      rawItem: g({
        type: m("hosted_tool_call"),
        name: d(),
        arguments: d().optional(),
        status: d().optional(),
        output: d().optional()
      })
    }),
    // HostedMCPTool
    mcpTool: g({
      type: m("hosted_tool"),
      name: m("hosted_mcp"),
      providerData: ee(d(), L())
    })
  })).optional()
}), ma = g({
  tripwireTriggered: Rt(),
  outputInfo: L()
}), wu = g({
  guardrail: g({
    type: m("input"),
    name: d()
  }),
  output: ma
}), xu = g({
  guardrail: g({
    type: m("output"),
    name: d()
  }),
  agentOutput: L(),
  agent: ve,
  output: ma
}), Ts = g({
  $schemaVersion: gu,
  currentTurn: A(),
  currentAgent: ve,
  originalInput: d().or(B(ru)),
  modelResponses: B(Ss),
  context: g({
    usage: fa,
    approvals: ee(d(), g({
      approved: B(d()).or(Rt()),
      rejected: B(d()).or(Rt())
    })),
    context: ee(d(), L())
  }),
  toolUseTracker: ee(d(), B(d())),
  maxTurns: A(),
  currentAgentSpan: pa.nullable().optional(),
  noActiveAgentRun: Rt(),
  inputGuardrailResults: B(wu),
  outputGuardrailResults: B(xu),
  currentStep: pu.optional(),
  lastModelResponse: Ss.optional(),
  generatedItems: B(ha),
  lastProcessedResponse: vu.optional(),
  trace: yu.nullable()
});
class qe {
  constructor(e, t, r, s) {
    /**
     * Current turn number in the conversation.
     */
    _(this, "_currentTurn", 0);
    /**
     * The agent currently handling the conversation.
     */
    _(this, "_currentAgent");
    /**
     * Original user input prior to any processing.
     */
    _(this, "_originalInput");
    /**
     * Responses from the model so far.
     */
    _(this, "_modelResponses");
    /**
     * Active tracing span for the current agent if tracing is enabled.
     */
    _(this, "_currentAgentSpan");
    /**
     * Run context tracking approvals, usage, and other metadata.
     */
    _(this, "_context");
    /**
     * Tracks what tools each agent has used.
     */
    _(this, "_toolUseTracker");
    /**
     * Items generated by the agent during the run.
     */
    _(this, "_generatedItems");
    /**
     * Maximum allowed turns before forcing termination.
     */
    _(this, "_maxTurns");
    /**
     * Whether the run has an active agent step in progress.
     */
    _(this, "_noActiveAgentRun", !0);
    /**
     * Last model response for the previous turn.
     */
    _(this, "_lastTurnResponse");
    /**
     * Results from input guardrails applied to the run.
     */
    _(this, "_inputGuardrailResults");
    /**
     * Results from output guardrails applied to the run.
     */
    _(this, "_outputGuardrailResults");
    /**
     * Next step computed for the agent to take.
     */
    _(this, "_currentStep");
    /**
     * Parsed model response after applying guardrails and tools.
     */
    _(this, "_lastProcessedResponse");
    /**
     * Trace associated with this run if tracing is enabled.
     */
    _(this, "_trace", null);
    this._context = e, this._originalInput = structuredClone(t), this._modelResponses = [], this._currentAgentSpan = void 0, this._currentAgent = r, this._toolUseTracker = new bs(), this._generatedItems = [], this._maxTurns = s, this._inputGuardrailResults = [], this._outputGuardrailResults = [], this._trace = Zt();
  }
  /**
   * Returns all interruptions if the current step is an interruption otherwise returns an empty array.
   */
  getInterruptions() {
    var e;
    return ((e = this._currentStep) == null ? void 0 : e.type) !== "next_step_interruption" ? [] : this._currentStep.data.interruptions;
  }
  /**
   * Approves a tool call requested by the agent through an interruption and approval item request.
   *
   * To approve the request use this method and then run the agent again with the same state object
   * to continue the execution.
   *
   * By default it will only approve the current tool call. To allow the tool to be used multiple
   * times throughout the run, set the `alwaysApprove` option to `true`.
   *
   * @param approvalItem - The tool call approval item to approve.
   * @param options - Options for the approval.
   */
  approve(e, t = { alwaysApprove: !1 }) {
    this._context.approveTool(e, t);
  }
  /**
   * Rejects a tool call requested by the agent through an interruption and approval item request.
   *
   * To reject the request use this method and then run the agent again with the same state object
   * to continue the execution.
   *
   * By default it will only reject the current tool call. To allow the tool to be used multiple
   * times throughout the run, set the `alwaysReject` option to `true`.
   *
   * @param approvalItem - The tool call approval item to reject.
   * @param options - Options for the rejection.
   */
  reject(e, t = { alwaysReject: !1 }) {
    this._context.rejectTool(e, t);
  }
  /**
   * Serializes the run state to a JSON object.
   *
   * This method is used to serialize the run state to a JSON object that can be used to
   * resume the run later.
   *
   * @returns The serialized run state.
   */
  toJSON() {
    var r;
    const e = {
      $schemaVersion: fn,
      currentTurn: this._currentTurn,
      currentAgent: {
        name: this._currentAgent.name
      },
      originalInput: this._originalInput,
      modelResponses: this._modelResponses.map((s) => ({
        usage: {
          requests: s.usage.requests,
          inputTokens: s.usage.inputTokens,
          outputTokens: s.usage.outputTokens,
          totalTokens: s.usage.totalTokens
        },
        output: s.output,
        responseId: s.responseId,
        providerData: s.providerData
      })),
      context: this._context.toJSON(),
      toolUseTracker: this._toolUseTracker.toJSON(),
      maxTurns: this._maxTurns,
      currentAgentSpan: (r = this._currentAgentSpan) == null ? void 0 : r.toJSON(),
      noActiveAgentRun: this._noActiveAgentRun,
      inputGuardrailResults: this._inputGuardrailResults,
      outputGuardrailResults: this._outputGuardrailResults.map((s) => ({
        ...s,
        agent: s.agent.toJSON()
      })),
      currentStep: this._currentStep,
      lastModelResponse: this._lastTurnResponse,
      generatedItems: this._generatedItems.map((s) => s.toJSON()),
      lastProcessedResponse: this._lastProcessedResponse,
      trace: this._trace ? this._trace.toJSON() : null
    }, t = Ts.safeParse(e);
    if (!t.success)
      throw new Ti(`Failed to serialize run state. ${t.error.message}`);
    return t.data;
  }
  /**
   * Serializes the run state to a string.
   *
   * This method is used to serialize the run state to a string that can be used to
   * resume the run later.
   *
   * @returns The serialized run state.
   */
  toString() {
    return JSON.stringify(this.toJSON());
  }
  /**
   * Deserializes a run state from a string.
   *
   * This method is used to deserialize a run state from a string that was serialized using the
   * `toString` method.
   */
  static async fromString(e, t) {
    var f, h, S, x, w;
    const [r, s] = await wr(() => JSON.parse(t));
    if (r)
      throw new Q(`Failed to parse run state. ${r instanceof Error ? r.message : String(r)}`);
    const a = s.$schemaVersion;
    if (!a)
      throw new Q("Run state is missing schema version");
    if (a !== fn)
      throw new Q(`Run state schema version ${a} is not supported. Please use version ${fn}`);
    const i = Ts.parse(JSON.parse(t)), o = bu(e), c = new lt(i.context.context);
    c._rebuildApprovals(i.context.approvals);
    const l = o.get(i.currentAgent.name);
    if (!l)
      throw new Q(`Agent ${i.currentAgent.name} not found`);
    const p = new qe(c, "", l, i.maxTurns);
    p._currentTurn = i.currentTurn, p._toolUseTracker = new bs();
    for (const [E, R] of Object.entries(i.toolUseTracker))
      p._toolUseTracker.addToolUse(o.get(E), R);
    if (i.currentAgentSpan) {
      i.trace || C.warn("Trace is not set, skipping tracing setup");
      const E = Te().createTrace({
        traceId: (f = i.trace) == null ? void 0 : f.id,
        name: (h = i.trace) == null ? void 0 : h.workflow_name,
        groupId: ((S = i.trace) == null ? void 0 : S.group_id) ?? void 0,
        metadata: (x = i.trace) == null ? void 0 : x.metadata
      });
      p._currentAgentSpan = ga(E, i.currentAgentSpan), p._trace = E;
    }
    return p._noActiveAgentRun = i.noActiveAgentRun, p._inputGuardrailResults = i.inputGuardrailResults, p._outputGuardrailResults = i.outputGuardrailResults.map((E) => ({
      ...E,
      agent: o.get(E.agent.name)
    })), p._currentStep = i.currentStep, p._originalInput = i.originalInput, p._modelResponses = i.modelResponses.map(ks), p._lastTurnResponse = i.lastModelResponse ? ks(i.lastModelResponse) : void 0, p._generatedItems = i.generatedItems.map((E) => _a(E, o)), p._lastProcessedResponse = i.lastProcessedResponse ? await Su(o, p._currentAgent, i.lastProcessedResponse) : void 0, ((w = i.currentStep) == null ? void 0 : w.type) === "next_step_handoff" && (p._currentStep = {
      type: "next_step_handoff",
      newAgent: o.get(i.currentStep.newAgent.name)
    }), p;
  }
}
function bu(n) {
  const e = /* @__PURE__ */ new Map(), t = [n];
  for (; t.length > 0; ) {
    const r = t.shift();
    if (!e.has(r.name)) {
      e.set(r.name, r);
      for (const s of r.handoffs)
        s instanceof it ? e.has(s.name) || t.push(s) : s.agent && (e.has(s.agent.name) || t.push(s.agent));
    }
  }
  return e;
}
function ga(n, e) {
  const t = e.span_data, r = e.previous_span ? ga(n, e.previous_span) : void 0, s = Te().createSpan({
    spanId: e.id,
    traceId: e.trace_id,
    parentId: e.parent_id ?? void 0,
    startedAt: e.started_at ?? void 0,
    endedAt: e.ended_at ?? void 0,
    data: t
  }, n);
  return s.previousSpan = r, s;
}
function ks(n) {
  const e = new Ln();
  return e.requests = n.usage.requests, e.inputTokens = n.usage.inputTokens, e.outputTokens = n.usage.outputTokens, e.totalTokens = n.usage.totalTokens, {
    usage: e,
    output: n.output.map((t) => Er.parse(t)),
    responseId: n.responseId,
    providerData: n.providerData
  };
}
function _a(n, e) {
  switch (n.type) {
    case "message_output_item":
      return new Fn(n.rawItem, e.get(n.agent.name));
    case "tool_call_item":
      return new Ke(n.rawItem, e.get(n.agent.name));
    case "tool_call_output_item":
      return new Ct(n.rawItem, e.get(n.agent.name), n.output);
    case "reasoning_item":
      return new Or(n.rawItem, e.get(n.agent.name));
    case "handoff_call_item":
      return new Nr(n.rawItem, e.get(n.agent.name));
    case "handoff_output_item":
      return new Rr(n.rawItem, e.get(n.sourceAgent.name), e.get(n.targetAgent.name));
    case "tool_approval_item":
      return new Se(n.rawItem, e.get(n.agent.name));
  }
}
async function Su(n, e, t) {
  const r = await e.getAllTools(), s = new Map(r.filter((c) => c.type === "function").map((c) => [c.name, c])), a = new Map(r.filter((c) => c.type === "computer").map((c) => [c.name, c])), i = new Map(e.handoffs.map((c) => c instanceof it ? [c.name, ta(c)] : [c.toolName, c])), o = {
    newItems: t.newItems.map((c) => _a(c, n)),
    toolsUsed: t.toolsUsed,
    handoffs: t.handoffs.map((c) => {
      if (!i.has(c.handoff.toolName))
        throw new Q(`Handoff ${c.handoff.toolName} not found`);
      return {
        toolCall: c.toolCall,
        handoff: i.get(c.handoff.toolName)
      };
    }),
    functions: await Promise.all(t.functions.map(async (c) => {
      if (!s.has(c.tool.name))
        throw new Q(`Tool ${c.tool.name} not found`);
      return {
        toolCall: c.toolCall,
        tool: s.get(c.tool.name)
      };
    })),
    computerActions: t.computerActions.map((c) => {
      const l = c.computer.name;
      if (!a.has(l))
        throw new Q(`Computer tool ${l} not found`);
      return {
        toolCall: c.toolCall,
        computer: a.get(l)
      };
    }),
    mcpApprovalRequests: (t.mcpApprovalRequests ?? []).map((c) => ({
      requestItem: new Se(c.requestItem.rawItem, e),
      mcpTool: c.mcpTool
    }))
  };
  return {
    ...o,
    hasToolsOrApprovalsToRun() {
      return o.handoffs.length > 0 || o.functions.length > 0 || o.mcpApprovalRequests.length > 0 || o.computerActions.length > 0;
    }
  };
}
const Is = 10;
function As(n, e) {
  return n ? !1 : e ? !0 : "enabled_without_data";
}
function Rn(n, e) {
  const t = e.filter((r) => r.type !== "tool_approval_item").map((r) => r.rawItem);
  return typeof n == "string" && (n = [{ type: "message", role: "user", content: n }]), [...n, ...t];
}
var re, mr, gr, _r, ya, yr;
class Tu extends Fo {
  constructor(t = {}) {
    super();
    T(this, re);
    _(this, "config");
    _(this, "inputGuardrailDefs");
    _(this, "outputGuardrailDefs");
    this.config = {
      modelProvider: t.modelProvider ?? Bo(),
      model: t.model,
      modelSettings: t.modelSettings,
      handoffInputFilter: t.handoffInputFilter,
      inputGuardrails: t.inputGuardrails,
      outputGuardrails: t.outputGuardrails,
      tracingDisabled: t.tracingDisabled ?? !1,
      traceIncludeSensitiveData: t.traceIncludeSensitiveData ?? !0,
      workflowName: t.workflowName ?? "Agent workflow",
      traceId: t.traceId,
      groupId: t.groupId,
      traceMetadata: t.traceMetadata
    }, this.inputGuardrailDefs = (t.inputGuardrails ?? []).map(hs), this.outputGuardrailDefs = (t.outputGuardrails ?? []).map(fr);
  }
  run(t, r, s = {
    stream: !1,
    context: void 0
  }) {
    return r instanceof qe && r._trace ? bo(r._trace, async () => (r._currentAgentSpan && pn(r._currentAgentSpan), s != null && s.stream ? $(this, re, yr).call(this, t, r, s) : $(this, re, mr).call(this, t, r, s))) : So(async () => s != null && s.stream ? $(this, re, yr).call(this, t, r, s) : $(this, re, mr).call(this, t, r, s), {
      traceId: this.config.traceId,
      name: this.config.workflowName,
      groupId: this.config.groupId,
      metadata: this.config.traceMetadata
    });
  }
}
re = new WeakSet(), mr = async function(t, r, s) {
  return dr(async () => {
    var i, o;
    const a = r instanceof qe ? r : new qe(s.context instanceof lt ? s.context : new lt(s.context), r, t, s.maxTurns ?? Is);
    try {
      for (; ; ) {
        let c = Cs(a._currentAgent.model, this.config.model);
        if (typeof c == "string" && (c = await this.config.modelProvider.getModel(c)), a._currentStep = a._currentStep ?? {
          type: "next_step_run_again"
        }, a._currentStep.type === "next_step_interruption") {
          if (C.debug("Continuing from interruption"), !a._lastTurnResponse || !a._lastProcessedResponse)
            throw new Q("No model response found in previous state", a);
          const l = await vs(a._currentAgent, a._originalInput, a._generatedItems, a._lastTurnResponse, a._lastProcessedResponse, this, a);
          if (a._toolUseTracker.addToolUse(a._currentAgent, a._lastProcessedResponse.toolsUsed), a._originalInput = l.originalInput, a._generatedItems = l.generatedItems, a._currentStep = l.nextStep, l.nextStep.type === "next_step_interruption")
            return new Qn(a);
          continue;
        }
        if (a._currentStep.type === "next_step_run_again") {
          const l = [];
          if (a._currentAgent.handoffs && l.push(...a._currentAgent.handoffs.map(On)), !a._currentAgentSpan) {
            const R = l.map((V) => V.agentName);
            a._currentAgentSpan = ls({
              data: {
                name: a._currentAgent.name,
                handoffs: R,
                output_type: a._currentAgent.outputSchemaName
              }
            }), a._currentAgentSpan.start(), pn(a._currentAgentSpan);
          }
          const p = await a._currentAgent.getAllTools(), f = p.map((R) => ms(R)), h = l.map((R) => gs(R));
          if (a._currentAgentSpan && (a._currentAgentSpan.spanData.tools = p.map((R) => R.name)), a._currentTurn++, a._currentTurn > a._maxTurns)
            throw (i = a._currentAgentSpan) == null || i.setError({
              message: "Max turns exceeded",
              data: { max_turns: a._maxTurns }
            }), new Vr(`Max turns (${a._maxTurns}) exceeded`, a);
          C.debug(`Running agent ${a._currentAgent.name} (turn ${a._currentTurn})`), a._currentTurn === 1 && await $(this, re, gr).call(this, a);
          const S = Rn(a._originalInput, a._generatedItems);
          a._noActiveAgentRun && (a._currentAgent.emit("agent_start", a._context, a._currentAgent), this.emit("agent_start", a._context, a._currentAgent));
          let x = {
            ...this.config.modelSettings,
            ...a._currentAgent.modelSettings
          };
          x = ys(a._currentAgent, a._toolUseTracker, x), a._lastTurnResponse = await c.getResponse({
            systemInstructions: await a._currentAgent.getSystemPrompt(a._context),
            prompt: await a._currentAgent.getPrompt(a._context),
            input: S,
            previousResponseId: s.previousResponseId,
            modelSettings: x,
            tools: f,
            outputType: Wr(a._currentAgent.outputType),
            handoffs: h,
            tracing: As(this.config.tracingDisabled, this.config.traceIncludeSensitiveData),
            signal: s.signal
          }), a._modelResponses.push(a._lastTurnResponse), a._context.usage.add(a._lastTurnResponse.usage), a._noActiveAgentRun = !1;
          const w = _s(a._lastTurnResponse, a._currentAgent, p, l);
          a._lastProcessedResponse = w;
          const E = await ws(a._currentAgent, a._originalInput, a._generatedItems, a._lastTurnResponse, a._lastProcessedResponse, this, a);
          a._toolUseTracker.addToolUse(a._currentAgent, a._lastProcessedResponse.toolsUsed), a._originalInput = E.originalInput, a._generatedItems = E.generatedItems, a._currentStep = E.nextStep;
        }
        if (a._currentStep && a._currentStep.type === "next_step_final_output")
          return await $(this, re, _r).call(this, a, a._currentStep.output), this.emit("agent_end", a._context, a._currentAgent, a._currentStep.output), a._currentAgent.emit("agent_end", a._context, a._currentStep.output), new Qn(a);
        if (a._currentStep && a._currentStep.type === "next_step_handoff")
          a._currentAgent = a._currentStep.newAgent, a._currentAgentSpan && (a._currentAgentSpan.end(), Nt(), a._currentAgentSpan = void 0), a._noActiveAgentRun = !0, a._currentStep = { type: "next_step_run_again" };
        else {
          if (a._currentStep && a._currentStep.type === "next_step_interruption")
            return new Qn(a);
          C.debug("Running next loop");
        }
      }
    } catch (c) {
      throw a._currentAgentSpan && a._currentAgentSpan.setError({
        message: "Error in agent run",
        data: { error: String(c) }
      }), c;
    } finally {
      a._currentAgentSpan && (((o = a._currentStep) == null ? void 0 : o.type) !== "next_step_interruption" && a._currentAgentSpan.end(), Nt());
    }
  });
}, gr = async function(t) {
  const r = this.inputGuardrailDefs.concat(t._currentAgent.inputGuardrails.map(hs));
  if (r.length > 0) {
    const s = {
      agent: t._currentAgent,
      input: t._originalInput,
      context: t._context
    };
    try {
      const a = await Promise.all(r.map(async (i) => fs(async (o) => {
        const c = await i.run(s);
        return o.spanData.triggered = c.output.tripwireTriggered, c;
      }, { data: { name: i.name } }, t._currentAgentSpan)));
      for (const i of a)
        if (i.output.tripwireTriggered)
          throw t._currentAgentSpan && t._currentAgentSpan.setError({
            message: "Guardrail tripwire triggered",
            data: { guardrail: i.guardrail.name }
          }), new Hr(`Input guardrail triggered: ${JSON.stringify(i.output.outputInfo)}`, i, t);
    } catch (a) {
      throw a instanceof Hr ? a : (t._currentTurn--, new zr(`Input guardrail failed to complete: ${a}`, a, t));
    }
  }
}, _r = async function(t, r) {
  const s = this.outputGuardrailDefs.concat(t._currentAgent.outputGuardrails.map(fr));
  if (s.length > 0) {
    const a = t._currentAgent.processFinalOutput(r), i = {
      agent: t._currentAgent,
      agentOutput: a,
      context: t._context,
      details: { modelResponse: t._lastTurnResponse }
    };
    try {
      const o = await Promise.all(s.map(async (c) => fs(async (l) => {
        const p = await c.run(i);
        return l.spanData.triggered = p.output.tripwireTriggered, p;
      }, { data: { name: c.name } }, t._currentAgentSpan)));
      for (const c of o)
        if (c.output.tripwireTriggered)
          throw t._currentAgentSpan && t._currentAgentSpan.setError({
            message: "Guardrail tripwire triggered",
            data: { guardrail: c.guardrail.name }
          }), new tr(`Output guardrail triggered: ${JSON.stringify(c.output.outputInfo)}`, c, t);
    } catch (o) {
      throw o instanceof tr ? o : new zr(`Output guardrail failed to complete: ${o}`, o, t);
    }
  }
}, ya = async function(t, r) {
  var s, a, i;
  try {
    for (; ; ) {
      const o = t.state._currentAgent, c = o.handoffs.map(On), l = await o.getAllTools(), p = l.map((h) => ms(h)), f = c.map((h) => gs(h));
      if (t.state._currentStep = t.state._currentStep ?? {
        type: "next_step_run_again"
      }, t.state._currentStep.type === "next_step_interruption") {
        if (C.debug("Continuing from interruption"), !t.state._lastTurnResponse || !t.state._lastProcessedResponse)
          throw new Q("No model response found in previous state", t.state);
        const h = await vs(t.state._currentAgent, t.state._originalInput, t.state._generatedItems, t.state._lastTurnResponse, t.state._lastProcessedResponse, this, t.state);
        if (xs(t, h), t.state._toolUseTracker.addToolUse(t.state._currentAgent, t.state._lastProcessedResponse.toolsUsed), t.state._originalInput = h.originalInput, t.state._generatedItems = h.generatedItems, t.state._currentStep = h.nextStep, h.nextStep.type === "next_step_interruption")
          return;
        continue;
      }
      if (t.state._currentStep.type === "next_step_run_again") {
        if (!t.state._currentAgentSpan) {
          const V = c.map((Y) => Y.agentName);
          t.state._currentAgentSpan = ls({
            data: {
              name: o.name,
              handoffs: V,
              tools: l.map((Y) => Y.name),
              output_type: o.outputSchemaName
            }
          }), t.state._currentAgentSpan.start(), pn(t.state._currentAgentSpan);
        }
        if (t.state._currentTurn++, t.state._currentTurn > t.state._maxTurns)
          throw (s = t.state._currentAgentSpan) == null || s.setError({
            message: "Max turns exceeded",
            data: { max_turns: t.state._maxTurns }
          }), new Vr(`Max turns (${t.state._maxTurns}) exceeded`, t.state);
        C.debug(`Running agent ${o.name} (turn ${t.state._currentTurn})`);
        let h = Cs(o.model, this.config.model);
        typeof h == "string" && (h = await this.config.modelProvider.getModel(h)), t.state._currentTurn === 1 && await $(this, re, gr).call(this, t.state);
        let S = {
          ...this.config.modelSettings,
          ...o.modelSettings
        };
        S = ys(o, t.state._toolUseTracker, S);
        const x = Rn(t.input, t.newItems);
        t.state._noActiveAgentRun && (o.emit("agent_start", t.state._context, o), this.emit("agent_start", t.state._context, o));
        let w;
        for await (const V of h.getStreamedResponse({
          systemInstructions: await o.getSystemPrompt(t.state._context),
          prompt: await o.getPrompt(t.state._context),
          input: x,
          previousResponseId: r.previousResponseId,
          modelSettings: S,
          tools: p,
          handoffs: f,
          outputType: Wr(o.outputType),
          tracing: As(this.config.tracingDisabled, this.config.traceIncludeSensitiveData),
          signal: r.signal
        })) {
          if (V.type === "response_done") {
            const Y = oa.parse(V);
            w = {
              usage: new Ln(Y.response.usage),
              output: Y.response.output,
              responseId: Y.response.id
            };
          }
          if (t.cancelled)
            return;
          t._addItem(new cu(V));
        }
        if (t.state._noActiveAgentRun = !1, !w)
          throw new fe("Model did not procude a final response!", t.state);
        t.state._lastTurnResponse = w, t.state._modelResponses.push(t.state._lastTurnResponse);
        const E = _s(t.state._lastTurnResponse, o, l, c);
        t.state._lastProcessedResponse = E;
        const R = await ws(o, t.state._originalInput, t.state._generatedItems, t.state._lastTurnResponse, t.state._lastProcessedResponse, this, t.state);
        xs(t, R), t.state._toolUseTracker.addToolUse(o, E.toolsUsed), t.state._originalInput = R.originalInput, t.state._generatedItems = R.generatedItems, t.state._currentStep = R.nextStep;
      }
      if (t.state._currentStep.type === "next_step_final_output") {
        await $(this, re, _r).call(this, t.state, t.state._currentStep.output);
        return;
      } else {
        if (t.state._currentStep.type === "next_step_interruption")
          return;
        t.state._currentStep.type === "next_step_handoff" ? (t.state._currentAgent = (a = t.state._currentStep) == null ? void 0 : a.newAgent, t.state._currentAgentSpan && (t.state._currentAgentSpan.end(), Nt()), t.state._currentAgentSpan = void 0, t._addItem(new lu(o)), t.state._noActiveAgentRun = !0, t.state._currentStep = {
          type: "next_step_run_again"
        }) : C.debug("Running next loop");
      }
    }
  } catch (o) {
    throw t.state._currentAgentSpan && t.state._currentAgentSpan.setError({
      message: "Error in agent run",
      data: { error: String(o) }
    }), o;
  } finally {
    t.state._currentAgentSpan && (((i = t.state._currentStep) == null ? void 0 : i.type) !== "next_step_interruption" && t.state._currentAgentSpan.end(), Nt());
  }
}, yr = async function(t, r, s) {
  return s = s ?? {}, dr(async () => {
    const a = r instanceof qe ? r : new qe(s.context instanceof lt ? s.context : new lt(s.context), r, t, s.maxTurns ?? Is), i = new ou({
      signal: s.signal,
      state: a
    });
    return i.maxTurns = s.maxTurns ?? a._maxTurns, $(this, re, ya).call(this, i, s).then(() => {
      i._done();
    }, (o) => {
      i._raiseError(o);
    }), i;
  });
};
function Cs(n, e) {
  return typeof n == "string" && n !== it.DEFAULT_MODEL_PLACEHOLDER || n ? n : e ?? n ?? it.DEFAULT_MODEL_PLACEHOLDER;
}
const pt = class pt extends Lo {
  constructor(t) {
    super();
    _(this, "name");
    _(this, "instructions");
    _(this, "prompt");
    _(this, "handoffDescription");
    _(this, "handoffs");
    _(this, "model");
    _(this, "modelSettings");
    _(this, "tools");
    _(this, "mcpServers");
    _(this, "inputGuardrails");
    _(this, "outputGuardrails");
    _(this, "outputType", "text");
    _(this, "toolUseBehavior");
    _(this, "resetToolChoice");
    if (typeof t.name != "string" || t.name.trim() === "")
      throw new Q("Agent must have a name.");
    if (this.name = t.name, this.instructions = t.instructions ?? pt.DEFAULT_MODEL_PLACEHOLDER, this.prompt = t.prompt, this.handoffDescription = t.handoffDescription ?? "", this.handoffs = t.handoffs ?? [], this.model = t.model ?? "", this.modelSettings = t.modelSettings ?? {}, this.tools = t.tools ?? [], this.mcpServers = t.mcpServers ?? [], this.inputGuardrails = t.inputGuardrails ?? [], this.outputGuardrails = t.outputGuardrails ?? [], t.outputType && (this.outputType = t.outputType), this.toolUseBehavior = t.toolUseBehavior ?? "run_llm_again", this.resetToolChoice = t.resetToolChoice ?? !0, (t.handoffOutputTypeWarningEnabled === void 0 || t.handoffOutputTypeWarningEnabled) && this.handoffs && this.outputType) {
      const r = /* @__PURE__ */ new Set([JSON.stringify(this.outputType)]);
      for (const s of this.handoffs)
        "outputType" in s && s.outputType ? r.add(JSON.stringify(s.outputType)) : "agent" in s && s.agent.outputType && r.add(JSON.stringify(s.agent.outputType));
      r.size > 1 && C.warn(`[Agent] Warning: Handoff agents have different output types: ${Array.from(r).join(", ")}. You can make it type-safe by using Agent.create({ ... }) method instead.`);
    }
  }
  /**
   * Create an Agent with handoffs and automatically infer the union type for TOutput from the handoff agents' output types.
   */
  static create(t) {
    return new pt({
      ...t,
      handoffs: t.handoffs,
      outputType: t.outputType,
      handoffOutputTypeWarningEnabled: !1
    });
  }
  /**
   * Ouput schema name
   */
  get outputSchemaName() {
    if (this.outputType === "text")
      return "text";
    if (et(this.outputType))
      return "ZodOutput";
    if (typeof this.outputType == "object")
      return this.outputType.name;
    throw new Error(`Unknown output type: ${this.outputType}`);
  }
  /**
   * Makes a copy of the agent, with the given arguments changed. For example, you could do:
   *
   * ```
   * const newAgent = agent.clone({ instructions: 'New instructions' })
   * ```
   *
   * @param config - A partial configuration to change.
   * @returns A new agent with the given changes.
   */
  clone(t) {
    return new pt({
      ...this,
      ...t
    });
  }
  /**
   * Transform this agent into a tool, callable by other agents.
   *
   * This is different from handoffs in two ways:
   * 1. In handoffs, the new agent receives the conversation history. In this tool, the new agent
   *    receives generated input.
   * 2. In handoffs, the new agent takes over the conversation. In this tool, the new agent is
   *    called as a tool, and the conversation is continued by the original agent.
   *
   * @param options - Options for the tool.
   * @returns A tool that runs the agent and returns the output text.
   */
  asTool(t) {
    const { toolName: r, toolDescription: s, customOutputExtractor: a } = t;
    return nr({
      name: r ?? yn(this.name),
      description: s ?? "",
      parameters: {
        type: "object",
        properties: {
          input: {
            type: "string"
          }
        },
        required: ["input"],
        additionalProperties: !1
      },
      strict: !0,
      execute: async (i, o) => {
        if (!Ii(i))
          throw new fe("Agent tool called with invalid input");
        const l = await new Tu().run(this, i.input, {
          context: o == null ? void 0 : o.context
        });
        return typeof a == "function" ? a(l) : uu(l.rawResponses[l.rawResponses.length - 1]);
      }
    });
  }
  /**
   * Returns the system prompt for the agent.
   *
   * If the agent has a function as its instructions, this function will be called with the
   * runContext and the agent instance.
   */
  async getSystemPrompt(t) {
    return typeof this.instructions == "function" ? await this.instructions(t, this) : this.instructions;
  }
  /**
   * Returns the prompt template for the agent, if defined.
   *
   * If the agent has a function as its prompt, this function will be called with the
   * runContext and the agent instance.
   */
  async getPrompt(t) {
    return typeof this.prompt == "function" ? await this.prompt(t, this) : this.prompt;
  }
  /**
   * Fetches the available tools from the MCP servers.
   * @returns the MCP powered tools
   */
  async getMcpTools() {
    return this.mcpServers.length > 0 ? po(this.mcpServers) : [];
  }
  /**
   * ALl agent tools, including the MCPl and function tools.
   *
   * @returns all configured tools
   */
  async getAllTools() {
    return [...await this.getMcpTools(), ...this.tools];
  }
  /**
   * Processes the final output of the agent.
   *
   * @param output - The output of the agent.
   * @returns The parsed out.
   */
  processFinalOutput(t) {
    if (this.outputType === "text")
      return t;
    if (typeof this.outputType == "object") {
      const r = JSON.parse(t);
      return et(this.outputType) ? this.outputType.parse(r) : r;
    }
    throw new Error(`Unknown output type: ${this.outputType}`);
  }
  /**
   * Returns a JSON representation of the agent, which is serializable.
   *
   * @returns A JSON object containing the agent's name.
   */
  toJSON() {
    return {
      name: this.name
    };
  }
};
_(pt, "DEFAULT_MODEL_PLACEHOLDER", "");
let it = pt;
$o(Ys());
class Ac extends it {
  constructor(t) {
    super(t);
    /**
     * The voice intended to be used by the agent. If another agent already spoke during the
     * RealtimeSession, changing the voice during a handoff will fail.
     */
    _(this, "voice");
    this.voice = t.voice ?? "ash";
  }
}
function ku(n) {
  return {
    debounceTextLength: n.debounceTextLength ?? 100
  };
}
function Iu({ policyHint: n, ...e }) {
  const t = fr(e), r = n ?? t.name;
  return {
    ...t,
    policyHint: r,
    run: async (s) => {
      const a = await t.run(s);
      return {
        ...a,
        guardrail: { ...a.guardrail, policyHint: r }
      };
    }
  };
}
function Au(n) {
  return `
⚠️ Your last answer was blocked. 
Failed Guardrail Reason: ${n.guardrail.policyHint}. 
Failure Details: ${JSON.stringify(n.output.outputInfo ?? {})}. 
Please respond again following policy. Apologize for not being able to answer the question (while avoiding the specific reason) and divert discussion back to an approved topic immediately and not invite more discussion.
`.trim();
}
const Ie = Js("openai-agents:realtime");
g({
  itemId: d()
});
const Es = pe("role", [
  g({
    itemId: d(),
    previousItemId: d().nullable().optional(),
    type: m("message"),
    role: m("system"),
    content: B(g({ type: m("input_text"), text: d() }))
  }),
  g({
    itemId: d(),
    previousItemId: d().nullable().optional(),
    type: m("message"),
    role: m("user"),
    status: se(["in_progress", "completed"]),
    content: B(g({ type: m("input_text"), text: d() }).or(g({
      type: m("input_audio"),
      audio: d().nullable().optional(),
      transcript: d().nullable()
    })))
  }),
  g({
    itemId: d(),
    previousItemId: d().nullable().optional(),
    type: m("message"),
    role: m("assistant"),
    status: se(["in_progress", "completed", "incomplete"]),
    content: B(g({ type: m("text"), text: d() }).or(g({
      type: m("audio"),
      audio: d().nullable().optional(),
      transcript: d().nullable().optional()
    })))
  })
]), Os = g({
  itemId: d(),
  previousItemId: d().nullable().optional(),
  type: m("function_call"),
  status: se(["in_progress", "completed"]),
  arguments: d(),
  name: d(),
  output: d().nullable()
}), va = g({
  id: d().optional().nullable(),
  conversation_id: d().optional().nullable(),
  max_output_tokens: A().or(m("inf")).optional().nullable(),
  metadata: ee(d(), L()).optional().nullable(),
  modalities: B(d()).optional().nullable(),
  object: m("realtime.response").optional().nullable(),
  output: B(L()).optional().nullable(),
  output_audio_format: d().optional().nullable(),
  status: se(["completed", "incomplete", "failed", "cancelled", "in_progress"]).optional().nullable(),
  status_details: ee(d(), L()).optional().nullable(),
  usage: g({
    input_tokens: A().optional(),
    input_tokens_details: ee(d(), L()).optional().nullable(),
    output_tokens: A().optional(),
    output_tokens_details: ee(d(), L()).optional().nullable()
  }).optional().nullable(),
  voice: d().optional().nullable()
}), Cu = g({
  id: d().optional(),
  audio: d().nullable().optional(),
  text: d().nullable().optional(),
  transcript: d().nullable().optional(),
  type: zs([
    m("input_text"),
    m("input_audio"),
    m("item_reference"),
    m("text"),
    m("audio")
  ])
}), cn = g({
  id: d().optional(),
  arguments: d().optional(),
  call_id: d().optional(),
  content: B(Cu).optional(),
  name: d().optional(),
  object: m("realtime.item").optional(),
  output: d().optional(),
  role: se(["user", "assistant", "system"]).optional(),
  status: se(["completed", "incomplete", "in_progress"]).optional(),
  type: se(["message", "function_call", "function_call_output"]).optional()
}), Eu = g({
  type: m("conversation.created"),
  event_id: d(),
  conversation: g({
    id: d().optional(),
    object: m("realtime.conversation").optional()
  })
}), Ou = g({
  type: m("conversation.item.created"),
  event_id: d(),
  item: cn,
  previous_item_id: d().nullable().optional()
}), Nu = g({
  type: m("conversation.item.deleted"),
  event_id: d(),
  item_id: d()
}), Ru = g({
  type: m("conversation.item.input_audio_transcription.completed"),
  event_id: d(),
  item_id: d(),
  content_index: A(),
  transcript: d(),
  logprobs: B(L()).nullable().optional()
}), Du = g({
  type: m("conversation.item.input_audio_transcription.delta"),
  event_id: d(),
  item_id: d(),
  content_index: A().optional(),
  delta: d().optional(),
  logprobs: B(L()).nullable().optional()
}), Pu = g({
  type: m("conversation.item.input_audio_transcription.failed"),
  event_id: d(),
  item_id: d(),
  content_index: A(),
  error: g({
    code: d().optional(),
    message: d().optional(),
    param: d().optional(),
    type: d().optional()
  })
}), ju = g({
  type: m("conversation.item.retrieved"),
  event_id: d(),
  item: cn
}), Zu = g({
  type: m("conversation.item.truncated"),
  event_id: d(),
  item_id: d(),
  audio_end_ms: A(),
  content_index: A()
}), Mu = g({
  type: m("conversation.item.create"),
  item: cn,
  event_id: d().optional(),
  previous_item_id: d().nullable().optional()
}), $u = g({
  type: m("conversation.item.delete"),
  item_id: d(),
  event_id: d().optional()
}), Lu = g({
  type: m("conversation.item.retrieve"),
  item_id: d(),
  event_id: d().optional()
}), Fu = g({
  type: m("conversation.item.truncate"),
  item_id: d(),
  audio_end_ms: A(),
  content_index: A(),
  event_id: d().optional()
}), Uu = g({
  type: m("error"),
  event_id: d().optional(),
  error: L().optional()
}), Ju = g({
  type: m("input_audio_buffer.cleared"),
  event_id: d()
}), Bu = g({
  type: m("input_audio_buffer.append"),
  audio: d(),
  event_id: d().optional()
}), qu = g({
  type: m("input_audio_buffer.clear"),
  event_id: d().optional()
}), Gu = g({
  type: m("input_audio_buffer.commit"),
  event_id: d().optional()
}), Vu = g({
  type: m("input_audio_buffer.committed"),
  event_id: d(),
  item_id: d(),
  previous_item_id: d().nullable().optional()
}), zu = g({
  type: m("input_audio_buffer.speech_started"),
  event_id: d(),
  item_id: d(),
  audio_start_ms: A()
}), Hu = g({
  type: m("input_audio_buffer.speech_stopped"),
  event_id: d(),
  item_id: d(),
  audio_end_ms: A()
}), Wu = g({
  type: m("output_audio_buffer.started"),
  event_id: d()
}).passthrough(), Yu = g({
  type: m("output_audio_buffer.stopped"),
  event_id: d()
}).passthrough(), Xu = g({
  type: m("output_audio_buffer.cleared"),
  event_id: d()
}), Qu = g({
  type: m("rate_limits.updated"),
  event_id: d(),
  rate_limits: B(g({
    limit: A().optional(),
    name: se(["requests", "tokens"]).optional(),
    remaining: A().optional(),
    reset_seconds: A().optional()
  }))
}), Ku = g({
  type: m("response.audio.delta"),
  event_id: d(),
  item_id: d(),
  content_index: A(),
  delta: d(),
  output_index: A(),
  response_id: d()
}), ec = g({
  type: m("response.audio.done"),
  event_id: d(),
  item_id: d(),
  content_index: A(),
  output_index: A(),
  response_id: d()
}), tc = g({
  type: m("response.audio_transcript.delta"),
  event_id: d(),
  item_id: d(),
  content_index: A(),
  delta: d(),
  output_index: A(),
  response_id: d()
}), nc = g({
  type: m("response.audio_transcript.done"),
  event_id: d(),
  item_id: d(),
  content_index: A(),
  transcript: d(),
  output_index: A(),
  response_id: d()
}), rc = g({
  type: m("response.content_part.added"),
  event_id: d(),
  item_id: d(),
  content_index: A(),
  output_index: A(),
  response_id: d(),
  part: g({
    audio: d().optional(),
    text: d().optional(),
    transcript: d().optional(),
    type: se(["text", "audio"]).optional()
  })
}), sc = g({
  type: m("response.content_part.done"),
  event_id: d(),
  item_id: d(),
  content_index: A(),
  output_index: A(),
  response_id: d(),
  part: g({
    audio: d().optional(),
    text: d().optional(),
    transcript: d().optional(),
    type: se(["text", "audio"]).optional()
  })
}), ac = g({
  type: m("response.created"),
  event_id: d(),
  response: va
}), wa = g({
  type: m("response.done"),
  event_id: d(),
  response: va
}), ic = g({
  type: m("response.function_call_arguments.delta"),
  event_id: d(),
  item_id: d(),
  call_id: d(),
  delta: d(),
  output_index: A(),
  response_id: d()
}), oc = g({
  type: m("response.function_call_arguments.done"),
  event_id: d(),
  item_id: d(),
  call_id: d(),
  arguments: d(),
  output_index: A(),
  response_id: d()
}), uc = g({
  type: m("response.output_item.added"),
  event_id: d(),
  item: cn,
  output_index: A(),
  response_id: d()
}), cc = g({
  type: m("response.output_item.done"),
  event_id: d(),
  item: cn,
  output_index: A(),
  response_id: d()
}), dc = g({
  type: m("response.text.delta"),
  event_id: d(),
  item_id: d(),
  content_index: A(),
  delta: d(),
  output_index: A(),
  response_id: d()
}), lc = g({
  type: m("response.text.done"),
  event_id: d(),
  item_id: d(),
  content_index: A(),
  text: d(),
  output_index: A(),
  response_id: d()
}), pc = g({
  type: m("session.created"),
  event_id: d(),
  session: L()
}), fc = g({
  type: m("session.updated"),
  event_id: d(),
  session: L()
}), hc = g({
  type: m("response.cancel"),
  event_id: d().optional(),
  response_id: d().optional()
}), mc = g({
  type: m("response.create"),
  event_id: d().optional(),
  response: L().optional()
}), gc = g({
  type: m("session.update"),
  event_id: d().optional(),
  session: L()
}), _c = g({
  type: m("transcription_session.update"),
  event_id: d().optional(),
  session: L()
}), yc = g({
  type: m("transcription_session.updated"),
  event_id: d(),
  session: L()
}), vc = g({
  type: d(),
  event_id: d().optional().nullable()
}).passthrough(), wc = pe("type", [
  Eu,
  Ou,
  Nu,
  Ru,
  Du,
  Pu,
  ju,
  Zu,
  Uu,
  Ju,
  Vu,
  zu,
  Hu,
  Wu,
  Yu,
  Xu,
  Qu,
  Ku,
  ec,
  tc,
  nc,
  rc,
  sc,
  ac,
  wa,
  ic,
  oc,
  uc,
  cc,
  dc,
  lc,
  pc,
  fc,
  yc
]);
pe("type", [
  Mu,
  $u,
  Lu,
  Fu,
  Bu,
  qu,
  Gu,
  hc,
  mc,
  gc,
  _c
]);
function Dr(n) {
  const e = JSON.parse(n.data.toString()), t = wc.safeParse(e);
  if (!t.success) {
    const r = vc.safeParse(e);
    return r.success ? { data: r.data, isGeneric: !0 } : { data: null, isGeneric: !0 };
  }
  return { data: t.data, isGeneric: !1 };
}
const xc = "gpt-4o-realtime-preview", Pe = {
  voice: "ash",
  modalities: ["text", "audio"],
  inputAudioFormat: "pcm16",
  outputAudioFormat: "pcm16",
  inputAudioTranscription: {
    model: "gpt-4o-mini-transcribe"
  },
  turnDetection: {
    type: "semantic_vad"
  }
};
var He, en, le;
const Zr = class Zr extends Tr {
  constructor(t = {}) {
    super();
    T(this, He);
    T(this, en);
    T(this, le, null);
    _(this, "eventEmitter", new Zn());
    y(this, He, t.model ?? xc), y(this, en, t.apiKey);
  }
  /**
   * The current model that is being used by the transport layer.
   */
  get currentModel() {
    return u(this, He);
  }
  /**
   * The current model that is being used by the transport layer.
   * **Note**: The model cannot be changed mid conversation.
   */
  set currentModel(t) {
    y(this, He, t);
  }
  async _getApiKey(t) {
    const r = t.apiKey ?? u(this, en);
    return typeof r == "function" ? await r() : r;
  }
  _onMessage(t) {
    var a, i, o, c, l, p;
    const { data: r, isGeneric: s } = Dr(t);
    if (r !== null && (this.emit("*", r), !s)) {
      if (r.type === "error" ? this.emit("error", { type: "error", error: r }) : this.emit(r.type, r), r.type === "response.created") {
        this.emit("turn_started", {
          type: "response_started",
          providerData: {
            ...r
          }
        });
        return;
      }
      if (r.type === "response.done") {
        const f = wa.safeParse(r);
        if (!f.success) {
          Ie.error("Error parsing response done event", f.error);
          return;
        }
        const h = ((a = f.data.response.usage) == null ? void 0 : a.input_tokens) ?? 0, S = ((i = f.data.response.usage) == null ? void 0 : i.output_tokens) ?? 0, x = h + S, w = new Ln({
          inputTokens: h,
          inputTokensDetails: ((o = f.data.response.usage) == null ? void 0 : o.input_tokens_details) ?? {},
          outputTokens: S,
          outputTokensDetails: ((c = f.data.response.usage) == null ? void 0 : c.output_tokens_details) ?? {},
          totalTokens: x
        });
        this.emit("usage_update", w), this.emit("turn_done", {
          type: "response_done",
          response: {
            id: f.data.response.id ?? "",
            output: f.data.response.output ?? [],
            usage: {
              inputTokens: h,
              inputTokensDetails: ((l = f.data.response.usage) == null ? void 0 : l.input_tokens_details) ?? {},
              outputTokens: S,
              outputTokensDetails: ((p = f.data.response.usage) == null ? void 0 : p.output_tokens_details) ?? {},
              totalTokens: x
            }
          }
        });
        return;
      }
      if (r.type === "response.audio.done") {
        this.emit("audio_done");
        return;
      }
      if (r.type === "conversation.item.deleted") {
        this.emit("item_deleted", {
          itemId: r.item_id
        });
        return;
      }
      if (r.type === "conversation.item.input_audio_transcription.completed" || r.type === "conversation.item.truncated") {
        this.sendEvent({
          type: "conversation.item.retrieve",
          item_id: r.item_id
        });
        return;
      }
      if (r.type === "conversation.item.input_audio_transcription.delta" || r.type === "response.text.delta" || r.type === "response.audio_transcript.delta" || r.type === "response.function_call_arguments.delta") {
        r.type === "response.audio_transcript.delta" && this.emit("audio_transcript_delta", {
          type: "transcript_delta",
          delta: r.delta,
          itemId: r.item_id,
          responseId: r.response_id
        });
        return;
      }
      if ((r.type === "conversation.item.created" || r.type === "conversation.item.retrieved") && r.item.type === "message") {
        const f = r.type === "conversation.item.created" ? r.previous_item_id : null, h = Es.parse({
          itemId: r.item.id,
          previousItemId: f,
          type: r.item.type,
          role: r.item.role,
          content: r.item.content,
          status: r.item.status
        });
        this.emit("item_update", h);
        return;
      }
      if (r.type === "response.output_item.done" || r.type === "response.output_item.added") {
        const f = r.item;
        if (f.type === "function_call" && f.status === "completed") {
          const h = Os.parse({
            itemId: f.id,
            type: f.type,
            status: "in_progress",
            // we set it to in_progress for the UI as it will only be completed with the output
            arguments: f.arguments,
            name: f.name,
            output: null
          });
          this.emit("item_update", h), this.emit("function_call", {
            id: f.id,
            type: "function_call",
            callId: f.call_id ?? "",
            arguments: f.arguments ?? "",
            name: f.name ?? ""
          });
          return;
        }
        if (f.type === "message") {
          const h = Es.parse({
            itemId: r.item.id,
            type: r.item.type,
            role: r.item.role,
            content: r.item.content,
            status: "in_progress"
          });
          this.emit("item_update", h);
          return;
        }
      }
    }
  }
  _onError(t) {
    this.emit("error", {
      type: "error",
      error: t
    });
  }
  _onOpen() {
    this.emit("connected");
  }
  _onClose() {
    this.emit("disconnected");
  }
  /**
   * Send a message to the Realtime API. This will create a new item in the conversation and
   * trigger a response.
   *
   * @param message - The message to send.
   * @param otherEventData - Additional event data to send.
   */
  sendMessage(t, r) {
    this.sendEvent({
      type: "conversation.item.create",
      item: typeof t == "string" ? {
        type: "message",
        role: "user",
        content: [
          {
            type: "input_text",
            text: t
          }
        ]
      } : t,
      ...r
    }), this.sendEvent({
      type: "response.create"
    });
  }
  _getMergedSessionConfig(t) {
    var s;
    return {
      instructions: t.instructions,
      model: t.model ?? u(this, He) ?? Pe.model,
      voice: t.voice ?? Pe.voice,
      modalities: t.modalities ?? Pe.modalities,
      input_audio_format: t.inputAudioFormat ?? Pe.inputAudioFormat,
      output_audio_format: t.outputAudioFormat ?? Pe.outputAudioFormat,
      input_audio_transcription: t.inputAudioTranscription ?? Pe.inputAudioTranscription,
      turn_detection: Zr.buildTurnDetectionConfig(t.turnDetection) ?? Pe.turnDetection,
      tool_choice: t.toolChoice ?? Pe.toolChoice,
      tools: (s = t.tools) == null ? void 0 : s.map((a) => ({
        ...a,
        strict: void 0
      })),
      // We don't set tracing here to make sure that we don't try to override it on every
      // session.update as it might lead to errors
      ...t.providerData ?? {}
    };
  }
  static buildTurnDetectionConfig(t) {
    if (typeof t > "u")
      return;
    const { type: r, createResponse: s, create_response: a, eagerness: i, interruptResponse: o, interrupt_response: c, prefixPaddingMs: l, prefix_padding_ms: p, silenceDurationMs: f, silence_duration_ms: h, threshold: S, ...x } = t, w = {
      type: r,
      create_response: s || a,
      eagerness: i,
      interrupt_response: o || c,
      prefix_padding_ms: l || p,
      silence_duration_ms: f || h,
      threshold: S,
      ...x
    };
    return Object.keys(w).forEach((E) => {
      w[E] === void 0 && delete w[E];
    }), Object.keys(w).length > 0 ? w : void 0;
  }
  /**
   * Sets the internal tracing config. This is used to track the tracing config that has been set
   * during the session.create event.
   */
  set _tracingConfig(t) {
    y(this, le, t);
  }
  /**
   * Sets the tracing config for the session. This will send the tracing config to the Realtime API.
   *
   * @param tracingConfig - The tracing config to set. We don't support 'auto' here as the SDK will always configure a Workflow Name unless it exists
   */
  _updateTracingConfig(t) {
    var r, s, a;
    if (typeof u(this, le) > "u" && y(this, le, null), t === "auto") {
      this.sendEvent({
        type: "session.update",
        session: {
          tracing: "auto"
        }
      });
      return;
    }
    if (typeof u(this, le) != "string" && typeof t != "string") {
      Ie.warn("Tracing config is already set, skipping setting it again. This likely happens when you already set a tracing config on session creation.");
      return;
    }
    if (t === null) {
      Ie.debug("Disabling tracing for this session. It cannot be turned on for this session from this point on."), this.sendEvent({
        type: "session.update",
        session: {
          tracing: null
        }
      });
      return;
    }
    if (u(this, le) === null || typeof u(this, le) == "string") {
      this.sendEvent({
        type: "session.update",
        session: {
          tracing: t
        }
      });
      return;
    }
    if ((t == null ? void 0 : t.group_id) !== ((r = u(this, le)) == null ? void 0 : r.group_id) || (t == null ? void 0 : t.metadata) !== ((s = u(this, le)) == null ? void 0 : s.metadata) || (t == null ? void 0 : t.workflow_name) !== ((a = u(this, le)) == null ? void 0 : a.workflow_name)) {
      Ie.warn("Mismatch in tracing config. Ignoring the new tracing config. This likely happens when you already set a tracing config on session creation. Current tracing config: %s, new tracing config: %s", JSON.stringify(u(this, le)), JSON.stringify(t));
      return;
    }
    this.sendEvent({
      type: "session.update",
      session: {
        tracing: t
      }
    });
  }
  /**
   * Updates the session config. This will merge it with the current session config with the default
   * values and send it to the Realtime API.
   *
   * @param config - The session config to update.
   */
  updateSessionConfig(t) {
    const r = this._getMergedSessionConfig(t);
    this.sendEvent({
      type: "session.update",
      session: r
    });
  }
  /**
   * Send the output of a function call to the Realtime API.
   *
   * @param toolCall - The tool call to send the output for.
   * @param output - The output of the function call.
   * @param startResponse - Whether to start a new response after sending the output.
   */
  sendFunctionCallOutput(t, r, s = !0) {
    this.sendEvent({
      type: "conversation.item.create",
      item: {
        type: "function_call_output",
        output: r,
        call_id: t.callId
      }
    });
    try {
      const a = Os.parse({
        itemId: t.id,
        previousItemId: t.previousItemId,
        type: "function_call",
        status: "completed",
        arguments: t.arguments,
        name: t.name,
        output: r
      });
      this.emit("item_update", a);
    } catch (a) {
      Ie.error("Error parsing tool call item", a, t);
    }
    s && this.sendEvent({
      type: "response.create"
    });
  }
  /**
   * Send an audio buffer to the Realtime API. If `{ commit: true }` is passed, the audio buffer
   * will be committed and the model will start processing it. This is necessary if you have
   * disabled turn detection / voice activity detection (VAD).
   *
   * @param audio - The audio buffer to send.
   * @param options - The options for the audio buffer.
   */
  sendAudio(t, { commit: r = !1 } = {}) {
    this.sendEvent({
      type: "input_audio_buffer.append",
      audio: Rs(t)
    }), r && this.sendEvent({
      type: "input_audio_buffer.commit"
    });
  }
  /**
   * Reset the history of the conversation. This will create a diff between the old and new history
   * and send the necessary events to the Realtime API to update the history.
   *
   * @param oldHistory - The old history of the conversation.
   * @param newHistory - The new history of the conversation.
   */
  resetHistory(t, r) {
    const { removals: s, additions: a, updates: i } = Ea(t, r), o = new Set(s.map((l) => l.itemId));
    for (const l of i)
      o.add(l.itemId);
    if (o.size > 0)
      for (const l of o)
        this.sendEvent({
          type: "conversation.item.delete",
          item_id: l
        });
    const c = [...a, ...i];
    for (const l of c)
      if (l.type === "message") {
        const p = {
          type: "message",
          role: l.role,
          content: l.content,
          id: l.itemId
        };
        l.role !== "system" && l.status && (p.status = l.status), this.sendEvent({
          type: "conversation.item.create",
          item: p
        });
      } else l.type === "function_call" && Ie.warn("Function calls cannot be manually added or updated at the moment. Ignoring.");
  }
};
He = new WeakMap(), en = new WeakMap(), le = new WeakMap();
let Dn = Zr;
var tn, G, nn, We, rn;
class bc extends Dn {
  constructor(t = {}) {
    if (typeof RTCPeerConnection > "u")
      throw new Error("WebRTC is not supported in this environment");
    super(t);
    _(this, "options");
    T(this, tn);
    T(this, G, {
      status: "disconnected",
      peerConnection: void 0,
      dataChannel: void 0
    });
    T(this, nn);
    T(this, We, !1);
    T(this, rn, !1);
    this.options = t, y(this, tn, t.baseUrl ?? "https://api.openai.com/v1/realtime"), y(this, nn, t.useInsecureApiKey ?? !1);
  }
  /**
   * The current status of the WebRTC connection.
   */
  get status() {
    return u(this, G).status;
  }
  /**
   * The current connection state of the WebRTC connection including the peer connection and data
   * channel.
   */
  get connectionState() {
    return u(this, G);
  }
  /**
   * Whether the session is muted.
   */
  get muted() {
    return u(this, rn);
  }
  /**
   * Connect to the Realtime API. This will establish the connection to the OpenAI Realtime API
   * via WebRTC.
   *
   * If you are using a browser, the transport layer will also automatically configure the
   * microphone and audio output to be used by the session.
   *
   * @param options - The options for the connection.
   */
  async connect(t) {
    if (u(this, G).status === "connected")
      return;
    u(this, G).status === "connecting" && Ie.warn("Realtime connection already in progress. Please await original promise");
    const r = t.model ?? this.currentModel;
    this.currentModel = r;
    const s = t.url ?? u(this, tn), a = await this._getApiKey(t), i = typeof a == "string" && a.startsWith("ek_");
    if (!u(this, nn) && !i)
      throw new Q("Using the WebRTC connection in a browser environment requires an insecure API key. Please use a WebSocket connection instead or set the useInsecureApiKey option to true.");
    return new Promise(async (o, c) => {
      try {
        const l = {
          ...t.initialSessionConfig || {},
          model: this.currentModel
        }, p = new URL(s);
        let f = new RTCPeerConnection();
        const h = f.createDataChannel("oai-events");
        y(this, G, {
          status: "connecting",
          peerConnection: f,
          dataChannel: h
        }), this.emit("connection_change", u(this, G).status), h.addEventListener("open", () => {
          y(this, G, {
            status: "connected",
            peerConnection: f,
            dataChannel: h
          }), this.updateSessionConfig(l), this.emit("connection_change", u(this, G).status), this._onOpen(), o();
        }), h.addEventListener("error", (oe) => {
          this.close(), this._onError(oe), c(oe);
        }), h.addEventListener("message", (oe) => {
          this._onMessage(oe);
          const { data: ue, isGeneric: Et } = Dr(oe);
          !ue || Et || (ue.type === "response.created" ? y(this, We, !0) : ue.type === "response.done" && y(this, We, !1), ue.type === "session.created" && (this._tracingConfig = ue.session.tracing, this._updateTracingConfig(l.tracing ?? "auto")));
        });
        const S = this.options.audioElement ?? document.createElement("audio");
        S.autoplay = !0, f.ontrack = (oe) => {
          S.srcObject = oe.streams[0];
        };
        const x = this.options.mediaStream ?? await navigator.mediaDevices.getUserMedia({
          audio: !0
        });
        f.addTrack(x.getAudioTracks()[0]), this.options.changePeerConnection && (f = await this.options.changePeerConnection(f), y(this, G, { ...u(this, G), peerConnection: f }));
        const w = await f.createOffer();
        if (await f.setLocalDescription(w), !w.sdp)
          throw new Error("Failed to create offer");
        const E = {
          ...this._getMergedSessionConfig(l),
          model: this.currentModel
        }, R = new FormData();
        R.append("sdp", w.sdp), R.append("session", JSON.stringify(E));
        const Y = {
          type: "answer",
          sdp: await (await fetch(p, {
            method: "POST",
            body: R,
            headers: {
              Authorization: `Bearer ${a}`,
              "X-OpenAI-Agents-SDK": Ra["X-OpenAI-Agents-SDK"]
            }
          })).text()
        };
        await f.setRemoteDescription(Y);
      } catch (l) {
        this.close(), this._onError(l), c(l);
      }
    });
  }
  /**
   * Send an event to the Realtime API. This will stringify the event and send it directly to the
   * API. This can be used if you want to take control over the connection and send events manually.
   *
   * @param event - The event to send.
   */
  sendEvent(t) {
    if (!u(this, G).dataChannel || u(this, G).dataChannel.readyState !== "open")
      throw new Error("WebRTC data channel is not connected. Make sure you call `connect()` before sending events.");
    u(this, G).dataChannel.send(JSON.stringify(t));
  }
  /**
   * Mute or unmute the session.
   * @param muted - Whether to mute the session.
   */
  mute(t) {
    y(this, rn, t), u(this, G).peerConnection && u(this, G).peerConnection.getSenders().forEach((s) => {
      s.track && (s.track.enabled = !t);
    });
  }
  /**
   * Close the connection to the Realtime API and disconnects the underlying WebRTC connection.
   */
  close() {
    if (u(this, G).dataChannel && u(this, G).dataChannel.close(), u(this, G).peerConnection) {
      const t = u(this, G).peerConnection;
      t.getSenders().forEach((r) => {
        var s;
        (s = r.track) == null || s.stop();
      }), t.close();
    }
    u(this, G).status !== "disconnected" && (y(this, G, {
      status: "disconnected",
      peerConnection: void 0,
      dataChannel: void 0
    }), this.emit("connection_change", u(this, G).status), this._onClose());
  }
  /**
   * Interrupt the current response if one is ongoing and clear the audio buffer so that the agent
   * stops talking.
   */
  interrupt() {
    u(this, We) && (this.sendEvent({
      type: "response.cancel"
    }), y(this, We, !1)), this.sendEvent({
      type: "output_audio_buffer.clear"
    });
  }
}
tn = new WeakMap(), G = new WeakMap(), nn = new WeakMap(), We = new WeakMap(), rn = new WeakMap();
const Sc = globalThis.WebSocket;
var Ye, bt, X, sn, Ee, Xe, Qe, jn, xa;
class Tc extends Dn {
  constructor(t = {}) {
    super(t);
    T(this, jn);
    T(this, Ye);
    T(this, bt);
    T(this, X, {
      status: "disconnected",
      websocket: void 0
    });
    T(this, sn);
    T(this, Ee);
    T(this, Xe);
    /**
     * Timestamp maintained by the transport layer to aid with the calculation of the elapsed time
     * since the response started to compute the right interruption time.
     *
     * Mostly internal but might be used by extended transport layers for their interruption
     * calculation.
     */
    _(this, "_firstAudioTimestamp");
    _(this, "_audioLengthMs", 0);
    T(this, Qe, !1);
    y(this, bt, `wss://api.openai.com/v1/realtime?model=${this.currentModel}`), y(this, sn, t.useInsecureApiKey ?? !1);
  }
  /**
   * The current status of the WebSocket connection.
   */
  get status() {
    return u(this, X).status;
  }
  /**
   * The current connection state of the WebSocket connection.
   */
  get connectionState() {
    return u(this, X);
  }
  /**
   * Always returns `null` as the WebSocket transport layer does not handle muting. Instead,
   * this should be handled by the client by not triggering the `sendAudio` method.
   */
  get muted() {
    return null;
  }
  /**
   * The current item ID of the ongoing response.
   */
  get currentItemId() {
    return u(this, Ee);
  }
  /**
   * Triggers the `audio` event that a client might listen to to receive the audio buffer.
   * Protected for you to be able to override and disable emitting this event in case your extended
   * transport layer handles audio internally.
   *
   * @param audioEvent - The audio event to emit.
   */
  _onAudio(t) {
    this.emit("audio", t);
  }
  async connect(t) {
    const r = t.model ?? this.currentModel;
    this.currentModel = r, y(this, Ye, await this._getApiKey(t)), y(this, bt, t.url ?? `wss://api.openai.com/v1/realtime?model=${this.currentModel}`);
    const s = {
      ...t.initialSessionConfig || {},
      model: this.currentModel
    };
    await new Promise((a, i) => {
      try {
        $(this, jn, xa).call(this, a, i, s);
      } catch (o) {
        i(o);
      }
    }), await this.updateSessionConfig(s);
  }
  /**
   * Send an event to the Realtime API. This will stringify the event and send it directly to the
   * API. This can be used if you want to take control over the connection and send events manually.
   *
   * @param event - The event to send.
   */
  sendEvent(t) {
    if (!u(this, X).websocket)
      throw new Error("WebSocket is not connected. Make sure you call `connect()` before sending events.");
    u(this, X).websocket.send(JSON.stringify(t));
  }
  /**
   * Close the WebSocket connection.
   *
   * This will also reset any internal connection tracking used for interruption handling.
   */
  close() {
    var t;
    (t = u(this, X).websocket) == null || t.close(), y(this, Ee, void 0), this._firstAudioTimestamp = void 0, this._audioLengthMs = 0, y(this, Xe, void 0);
  }
  /**
   * Will throw an error as the WebSocket transport layer does not support muting.
   */
  mute(t) {
    throw new Error("Mute is not supported for the WebSocket transport. You have to mute the audio input yourself.");
  }
  /**
   * Send an audio buffer to the Realtime API. This is used for your client to send audio to the
   * model to respond.
   *
   * @param audio - The audio buffer to send.
   * @param options - The options for the audio buffer.
   */
  sendAudio(t, r = {}) {
    u(this, X).status === "connected" && super.sendAudio(t, r);
  }
  /**
   * Send a cancel response event to the Realtime API. This is used to cancel an ongoing
   *  response that the model is currently generating.
   */
  _cancelResponse() {
    u(this, Qe) && (this.sendEvent({
      type: "response.cancel"
    }), y(this, Qe, !1));
  }
  /**
   * Do NOT call this method directly. Call `interrupt()` instead for proper interruption handling.
   *
   * This method is used to send the right events to the API to inform the model that the user has
   * interrupted the response. It might be overridden/extended by an extended transport layer. See
   * the `TwilioRealtimeTransportLayer` for an example.
   *
   * @param elapsedTime - The elapsed time since the response started.
   */
  _interrupt(t) {
    this.emit("audio_interrupted"), this.sendEvent({
      type: "conversation.item.truncate",
      item_id: u(this, Ee),
      content_index: u(this, Xe),
      audio_end_ms: t
    });
  }
  /**
   * Interrupt the ongoing response. This method is triggered automatically by the client when
   * voice activity detection (VAD) is enabled (default) as well as when an output guardrail got
   * triggered.
   *
   * You can also call this method directly if you want to interrupt the conversation for example
   * based on an event in the client.
   */
  interrupt() {
    if (!u(this, Ee) || typeof this._firstAudioTimestamp != "number")
      return;
    this._cancelResponse();
    const t = Date.now() - this._firstAudioTimestamp;
    t >= 0 && t < this._audioLengthMs && this._interrupt(t), y(this, Ee, void 0), this._firstAudioTimestamp = void 0, this._audioLengthMs = 0, y(this, Xe, void 0);
  }
}
Ye = new WeakMap(), bt = new WeakMap(), X = new WeakMap(), sn = new WeakMap(), Ee = new WeakMap(), Xe = new WeakMap(), Qe = new WeakMap(), jn = new WeakSet(), xa = function(t, r, s) {
  if (u(this, X).websocket) {
    t();
    return;
  }
  if (!u(this, Ye))
    throw new Q("API key is not set. Please call `connect()` with an API key first.");
  if (!u(this, Ye).startsWith("ek_") && !u(this, sn))
    throw new Q("Using the WebSocket connection in a browser environment requires an ephemeral client key. If you have to use a regular API key, set the `useInsecureApiKey` option to true.");
  const a = [
    "realtime",
    // Auth
    "openai-insecure-api-key." + u(this, Ye),
    // Beta protocol, required
    "openai-beta.realtime-v1",
    // Version header
    Da
  ], i = new Sc(u(this, bt), a);
  y(this, X, {
    status: "connecting",
    websocket: i
  }), this.emit("connection_change", u(this, X).status), i.addEventListener("open", () => {
    y(this, X, {
      status: "connected",
      websocket: i
    }), this.emit("connection_change", u(this, X).status), this._onOpen(), t();
  }), i.addEventListener("error", (o) => {
    this._onError(o), y(this, X, {
      status: "disconnected",
      websocket: void 0
    }), this.emit("connection_change", u(this, X).status), r(o);
  }), i.addEventListener("message", (o) => {
    this._onMessage(o);
    const { data: c, isGeneric: l } = Dr(o);
    if (!(!c || l))
      if (c.type === "response.audio.delta") {
        y(this, Xe, c.content_index), y(this, Ee, c.item_id), this._firstAudioTimestamp === void 0 && (this._firstAudioTimestamp = Date.now(), this._audioLengthMs = 0);
        const p = Ns(c.delta);
        this._audioLengthMs += p.byteLength / 24 / 2;
        const f = {
          type: "audio",
          data: p,
          responseId: c.response_id
        };
        this._onAudio(f);
      } else c.type === "input_audio_buffer.speech_started" ? this.interrupt() : c.type === "response.created" ? y(this, Qe, !0) : c.type === "response.done" ? y(this, Qe, !1) : c.type === "session.created" && (this._tracingConfig = c.session.tracing, this._updateTracingConfig(s.tracing ?? "auto"));
  }), i.addEventListener("close", () => {
    y(this, X, {
      status: "disconnected",
      websocket: void 0
    }), this.emit("connection_change", u(this, X).status), this._onClose();
  });
};
var U, Z, an, j, St, Tt, on, H, un, kt, z, hn, mn, ba, gn, Sa, vr, Ta;
class Cc extends Zn {
  constructor(t, r = {}) {
    super();
    T(this, z);
    _(this, "initialAgent");
    _(this, "options");
    T(this, U);
    T(this, Z);
    T(this, an, []);
    T(this, j);
    T(this, St, []);
    T(this, Tt);
    T(this, on, {});
    T(this, H, []);
    T(this, un);
    T(this, kt, {});
    this.initialAgent = t, this.options = r, typeof r.transport > "u" && Oa() || r.transport === "webrtc" ? y(this, U, new bc()) : r.transport === "websocket" || typeof r.transport > "u" ? y(this, U, new Tc()) : y(this, U, r.transport), y(this, Z, t), y(this, j, new lt({
      ...r.context ?? {},
      history: u(this, H)
    })), y(this, St, (r.outputGuardrails ?? []).map(Iu)), y(this, Tt, ku(r.outputGuardrailSettings ?? {})), y(this, un, r.historyStoreAudio ?? !1);
  }
  /**
   * The transport layer used by the session.
   */
  get transport() {
    return u(this, U);
  }
  /**
   * The current agent in the session.
   */
  get currentAgent() {
    return u(this, Z);
  }
  /**
   * The current usage of the session.
   */
  get usage() {
    return u(this, j).usage;
  }
  /**
   * The current context of the session.
   */
  get context() {
    return u(this, j);
  }
  /**
   * Whether the session is muted. Might be `null` if the underlying transport layer does not
   * support muting.
   */
  get muted() {
    return u(this, U).muted;
  }
  /**
   * The history of the session.
   */
  get history() {
    return u(this, H);
  }
  async updateAgent(t) {
    return u(this, Z).emit("agent_handoff", u(this, j), t), this.emit("agent_handoff", u(this, j), u(this, Z), t), await $(this, z, hn).call(this, t), await u(this, U).updateSessionConfig(await $(this, z, mn).call(this)), t;
  }
  /**
   * Connect to the session. This will establish the connection to the underlying transport layer
   * and start the session.
   *
   * After connecting, the session will also emit a `history_updated` event with an empty history.
   *
   * @param options - The options for the connection.
   */
  async connect(t) {
    await $(this, z, hn).call(this, this.initialAgent), $(this, z, Ta).call(this), await u(this, U).connect({
      apiKey: t.apiKey ?? this.options.apiKey,
      model: this.options.model,
      initialSessionConfig: await $(this, z, mn).call(this, this.options.config)
    }), y(this, H, []), this.emit("history_updated", u(this, H));
  }
  /**
   * Update the history of the session.
   * @param newHistory - The new history to set.
   */
  updateHistory(t) {
    let r;
    typeof t == "function" ? r = t(u(this, H)) : r = t, u(this, U).resetHistory(u(this, H), r);
  }
  /**
   * Send a message to the session.
   * @param message - The message to send.
   * @param otherEventData - Additional event data to send.
   */
  sendMessage(t, r = {}) {
    u(this, U).sendMessage(t, r);
  }
  /**
   * Mute the session.
   * @param muted - Whether to mute the session.
   */
  mute(t) {
    u(this, U).mute(t);
  }
  /**
   * Disconnect from the session.
   */
  close() {
    y(this, kt, {}), u(this, U).close();
  }
  /**
   * Send audio to the session.
   * @param audio - The audio to send.
   * @param options - Additional options.
   * @param options.commit - Whether to finish the turn with this audio.
   */
  sendAudio(t, r = {}) {
    u(this, U).sendAudio(t, r);
  }
  /**
   * Interrupt the session artificially for example if you want to build a "stop talking"
   * button.
   */
  interrupt() {
    u(this, U).interrupt();
  }
  /**
   * Approve a tool call. This will also trigger the tool call to the agent.
   * @param approvalItem - The approval item to approve.
   * @param options - Additional options.
   * @param options.alwaysApprove - Whether to always approve the tool call.
   */
  async approve(t, r = { alwaysApprove: !1 }) {
    u(this, j).approveTool(t, r);
    const s = u(this, Z).tools.find((a) => a.name === t.rawItem.name);
    if (s && s.type === "function" && t.rawItem.type === "function_call")
      await $(this, z, gn).call(this, t.rawItem, s);
    else
      throw new fe(`Tool ${t.rawItem.name} not found`);
  }
  /**
   * Reject a tool call. This will also trigger the tool call to the agent.
   * @param approvalItem - The approval item to reject.
   * @param options - Additional options.
   * @param options.alwaysReject - Whether to always reject the tool call.
   */
  async reject(t, r = { alwaysReject: !1 }) {
    u(this, j).rejectTool(t, r);
    const s = u(this, Z).tools.find((a) => a.name === t.rawItem.name);
    if (s && s.type === "function" && t.rawItem.type === "function_call")
      await $(this, z, gn).call(this, t.rawItem, s);
    else
      throw new fe(`Tool ${t.rawItem.name} not found`);
  }
}
U = new WeakMap(), Z = new WeakMap(), an = new WeakMap(), j = new WeakMap(), St = new WeakMap(), Tt = new WeakMap(), on = new WeakMap(), H = new WeakMap(), un = new WeakMap(), kt = new WeakMap(), z = new WeakSet(), hn = async function(t) {
  y(this, Z, t);
  const s = u(this, Z).handoffs.map(On).map((a) => a.getHandoffAsFunctionTool());
  y(this, an, [
    ...(await u(this, Z).getAllTools()).filter((a) => a.type === "function"),
    ...s
  ]);
}, mn = async function(t = {}) {
  const r = await u(this, Z).getSystemPrompt(u(this, j)), s = this.options.tracingDisabled ? null : this.options.workflowName ? {
    workflow_name: this.options.workflowName
  } : "auto";
  return s !== null && s !== "auto" ? (this.options.groupId && (s.group_id = this.options.groupId), this.options.traceMetadata && (s.metadata = this.options.traceMetadata)) : (this.options.groupId || this.options.traceMetadata) && Ie.warn("In order to set traceMetadata or a groupId you need to specify a workflowName."), {
    instructions: r,
    voice: u(this, Z).voice,
    model: this.options.model,
    tools: u(this, an),
    tracing: s,
    ...t
  };
}, ba = async function(t, r) {
  const s = await r.onInvokeHandoff(u(this, j), t.arguments);
  u(this, Z).emit("agent_handoff", u(this, j), s), this.emit("agent_handoff", u(this, j), u(this, Z), s), await $(this, z, hn).call(this, s), await u(this, U).updateSessionConfig(await $(this, z, mn).call(this));
  const a = Ks(s);
  return u(this, U).sendFunctionCallOutput(t, a, !0), s;
}, gn = async function(t, r) {
  u(this, j).context.history = JSON.parse(JSON.stringify(u(this, H)));
  let s = t.arguments;
  if (r.parameters && (et(r.parameters) ? s = r.parameters.parse(s) : s = JSON.parse(s)), await r.needsApproval(u(this, j), s, t.callId)) {
    const c = this.context.isToolApproved({
      toolName: r.name,
      callId: t.callId
    });
    if (c === !1) {
      this.emit("agent_tool_start", u(this, j), u(this, Z), r, {
        toolCall: t
      }), u(this, Z).emit("agent_tool_start", u(this, j), r, {
        toolCall: t
      });
      const l = "Tool execution was not approved.";
      u(this, U).sendFunctionCallOutput(t, l, !0), this.emit("agent_tool_end", u(this, j), u(this, Z), r, l, { toolCall: t }), u(this, Z).emit("agent_tool_end", u(this, j), r, l, {
        toolCall: t
      });
      return;
    } else if (typeof c > "u") {
      this.emit("tool_approval_requested", u(this, j), u(this, Z), {
        type: "function_approval",
        tool: r,
        approvalItem: new Se(t, u(this, Z))
      });
      return;
    }
  }
  this.emit("agent_tool_start", u(this, j), u(this, Z), r, {
    toolCall: t
  }), u(this, Z).emit("agent_tool_start", u(this, j), r, {
    toolCall: t
  }), u(this, j).context.history = JSON.parse(JSON.stringify(u(this, H)));
  const i = await r.invoke(u(this, j), t.arguments), o = tt(i);
  u(this, U).sendFunctionCallOutput(t, o, !0), this.emit("agent_tool_end", u(this, j), u(this, Z), r, o, { toolCall: t }), u(this, Z).emit("agent_tool_end", u(this, j), r, o, { toolCall: t });
}, Sa = async function(t) {
  const r = new Map(u(this, Z).handoffs.map(On).map((i) => [i.toolName, i])), s = new Map((await u(this, Z).getAllTools()).map((i) => [i.name, i])), a = r.get(t.name);
  if (a)
    await $(this, z, ba).call(this, t, a);
  else {
    const i = s.get(t.name);
    if (i && i.type === "function")
      await $(this, z, gn).call(this, t, i);
    else
      throw new fe(`Tool ${t.name} not found`);
  }
}, vr = async function(t, r, s) {
  if (u(this, St).length === 0)
    return;
  const a = {
    agent: u(this, Z),
    agentOutput: t,
    context: u(this, j)
  }, o = (await Promise.all(u(this, St).map((c) => c.run(a)))).find((c) => c.output.tripwireTriggered);
  if (o) {
    if (u(this, kt)[r])
      return;
    u(this, kt)[r] = !0;
    const c = new tr(`Output guardrail triggered: ${JSON.stringify(o.output.outputInfo)}`, o);
    this.emit("guardrail_tripped", u(this, j), u(this, Z), c, {
      itemId: s
    }), this.interrupt();
    const l = Au(o);
    this.sendMessage(l);
    return;
  }
}, Ta = function() {
  u(this, U).on("*", (s) => {
    this.emit("transport_event", s);
  }), u(this, U).on("audio", (s) => {
    this.emit("audio", s);
  }), u(this, U).on("turn_started", () => {
    this.emit("agent_start", u(this, j), u(this, Z)), u(this, Z).emit("agent_start", u(this, j), u(this, Z));
  }), u(this, U).on("turn_done", (s) => {
    const a = s.response.output[s.response.output.length - 1], i = Ds(a) ?? "", o = (a == null ? void 0 : a.id) ?? "";
    this.emit("agent_end", u(this, j), u(this, Z), i), u(this, Z).emit("agent_end", u(this, j), i), $(this, z, vr).call(this, i, s.response.id, o);
  }), u(this, U).on("audio_done", () => {
    this.emit("audio_stopped", u(this, j), u(this, Z));
  });
  let t = 0, r;
  u(this, U).on("audio_transcript_delta", (s) => {
    try {
      const a = s.delta, i = s.itemId, o = s.responseId;
      r !== i && (r = i, t = 0);
      const l = (u(this, on)[i] ?? "") + a;
      if (u(this, on)[i] = l, u(this, Tt).debounceTextLength < 0)
        return;
      const p = Math.floor(l.length / u(this, Tt).debounceTextLength);
      p > t && (t = p, $(this, z, vr).call(this, l, o, i));
    } catch (a) {
      this.emit("error", {
        type: "error",
        error: a
      });
    }
  }), u(this, U).on("item_update", (s) => {
    try {
      const a = !u(this, H).some((i) => i.itemId === s.itemId);
      if (y(this, H, Na(u(this, H), s, u(this, un))), u(this, j).context.history = u(this, H), a) {
        const i = u(this, H).find((o) => o.itemId === s.itemId);
        i && this.emit("history_added", i);
      }
      this.emit("history_updated", u(this, H));
    } catch (a) {
      this.emit("error", {
        type: "error",
        error: a
      });
    }
  }), u(this, U).on("item_deleted", (s) => {
    try {
      y(this, H, u(this, H).filter((a) => a.itemId !== s.itemId)), u(this, j).context.history = u(this, H), this.emit("history_updated", u(this, H));
    } catch (a) {
      this.emit("error", {
        type: "error",
        error: a
      });
    }
  }), u(this, U).on("function_call", async (s) => {
    try {
      await $(this, z, Sa).call(this, s);
    } catch (a) {
      Ie.error("Error handling function call", a), this.emit("error", {
        type: "error",
        error: a
      });
    }
  }), u(this, U).on("usage_update", (s) => {
    u(this, j).usage.add(s);
  }), u(this, U).on("audio_interrupted", () => {
    this.emit("audio_interrupted", u(this, j), u(this, Z));
  }), u(this, U).on("error", (s) => {
    this.emit("error", s);
  });
};
const Ec = {
  base64ToArrayBuffer: Ns,
  arrayBufferToBase64: Rs,
  getLastTextFromAudioOutputMessage: Ds
};
export {
  xc as DEFAULT_OPENAI_REALTIME_MODEL,
  Pe as DEFAULT_OPENAI_REALTIME_SESSION_CONFIG,
  fe as ModelBehaviorError,
  Dn as OpenAIRealtimeBase,
  bc as OpenAIRealtimeWebRTC,
  Tc as OpenAIRealtimeWebSocket,
  tr as OutputGuardrailTripwireTriggered,
  Ac as RealtimeAgent,
  Cc as RealtimeSession,
  Q as UserError,
  nr as tool,
  Ec as utils
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
